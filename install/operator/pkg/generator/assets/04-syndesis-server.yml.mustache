- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-server
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-integration
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
    name: syndesis-server
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
      name: http
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-server
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
    name: syndesis-server
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-server
    strategy:
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
      type: Recreate
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/type: infrastructure
          syndesis.io/component: syndesis-server
      spec:
        serviceAccountName: syndesis-server
        containers:
        - name: syndesis-server
          env:
          - name: JAVA_APP_DIR
            value: /deployments
          - name: JAVA_OPTIONS
            value: "-Djava.net.preferIPv4Stack=true -Duser.home=/tmp"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ENDPOINTS_TEST_SUPPORT_ENABLED
            value: ${TEST_SUPPORT_ENABLED}
          - name: CONTROLLERS_INTEGRATION_ENABLED
            value: ${CONTROLLERS_INTEGRATION_ENABLED}
          - name: POSTGRESQL_SAMPLEDB_PASSWORD
            value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
          - name: CLIENT_STATE_AUTHENTICATION_ALGORITHM
            value: "HmacSHA1"
          - name: CLIENT_STATE_AUTHENTICATION_KEY
            valueFrom:
              secretKeyRef:
                name: syndesis-server-secret
                key: clientStateAuthenticationKey
          - name: CLIENT_STATE_ENCRYPTION_ALGORITHM
            value: "AES/CBC/PKCS5Padding"
          - name: CLIENT_STATE_ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: syndesis-server-secret
                key: clientStateEncryptionKey
          - name: CLIENT_STATE_TID
            value: "1"
          - name: INTEGRATION_STATE_CHECK_INTERVAL
            value: ${INTEGRATION_STATE_CHECK_INTERVAL}
          - name: CONTROLLERS_EXPOSE_VIA3SCALE
            value: ${CONTROLLERS_EXPOSE_VIA3SCALE}
{{#Debug}}
          - name: JAVA_DEBUG
            value: "true"
{{/Debug}}{{^WithDockerImages}}
          image: ' '
{{/WithDockerImages}}{{#WithDockerImages}}
          image: ${SYNDESIS_REGISTRY}/{{ Images.SyndesisImagesPrefix }}/{{ Images.Syndesis.Rest }}:{{ Tags.Syndesis }}
{{/WithDockerImages}}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              port: 8080
              path: /api/v1/version
              httpHeaders:
              - name: Accept
                value: 'text/plain'
            initialDelaySeconds: 300
            periodSeconds: 20
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/health"
              port: 8181
            initialDelaySeconds: 10
          ports:
          - containerPort: 8080
            name: http
          - containerPort: 8181
            name: metrics
          - containerPort: 9779
            name: prometheus
          - containerPort: 8778
            name: jolokia
          workingDir: /deployments
          volumeMounts:
          - name: config-volume
            mountPath: /deployments/config
          # Set QoS class to "Guaranteed" (limits == requests)
          # This doesn't work on OSO as there is a fixed ratio
          # from limit to resource (80% currently). 'requests' is ignored there
          resources:
            limits:
              memory: ${SERVER_MEMORY_LIMIT}
              cpu: 750m
            requests:
              memory: 256Mi
              cpu: 450m
        volumes:
        - name: config-volume
          configMap:
            name: syndesis-server-config
    triggers:
{{^WithDockerImages}}
    - imageChangeParams:
        automatic: true
        containerNames:
        - syndesis-server
        from:
          kind: ImageStreamTag
          name: {{ Images.Syndesis.Rest }}:{{ Tags.Syndesis }}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
{{/WithDockerImages}}
    - type: ConfigChange

# workaround camel-k metrics
- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      io.syndesis/upgrade-mode: keep
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
    name: syndesis-prometheus-agent-config
  data:
    prometheus-config.yml: |-
{{{PrometheusRules}}}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      io.syndesis/upgrade-mode: keep
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
    name: syndesis-server-config
  data:
    application.yml: |-
      deployment:
        load-demo-data: ${DEMO_DATA_ENABLED}
      cors:
{{^AllowLocalHost}}
        allowedOrigins: https://${ROUTE_HOSTNAME}
{{/AllowLocalHost}}{{#AllowLocalHost}}
        allowedOrigins: http://localhost:4200, https://localhost:4200, https://${ROUTE_HOSTNAME}
{{/AllowLocalHost}}
      cache:
        cluster:
          name: SyndesisCluster
        max:
          entries: 100
      encrypt:
        key: ${SYNDESIS_ENCRYPT_KEY}
      spring:
        zipkin:
          enabled: false
        datasource:
          url: jdbc:postgresql://syndesis-db:5432/syndesis?sslmode=disable
          username: ${POSTGRESQL_USER}
          password: ${POSTGRESQL_PASSWORD}
          driver-class-name: org.postgresql.Driver
      security:
        basic:
          enabled: false
      management:
        port: 8181
        security:
          enabled: true
      endpoints:
        health:
          sensitive: false
        jsondb:
          enabled: true
      monitoring:
        kind: default
      features:
        monitoring:
          enabled: true
        public-api:
          enabled: true
        knative:
          enabled: false
{{#Productized}}
      maven:
        repositories:
          central: https://repo.maven.apache.org/maven2/
{{#EarlyAccess}}          redhat-ea: https://maven.repository.redhat.com/earlyaccess/all/
          jboss-ea: https://repository.jboss.org/nexus/content/groups/ea/{{/EarlyAccess}}{{^EarlyAccess}}
          redhat-ga: https://maven.repository.redhat.com/ga/
          jboss-ga: https://repository.jboss.org/{{/EarlyAccess}}
{{/Productized}}      openshift:
        apiBaseUrl: ${OPENSHIFT_MASTER}/oapi/v1
        namespace: ${NAMESPACE}
        imageStreamNamespace: ${IMAGE_STREAM_NAMESPACE}
        builderImageStreamTag: {{ Images.Syndesis.S2i }}:{{ Tags.Syndesis }}
        deploymentMemoryRequestMi: 200
        deploymentMemoryLimitMi: 512
        mavenOptions: "-XX:+UseG1GC -XX:+UseStringDeduplication -Xmx310m"
      dao:
        kind: jsondb
      controllers:
        maxIntegrationsPerUser: ${MAX_INTEGRATIONS_PER_USER}
        maxDeploymentsPerUser: ${MAX_INTEGRATIONS_PER_USER}
        integrationStateCheckInterval: ${INTEGRATION_STATE_CHECK_INTERVAL}
# START:CAMEL-K
- kind: Role
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: camel-k
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
  rules:
  - apiGroups:
    - camel.apache.org
    resources:
    - "*"
    verbs: [ get, list, create, update, delete, deletecollection, watch]
- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: camel-k
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
  subjects:
  - kind: ServiceAccount
    name: syndesis-server
  roleRef:
    kind: Role
    name: camel-k
    apiGroup: rbac.authorization.k8s.io
- kind: Role
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: syndesis-knative-reader
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
  rules:
  - apiGroups:
      - serving.knative.dev
    resources:
      - services
    verbs: [ get, list, watch]
  - apiGroups:
      - eventing.knative.dev
    resources:
      - channels
    verbs: [ get, list, watch]
- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: syndesis-knative-reader
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
  subjects:
  - kind: ServiceAccount
    name: syndesis-server
  roleRef:
    kind: Role
    name: syndesis-knative-reader
    apiGroup: rbac.authorization.k8s.io
# END:CAMEL-K
