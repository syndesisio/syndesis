- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus
    name: syndesis-prometheus-config
  data:
    prometheus.yml: |-
      global:
        scrape_interval:     5s
        evaluation_interval: 5s

      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
              - localhost:9090

          metric_relabel_configs:
          - source_labels: [__name__]
            regex: go_(.+)
            action: drop
          - source_labels: [__name__]
            regex: http_(.+)
            action: drop
          - source_labels: [__name__]
            regex: net_(.+)
            action: drop
          - source_labels: [__name__]
            regex: process_(.+)
            action: drop
          - source_labels: [__name__]
            regex: prometheus_(.+)
            action: drop
          - source_labels: [__name__]
            regex: tsdb_(.+)
            action: drop

        - job_name: integration-pods

          kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - {{.OpenShiftProject}}

          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_label_syndesis_io_type]
            action: keep
            regex: integration
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_(syndesis.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          metric_relabel_configs:
          - source_labels: [__name__]
            regex: jmx_(.+)
            action: drop
          - source_labels: [__name__]
            regex: jvm_(.+)
            action: drop
          - source_labels: [__name__]
            regex: process_(.+)
            action: drop
          - source_labels: [type, __name__]
            separator: ':'
            regex: context:(org_apache_camel_ExchangesTotal|org_apache_camel_ExchangesFailed|io_syndesis_camel_StartTimestamp|io_syndesis_camel_LastExchangeCompletedTimestamp|io_syndesis_camel_LastExchangeFailureTimestamp)
            action: keep

- apiVersion: v1
  kind: Service
  metadata:
    name: syndesis-prometheus
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus
  spec:
    ports:
    - name: prometheus
      port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-prometheus
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: syndesis-prometheus
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: {{.Syndesis.Components.Prometheus.Resources.VolumeCapacity}}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: syndesis-prometheus
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-prometheus
    strategy:
      type: Recreate
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
    template:
      metadata:
        labels:
          app: syndesis
{{if .Productized}}
          com.redhat.component-name: syndesis-prometheus
          com.redhat.component-version: "{{.Tag}}"
          com.redhat.product-name: "Red_Hat_Fuse"
          com.redhat.product-version: "{{.ProductVersion}}"
{{end}}
          syndesis.io/app: syndesis
          syndesis.io/type: infrastructure
          syndesis.io/component: syndesis-prometheus
      spec:
        serviceAccountName: syndesis-prometheus
        containers:
        - name: prometheus
          image: '{{ dockerImageFromComponent .Syndesis.Components.Prometheus.Image .Syndesis.SHA }}'
          imagePullPolicy: IfNotPresent
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.retention=30d'
          livenessProbe:
            httpGet:
              port: 9090
            initialDelaySeconds: 60
          ports:
          - containerPort: 9090
          readinessProbe:
            httpGet:
              port: 9090
            initialDelaySeconds: 30
          # DB QoS class is "Guaranteed" (requests == limits)
          # Note: On OSO there is no Guaranteed class, its always burstable
          resources:
            limits:
              memory: {{ .Syndesis.Components.Prometheus.Resources.Memory}}
            requests:
              memory: {{ .Syndesis.Components.Prometheus.Resources.Memory}}
          volumeMounts:
          - name: syndesis-prometheus-data
            mountPath: /prometheus
          - name: syndesis-prometheus-config
            mountPath: /etc/prometheus
        volumes:
        - name: syndesis-prometheus-data
          persistentVolumeClaim:
            claimName: syndesis-prometheus
        - name: syndesis-prometheus-config
          configMap:
            name: syndesis-prometheus-config
    triggers:
    - type: ConfigChange
