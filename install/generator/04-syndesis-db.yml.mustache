- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
    name: syndesis-sampledb-config
  data:
    add-sample-db.sh: |
      #!/bin/bash
      until bash -c "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"; do
        echo "Waiting for Postgres server..."
        sleep 1
      done
      echo "***** creating sampledb"
      psql <<EOF
        CREATE DATABASE sampledb;
        CREATE USER sampledb WITH PASSWORD '$POSTGRESQL_SAMPLEDB_PASSWORD';
        GRANT ALL PRIVILEGES ON DATABASE sampledb to sampledb;
      EOF
      psql -d sampledb -U sampledb <<'EOF'
        CREATE TABLE IF NOT EXISTS contact (first_name VARCHAR, last_name VARCHAR, company VARCHAR, lead_source VARCHAR, create_date DATE);
        INSERT INTO contact VALUES ('Joe','Jackson','Red Hat','db',current_timestamp);
        CREATE TABLE IF NOT EXISTS todo (id SERIAL PRIMARY KEY, task VARCHAR, completed INTEGER);
        CREATE OR REPLACE FUNCTION add_lead(
          first_and_last_name varchar,
          company varchar,
          phone varchar,
          email varchar,
          lead_source varchar,
          lead_status varchar,
          rating varchar)

          RETURNS void
          LANGUAGE 'plpgsql'

        AS $BODY$
        DECLARE
          task varchar;
        BEGIN
          task := concat(lead_status || ' ', 'Lead: Please contact ', first_and_last_name, ' from ' || company, ' via phone: ' || phone, ' via email: ' || email, '. ', 'Lead is from ' || lead_source, '. Rating: ' || rating, '.');
          insert into todo(task,completed) VALUES (task,0);
        END;
        $BODY$;

        CREATE OR REPLACE FUNCTION create_lead(
          OUT first_name text,
          OUT last_name text,
          OUT company text,
          OUT lead_source text)
          RETURNS SETOF record
          AS
          $$
            SELECT first_name, last_name, company, lead_source
            FROM contact;
          $$
           LANGUAGE 'sql' VOLATILE;
      EOF

      echo "***** sampledb created"
    postStart.sh: |
      #!/bin/bash
      /var/lib/pgsql/sampledb/add-sample-db.sh &>  /proc/1/fd/1

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
    name: syndesis-db-maintenance-script
  data:
    maintenance.sh: |
      #!/bin/bash
      cat << EOF| psql -h syndesis-db -U $POSTGRESQL_USER -d $POSTGRESQL_DATABASE
      VACUUM FULL ANALYSE jsondb;
      REINDEX TABLE jsondb;
      SELECT COUNT(*) FROM jsondb;
      EOF

- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: syndesis-db-maintenance
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db-maintenance
  spec:
    schedule: "15 4 * * *"
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              syndesis.io/app: syndesis
              syndesis.io/type: infrastructure
              syndesis.io/component: syndesis-db-maintenance
          spec:
            containers:
            - name: syndesis-db-maintenance
              env:
              - name: POSTGRESQL_USER
                value: ${POSTGRESQL_USER}
              - name: PGPASSWORD
                value: ${POSTGRESQL_PASSWORD}
              - name: POSTGRESQL_DATABASE
                value: ${POSTGRESQL_DATABASE}
              image: openshift/base-centos7
              command:
                - /bin/sh
                - -c
                - /data/maintenance.sh
              volumeMounts:
              - mountPath: /data
                name: syndesis-db-maintenance-script
            restartPolicy: Never
            volumes:
            - configMap:
                defaultMode: 511
                name: syndesis-db-maintenance-script
              name: syndesis-db-maintenance-script

- apiVersion: v1
  kind: Service
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-db
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${POSTGRESQL_VOLUME_CAPACITY}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-db
    strategy:
      type: Recreate
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/component: syndesis-db
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          - name: POSTGRESQL_SAMPLEDB_PASSWORD
            value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
          image: ' '
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - /var/lib/pgsql/sampledb/postStart.sh
          livenessProbe:
            initialDelaySeconds: 60
            tcpSocket:
              port: 5432
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
          # DB QoS class is "Guaranteed" (requests == limits)
          # Note: On OSO there is no Guaranteed class, its always burstable
          resources:
            limits:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
            requests:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: syndesis-db-data
          - mountPath: /var/lib/pgsql/sampledb
            name: syndesis-sampledb-config
        volumes:
        - name: syndesis-db-data
          persistentVolumeClaim:
            claimName: syndesis-db
        - configMap:
            defaultMode: 511
            name: syndesis-sampledb-config
          name: syndesis-sampledb-config
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: {{ Images.Support.Postgresql }}:{{ Tags.Postgresql }}
          namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
