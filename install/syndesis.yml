#
# Do not edit, this is a generated file.  To regenerate,  run: ./generator/run.sh
#
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: syndesis
#
# Template flavor:
#
# Allow localhost refs: false
# Use docker images: false
# Syndesis Tag: latest
# Prometheus Tag: v2.1.0
# Postgresql Tag: 9.5
# OAuthProxy Tag: v1.1.0
#
  labels:
    app: syndesis
    syndesis.io/app: syndesis
    syndesis.io/type: infrastructure
parameters:
- name: ROUTE_HOSTNAME
  description: The external hostname to access Syndesis
- name: OPENSHIFT_MASTER
  description: Public OpenShift master address
  value: https://localhost:8443
  required: true
- name: OPENSHIFT_CONSOLE_URL
  description: The URL to the OpenShift console
  displayName: OpenShift Console URL
- name: OPENSHIFT_PROJECT
  description: The name of the OpenShift project Syndesis is being deployed into.
  displayName: OpenShift project to deploy into
  required: true
- name: SAR_PROJECT
  description: The user needs to have permissions to at least get a list of pods in the given project in order to be granted access to the Syndesis installation in the $OPENSHIFT_PROJECT
  displayName: OpenShift project to be used to authenticate the user against
  required: true
- name: OPENSHIFT_OAUTH_CLIENT_SECRET
  description: OpenShift OAuth client secret
  generate: expression
  from: "[a-zA-Z0-9]{64}"
  required: true
- description: Maximum amount of memory the PostgreSQL container can use.
  displayName: Memory Limit
  name: POSTGRESQL_MEMORY_LIMIT
  value: 255Mi
- description: The OpenShift Namespace where the PostgreSQL ImageStream resides.
  displayName: Namespace
  name: POSTGRESQL_IMAGE_STREAM_NAMESPACE
  value: openshift
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  name: POSTGRESQL_USER
  value: syndesis
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: syndesis
- description: Volume space available for PostgreSQL data, e.g. 512Mi, 2Gi.
  displayName: PostgreSQL Volume Capacity
  name: POSTGRESQL_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Password for the PostgreSQL sampledb user.
  displayName: PostgreSQL SampleDB Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_SAMPLEDB_PASSWORD
  required: true
- description: Password for the PostgreSQL Grafana database user.
  displayName: PostgreSQL Grafana database Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_GRAFANA_PASSWORD
  required: true
- description: Enables test-support endpoint on backend API
  displayName: Test Support Enabled
  name: TEST_SUPPORT_ENABLED
  required: true
  value: "false"
- description: Enables starting up with demo data
  displayName: Demo Data Enabled
  name: DEMO_DATA_ENABLED
  required: true
  value: "false"
- description: Registry from where to fetch Syndesis images
  displayName: Syndesis Image Registry
  name: SYNDESIS_REGISTRY
  value: 'docker.io'
- description: Should deployment of integrations be enabled?
  displayName: Enable Integration Deployment
  name: CONTROLLERS_INTEGRATION_ENABLED
  value: 'true'
- description: Namespace containing image streams
  displayName: Image Stream Namespace
  name: IMAGE_STREAM_NAMESPACE
  value: ''
- description: Secret to use to encrypt oauth cookies
  displayName: OAuth Cookie Secret
  name: OAUTH_COOKIE_SECRET
  generate: expression
  from: '[a-zA-Z0-9]{32}'
- name: SYNDESIS_ENCRYPT_KEY
  description: The encryption key used to encrypt/decrypt stored secrets
  generate: expression
  from: "[a-zA-Z0-9]{64}"
  required: true
- description: Volume space available for Prometheus data, e.g. 512Mi, 2Gi.
  displayName: Prometheus Volume Capacity
  name: PROMETHEUS_VOLUME_CAPACITY
  value: 1Gi
  required: true
- description: Maximum amount of memory the Prometheus container can use.
  displayName: Memory Limit
  name: PROMETHEUS_MEMORY_LIMIT
  value: 512Mi
  required: true
- description: Maximum amount of memory the Grafana container can use.
  displayName: Memory Limit
  name: GRAFANA_MEMORY_LIMIT
  value: 512Mi
  required: true
- description: Volume space available for Meta data, e.g. 512Mi, 2Gi.
  displayName: Meta Volume Capacity
  name: META_VOLUME_CAPACITY
  required: true
  value: 1Gi
  required: true
- description: Maximum amount of memory the syndesis-meta service might use.
  displayName: Memory Limit
  name: META_MEMORY_LIMIT
  value: 512Mi
  required: true
- description: Maximum amount of memory the syndesis-server service might use.
  displayName: Memory Limit
  name: SERVER_MEMORY_LIMIT
  value: 800Mi
  required: true
- description: Maximum number of integrations single user can create
  displayName: Maximum number of integrations
  name: MAX_INTEGRATIONS_PER_USER
  value: "1"
  required: true
- description: Interval for checking the state of the integrations.
  displayName: Integration state check interval
  name: INTEGRATION_STATE_CHECK_INTERVAL
  value: "60"
  required: true
- description: Key used to perform authentication of client side stored state.
  displayName: Client side state authentication key
  from: '[a-zA-Z0-9]{32}'
  generate: expression
  name: CLIENT_STATE_AUTHENTICATION_KEY
  required: true
- description: Key used to perform encryption of client side stored state.
  displayName: Client side state encryption key
  from: '[a-zA-Z0-9]{32}'
  generate: expression
  name: CLIENT_STATE_ENCRYPTION_KEY
  required: true
- description: Volume space available for the upgrade process (backup data), e.g. 512Mi, 2Gi.
  displayName: Upgrade Volume Capacity
  name: UPGRADE_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: How to expose services, via OpenShift Route (false) or via 3scale (true)
  displayName: Expose services via 3scale
  name: CONTROLLERS_EXPOSE_VIA3SCALE
  required: true
  value: 'false'
message: |-
  Syndesis is deployed to ${ROUTE_HOSTNAME}.
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: syndesis-server
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${SYNDESIS_REGISTRY}/syndesis/syndesis-server:latest
      importPolicy:
        scheduled: true
      name: "latest"
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: syndesis-ui
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-ui
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${SYNDESIS_REGISTRY}/syndesis/syndesis-ui:latest
      importPolicy:
        scheduled: true
      name: "latest"
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: syndesis-meta
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-meta
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${SYNDESIS_REGISTRY}/syndesis/syndesis-meta:latest
      importPolicy:
        scheduled: true
      name: "latest"
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: oauth-proxy
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-oauthproxy
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${SYNDESIS_REGISTRY}/openshift/oauth-proxy:v1.1.0
      importPolicy:
        scheduled: true
      name: "v1.1.0"
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: prometheus
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${SYNDESIS_REGISTRY}/prom/prometheus:v2.1.0
      importPolicy:
        scheduled: true
      name: "v2.1.0"
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: grafana
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-grafana
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${SYNDESIS_REGISTRY}/grafana/grafana:5.4.2
      importPolicy:
        scheduled: true
      name: "5.4.2"
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: postgres_exporter
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db-metrics
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${SYNDESIS_REGISTRY}/wrouesnel/postgres_exporter:v0.4.7
      importPolicy:
        scheduled: true
      name: "v0.4.7"

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: syndesis-s2i
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: s2i-java
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${SYNDESIS_REGISTRY}/syndesis/syndesis-s2i:latest
      importPolicy:
        scheduled: true
      name: "latest"

- apiVersion: v1
  kind: Secret
  metadata:
    name: syndesis-oauth-proxy-cookie-secret
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
  stringData:
    oauthCookieSecret: ${OAUTH_COOKIE_SECRET}
- apiVersion: v1
  kind: Secret
  metadata:
    name: syndesis-server-secret
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
  stringData:
    clientStateAuthenticationKey: ${CLIENT_STATE_AUTHENTICATION_KEY}
    clientStateEncryptionKey: ${CLIENT_STATE_ENCRYPTION_KEY}
- apiVersion: v1
  kind: Secret
  metadata:
    name: syndesis-global-config
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
  stringData:
    syndesis: "latest"
    postgresql: "9.5"
    oauthproxy: "v1.1.0"
    prometheus: "v2.1.0"
    params: |-
      ROUTE_HOSTNAME=${ROUTE_HOSTNAME}
      OPENSHIFT_MASTER=${OPENSHIFT_MASTER}
      OPENSHIFT_PROJECT=${OPENSHIFT_PROJECT}
      OPENSHIFT_OAUTH_CLIENT_SECRET=${OPENSHIFT_OAUTH_CLIENT_SECRET}
      POSTGRESQL_MEMORY_LIMIT=${POSTGRESQL_MEMORY_LIMIT}
      POSTGRESQL_IMAGE_STREAM_NAMESPACE=${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
      POSTGRESQL_USER=${POSTGRESQL_USER}
      POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      POSTGRESQL_VOLUME_CAPACITY=${POSTGRESQL_VOLUME_CAPACITY}
      POSTGRESQL_SAMPLEDB_PASSWORD=${POSTGRESQL_SAMPLEDB_PASSWORD}
      TEST_SUPPORT_ENABLED=${TEST_SUPPORT_ENABLED}
      DEMO_DATA_ENABLED=${DEMO_DATA_ENABLED}
      SYNDESIS_REGISTRY=${SYNDESIS_REGISTRY}
      CONTROLLERS_INTEGRATION_ENABLED=${CONTROLLERS_INTEGRATION_ENABLED}
      IMAGE_STREAM_NAMESPACE=${IMAGE_STREAM_NAMESPACE}
      OAUTH_COOKIE_SECRET=${OAUTH_COOKIE_SECRET}
      SYNDESIS_ENCRYPT_KEY=${SYNDESIS_ENCRYPT_KEY}
      PROMETHEUS_MEMORY_LIMIT=${PROMETHEUS_MEMORY_LIMIT}
      PROMETHEUS_VOLUME_CAPACITY=${PROMETHEUS_VOLUME_CAPACITY}
- apiVersion: v1
  kind: Service
  metadata:
    name: syndesis-ui
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-ui
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-ui
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-ui
    name: syndesis-ui
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-ui
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
      type: Rolling
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/type: infrastructure
          syndesis.io/component: syndesis-ui
      spec:
        containers:
        - name: syndesis-ui
          image: ' '

          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: "/"
              port: 8080
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: "/"
              port: 8080
            initialDelaySeconds: 1
          ports:
          - containerPort: 8080
          volumeMounts:
          - mountPath: /usr/share/nginx/html/config
            name: config-volume
          # Set to burstable with a low memory footprint to start (50 Mi)
          resources:
            limits:
              memory: 255Mi
            requests:
              memory: 50Mi
        volumes:
        - configMap:
            name: syndesis-ui-config
          name: config-volume
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - syndesis-ui
        from:
          kind: ImageStreamTag
          name: syndesis-ui:latest
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange

    - type: ConfigChange
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: syndesis-ui-config
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-ui
  data:
    config.json: |
      {
        "apiBase": "https://${ROUTE_HOSTNAME}",
        "apiEndpoint": "/api/v1",
        "title": "Syndesis",
        "consoleUrl": "${OPENSHIFT_CONSOLE_URL}",
        "project": "${OPENSHIFT_PROJECT}",
        "datamapper": {
          "baseMappingServiceUrl": "https://${ROUTE_HOSTNAME}/api/v1/atlas/",
          "baseJavaInspectionServiceUrl": "https://${ROUTE_HOSTNAME}/api/v1/atlas/java/",
          "baseXMLInspectionServiceUrl": "https://${ROUTE_HOSTNAME}/api/v1/atlas/xml/",
          "baseJSONInspectionServiceUrl": "https://${ROUTE_HOSTNAME}/api/v1/atlas/json/",
          "disableMappingPreviewMode": false
        },
        "features" : {
          "logging": false
        },
        "branding": {
          "logoWhiteBg": "assets/images/syndesis-logo-svg-white.svg",
          "logoDarkBg": "assets/images/syndesis-logo-svg-white.svg",
          "iconWhiteBg": "assets/images/glasses_logo_square.png",
          "iconDarkBg": "assets/images/glasses_logo_square.png",
          "appName": "Syndesis",
          "favicon32": "/favicon-32x32.png",
          "favicon16": "/favicon-16x16.png",
          "touchIcon": "/apple-touch-icon.png",
          "productBuild": false
       }
      }

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: syndesis-db-metrics-config
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db-metrics
  data:
    queries.yaml: |
        pg_database:
          query: " SELECT pg_database.datname, pg_database_size(pg_database.datname) as size FROM pg_database"
          metrics:
            - datname:
                usage: "LABEL"
                description: "Name of the database"
            - size:
                usage: "GAUGE"
                description: "Disk space used by the database"

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: syndesis-db-metrics
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db-metrics
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-db-metrics
    strategy:
      type: Recreate
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/type: infrastructure
          syndesis.io/component: syndesis-db-metrics
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9187"
      spec:
        containers:
        - capabilities: {}
          env:
          - name: DATA_SOURCE_NAME
            value: postgresql://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@syndesis-db:5432/syndesis?sslmode=disable
          - name: PG_EXPORTER_EXTEND_QUERY_PATH
            value: /etc/postgres/exporter/queries.yaml
          image: ' '

          imagePullPolicy: IfNotPresent
          name: syndesis-db-metrics
          livenessProbe:
            failureThreshold: 5
            httpGet:
              port: 9187
              path: /metrics
            initialDelaySeconds: 60
          readinessProbe:
            failureThreshold: 5
            httpGet:
              port: 9187
              path: /metrics
            initialDelaySeconds: 30
          ports:
          - containerPort: 9187
            name: prometheus
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 20Mi
          volumeMounts:
          - mountPath: /etc/postgres/exporter
            name: syndesis-db-metrics-config
        volumes:
        - name: syndesis-db-metrics-config
          configMap:
            name: syndesis-db-metrics-config
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - syndesis-db-metrics
        from:
          kind: ImageStreamTag
          name: postgres_exporter:v0.4.7
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange

    - type: ConfigChange
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
    name: syndesis-sampledb-config
  data:
    add-sample-db.sh: |
      #!/bin/bash
      until bash -c "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"; do
        echo "Waiting for Postgres server..."
        sleep 1
      done
      echo "***** creating sampledb"
      psql <<EOF
        CREATE DATABASE sampledb;
        CREATE USER sampledb WITH PASSWORD '$POSTGRESQL_SAMPLEDB_PASSWORD';
        GRANT ALL PRIVILEGES ON DATABASE sampledb to sampledb;
      EOF
      psql -d sampledb -U sampledb <<'EOF'
        CREATE TABLE IF NOT EXISTS contact (first_name VARCHAR, last_name VARCHAR, company VARCHAR, lead_source VARCHAR, create_date DATE);
        INSERT INTO contact VALUES ('Joe','Jackson','Red Hat','db',current_timestamp);
        CREATE TABLE IF NOT EXISTS todo (id SERIAL PRIMARY KEY, task VARCHAR, completed INTEGER);
        CREATE OR REPLACE FUNCTION add_lead(
          first_and_last_name varchar,
          company varchar,
          phone varchar,
          email varchar,
          lead_source varchar,
          lead_status varchar,
          rating varchar)

          RETURNS void
          LANGUAGE 'plpgsql'

        AS $BODY$
        DECLARE
          task varchar;
        BEGIN
          task := concat(lead_status || ' ', 'Lead: Please contact ', first_and_last_name, ' from ' || company, ' via phone: ' || phone, ' via email: ' || email, '. ', 'Lead is from ' || lead_source, '. Rating: ' || rating, '.');
          insert into todo(task,completed) VALUES (task,0);
        END;
        $BODY$;

        CREATE OR REPLACE FUNCTION create_lead(
          OUT first_name text,
          OUT last_name text,
          OUT company text,
          OUT lead_source text)
          RETURNS SETOF record
          AS
          $$
            SELECT first_name, last_name, company, lead_source
            FROM contact;
          $$
           LANGUAGE 'sql' VOLATILE;
      EOF

      echo "***** sampledb created"

      echo "***** creating grafana database"
      psql <<EOF
        CREATE DATABASE grafana;
        CREATE USER grafana WITH PASSWORD '$POSTGRESQL_GRAFANA_PASSWORD';
        GRANT ALL PRIVILEGES ON DATABASE grafana to grafana;
      EOF
      echo "***** grafana database created"
    postStart.sh: |
      #!/bin/bash
      /var/lib/pgsql/sampledb/add-sample-db.sh &>  /proc/1/fd/1

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
    name: syndesis-db-conf
  data:
    syndesis-postgresql.conf: |
      log_autovacuum_min_duration = 0
      log_line_prefix = '%t %a %i %e %c '
      logging_collector = off
      autovacuum_max_workers = 6
      autovacuum_naptime = 15s
      autovacuum_vacuum_threshold = 25
      autovacuum_vacuum_scale_factor = 0.1
      autovacuum_analyze_threshold = 10
      autovacuum_analyze_scale_factor = 0.05
      autovacuum_vacuum_cost_delay = 10ms
      autovacuum_vacuum_cost_limit = 2000

- apiVersion: v1
  kind: Service
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-db
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${POSTGRESQL_VOLUME_CAPACITY}

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-db
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-db
    strategy:
      type: Recreate
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/component: syndesis-db
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          - name: POSTGRESQL_SAMPLEDB_PASSWORD
            value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
          - name: POSTGRESQL_GRAFANA_PASSWORD
            value: ${POSTGRESQL_GRAFANA_PASSWORD}
          image: ' '
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - /var/lib/pgsql/sampledb/postStart.sh
          livenessProbe:
            initialDelaySeconds: 60
            tcpSocket:
              port: 5432
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
          # DB QoS class is "Guaranteed" (requests == limits)
          # Note: On OSO there is no Guaranteed class, its always burstable
          resources:
            limits:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
            requests:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: syndesis-db-data
          - mountPath: /var/lib/pgsql/sampledb
            name: syndesis-sampledb-config
          - mountPath: /opt/app-root/src/postgresql-cfg/
            name: syndesis-db-conf
        volumes:
        - name: syndesis-db-data
          persistentVolumeClaim:
            claimName: syndesis-db
        - configMap:
            defaultMode: 511
            name: syndesis-sampledb-config
          name: syndesis-sampledb-config
        - configMap:
            name: syndesis-db-conf
          name: syndesis-db-conf
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-meta
    name: syndesis-meta
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-meta
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: syndesis-meta
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-meta
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${META_VOLUME_CAPACITY}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-meta
    name: syndesis-meta
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-meta
    strategy:
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
      type: Recreate
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/type: infrastructure
          syndesis.io/component: syndesis-meta
      spec:
        serviceAccountName: syndesis-server
        containers:
        - name: syndesis-meta
          env:
          - name: JAVA_APP_DIR
            value: /deployments
          - name: LOADER_HOME
            value: /deployments/ext
          - name: JAVA_OPTIONS
            value: "-Djava.net.preferIPv4Stack=true -Duser.home=/tmp"
          image: ' '

          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: /health
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 20
            failureThreshold: 5
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          resources:
            limits:
              memory: ${META_MEMORY_LIMIT}
            requests:
              memory: 280Mi
          # spring-boot automatically picks up application.yml from ./config
          workingDir: /deployments
          volumeMounts:
          - name: config-volume
            mountPath: /deployments/config
          - name: ext-volume
            mountPath: /deployments/ext
        volumes:
        - name: ext-volume
          persistentVolumeClaim:
            claimName: syndesis-meta
        - name: config-volume
          configMap:
            name: syndesis-meta-config
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - syndesis-meta
        from:
          kind: ImageStreamTag
          name: syndesis-meta:latest
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange

    - type: ConfigChange

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-meta
    name: syndesis-meta-config
  data:
    application.yml: |-
      server:
        port: 8080
      # We only want the status, not the full data. Hence security on, sensitive off.
      # See https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-monitoring.html
      # For details
      management:
        port: 8181
        security:
          enabled: true
      endpoints:
        health:
          sensitive: false
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-oauthproxy
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: syndesis-oauthproxy-tls
    name: syndesis-oauthproxy
  spec:
    ports:
    - port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-oauthproxy
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
    annotations:
      console.alpha.openshift.io/overview-app-route: "true"
      haproxy.router.openshift.io/timeout: 60s
    name: syndesis
  spec:
    host: ${ROUTE_HOSTNAME}
    port:
      targetPort: 8443
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: reencrypt
    to:
      kind: Service
      name: syndesis-oauthproxy
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-oauthproxy
    name: syndesis-oauthproxy
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-oauthproxy
    strategy:
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
      type: Recreate
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/type: infrastructure
          syndesis.io/component: syndesis-oauthproxy
      spec:
        containers:
        - name: syndesis-oauthproxy
          image: ' '
          args:
            - --provider=openshift
            - --client-id=system:serviceaccount:${OPENSHIFT_PROJECT}:syndesis-oauth-client
            - --client-secret=${OPENSHIFT_OAUTH_CLIENT_SECRET}
            - --upstream=http://syndesis-server/api/
            - --upstream=http://syndesis-server/mapper/
            - --upstream=http://syndesis-ui/
            - --tls-cert=/etc/tls/private/tls.crt
            - --tls-key=/etc/tls/private/tls.key
            - --cookie-secret=$(OAUTH_COOKIE_SECRET)
            - --pass-access-token
            - --skip-provider-button
            - --skip-auth-regex=/logout
            - --skip-auth-regex=/[^/]+\.(png|jpg|eot|svg|ttf|woff|woff2)
            - --skip-auth-regex=/api/v1/swagger.*
            - --skip-auth-regex=/api/v1/index.html
            - --skip-auth-regex=/api/v1/credentials/callback
            - --skip-auth-regex=/api/v1/version
            - --skip-auth-preflight
            - --openshift-ca=/etc/pki/tls/certs/ca-bundle.crt
            - --openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - --openshift-sar={"namespace":"${SAR_PROJECT}","resource":"pods","verb":"get"}
            # Disabled for now: --pass-user-bearer-token as this requires extra permission which only
            # can be given by a cluster-admin
          env:
          - name: OAUTH_COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                name: syndesis-oauth-proxy-cookie-secret
                key: oauthCookieSecret
          ports:
          - containerPort: 8443
            name: public
            protocol: TCP
          readinessProbe:
            httpGet:
              port: 8443
              path: /oauth/healthz
              scheme: HTTPS
            initialDelaySeconds: 15
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              port: 8443
              path: /oauth/healthz
              scheme: HTTPS
            initialDelaySeconds: 15
            timeoutSeconds: 10
          volumeMounts:
          - mountPath: /etc/tls/private
            name: syndesis-oauthproxy-tls
          resources:
            limits:
              memory: 200Mi
            requests:
              memory: 20Mi
        serviceAccountName: syndesis-oauth-client
        volumes:
        - name: syndesis-oauthproxy-tls
          secret:
            secretName: syndesis-oauthproxy-tls
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - syndesis-oauthproxy
        from:
          kind: ImageStreamTag
          name: oauth-proxy:v1.1.0
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange

    - type: ConfigChange
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-server
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-integration
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
    name: syndesis-server
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-server
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
    name: syndesis-server
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-server
    strategy:
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
      type: Recreate
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/type: infrastructure
          syndesis.io/component: syndesis-server
      spec:
        serviceAccountName: syndesis-server
        containers:
        - name: syndesis-server
          env:
          - name: JAVA_APP_DIR
            value: /deployments
          - name: JAVA_OPTIONS
            value: "-Djava.net.preferIPv4Stack=true -Duser.home=/tmp"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ENDPOINTS_TEST_SUPPORT_ENABLED
            value: ${TEST_SUPPORT_ENABLED}
          - name: CONTROLLERS_INTEGRATION_ENABLED
            value: ${CONTROLLERS_INTEGRATION_ENABLED}
          - name: POSTGRESQL_SAMPLEDB_PASSWORD
            value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
          - name: CLIENT_STATE_AUTHENTICATION_ALGORITHM
            value: "HmacSHA1"
          - name: CLIENT_STATE_AUTHENTICATION_KEY
            valueFrom:
              secretKeyRef:
                name: syndesis-server-secret
                key: clientStateAuthenticationKey
          - name: CLIENT_STATE_ENCRYPTION_ALGORITHM
            value: "AES/CBC/PKCS5Padding"
          - name: CLIENT_STATE_ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: syndesis-server-secret
                key: clientStateEncryptionKey
          - name: CLIENT_STATE_TID
            value: "1"
          - name: INTEGRATION_STATE_CHECK_INTERVAL
            value: ${INTEGRATION_STATE_CHECK_INTERVAL}
          - name: CONTROLLERS_EXPOSE_VIA3SCALE
            value: ${CONTROLLERS_EXPOSE_VIA3SCALE}
          image: ' '

          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              port: 8080
              path: /api/v1/version
              httpHeaders:
              - name: Accept
                value: 'text/plain'
            initialDelaySeconds: 300
            periodSeconds: 20
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/health"
              port: 8181
            initialDelaySeconds: 10
          ports:
          - containerPort: 8080
            name: http
          - containerPort: 9779
            name: prometheus
          - containerPort: 8778
            name: jolokia
          workingDir: /deployments
          volumeMounts:
          - name: config-volume
            mountPath: /deployments/config
          # Set QoS class to "Guaranteed" (limits == requests)
          # This doesn't work on OSO as there is a fixed ratio
          # from limit to resource (80% currently). 'requests' is ignored there
          resources:
            limits:
              memory: ${SERVER_MEMORY_LIMIT}
              cpu: 750m
            requests:
              memory: 256Mi
              cpu: 450m
        volumes:
        - name: config-volume
          configMap:
            name: syndesis-server-config
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - syndesis-server
        from:
          kind: ImageStreamTag
          name: syndesis-server:latest
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange

    - type: ConfigChange

- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      io.syndesis/upgrade-mode: keep
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-server
    name: syndesis-server-config
  data:
    application.yml: |-
      deployment:
        load-demo-data: ${DEMO_DATA_ENABLED}
      cors:
        allowedOrigins: https://${ROUTE_HOSTNAME}

      cache:
        cluster:
          name: SyndesisCluster
        max:
          entries: 100
      encrypt:
        key: ${SYNDESIS_ENCRYPT_KEY}
      spring:
        zipkin:
          enabled: false
        datasource:
          url: jdbc:postgresql://syndesis-db:5432/syndesis?sslmode=disable
          username: ${POSTGRESQL_USER}
          password: ${POSTGRESQL_PASSWORD}
          driver-class-name: org.postgresql.Driver
      security:
        basic:
          enabled: false
      management:
        port: 8181
        security:
          enabled: true
      endpoints:
        health:
          sensitive: false
        jsondb:
          enabled: true
      monitoring:
        kind: default
      features:
        monitoring:
          enabled: true
      openshift:
        apiBaseUrl: ${OPENSHIFT_MASTER}/oapi/v1
        namespace: ${NAMESPACE}
        imageStreamNamespace: ${IMAGE_STREAM_NAMESPACE}
        builderImageStreamTag: syndesis-s2i:latest
        deploymentMemoryRequestMi: 200
        deploymentMemoryLimitMi: 512
        mavenOptions: "-XX:+UseG1GC -XX:+UseStringDeduplication -Xmx310m"
      dao:
        kind: jsondb
      controllers:
        maxIntegrationsPerUser: ${MAX_INTEGRATIONS_PER_USER}
        maxDeploymentsPerUser: ${MAX_INTEGRATIONS_PER_USER}
        integrationStateCheckInterval: ${INTEGRATION_STATE_CHECK_INTERVAL}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: todo
      syndesis.io/component: todo
    name: todo
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: syndesis
      syndesis.io/app: todo
      syndesis.io/component: todo

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: todo
      syndesis.io/component: todo
    name: todo
  spec:
    host: todo-${ROUTE_HOSTNAME}
    path: /
    port:
      targetPort: 8080
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: todo
      weight: 100

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: todo
    name: todo
  spec:
    lookupPolicy:
      local: false
  status:
    tags:
      - items:
        tag: latest

- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: todo
    name: todo
  spec:
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        uri: 'https://github.com/syndesisio/todo-example.git'
      type: Git
    output:
      to:
        kind: ImageStreamTag
        name: 'todo:latest'
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: 'php:7.0'
          namespace: openshift
      type: Source
    triggers:
      - type: ConfigChange
      - imageChange:
        type: ImageChange

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: todo
    name: todo
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: todo
      syndesis.io/component: todo
    strategy:
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/container.todo.image.entrypoint: '["container-entrypoint","/bin/sh","-c","$STI_SCRIPTS_PATH/usage"]'
        creationTimestamp: null
        labels:
          app: syndesis
          syndesis.io/app: todo
          syndesis.io/component: todo
      spec:
        containers:
          - env:
              - name: TODO_DB_SERVER
                value: syndesis-db
              - name: TODO_DB_NAME
                value: sampledb
              - name: TODO_DB_USER
                value: sampledb
              - name: TODO_DB_PASS
                value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
            imagePullPolicy: Always
            name: todo
            image: ' '
            resources:
              limits:
                memory: 256Mi
              requests:
                memory: 256Mi
            ports:
              - containerPort: 8080
                name: http
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
            - todo
          from:
            kind: ImageStreamTag
            name: todo:latest
        type: ImageChange
- apiVersion: authorization.openshift.io/v1
  kind: RoleBinding
  metadata:
    name: syndesis:editors
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: syndesis-server
- apiVersion: authorization.openshift.io/v1
  kind: RoleBinding
  metadata:
    name: syndesis:viewers
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: syndesis-prometheus
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-prometheus
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus
    name: syndesis-prometheus-config
  data:
    prometheus.yml: |-
      global:
        scrape_interval:     5s
        evaluation_interval: 5s

      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
              - localhost:9090

          metric_relabel_configs:
          - source_labels: [__name__]
            regex: go_(.+)
            action: drop
          - source_labels: [__name__]
            regex: http_(.+)
            action: drop
          - source_labels: [__name__]
            regex: net_(.+)
            action: drop
          - source_labels: [__name__]
            regex: process_(.+)
            action: drop
          - source_labels: [__name__]
            regex: prometheus_(.+)
            action: drop
          - source_labels: [__name__]
            regex: tsdb_(.+)
            action: drop

        - job_name: syndesis-db
          kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ${OPENSHIFT_PROJECT}

          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - source_labels: [__meta_kubernetes_pod_label_syndesis_io_component]
            action: keep
            regex: syndesis-db
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)

          metric_relabel_configs:
          - source_labels: [__name__]
            regex: go_(.+)
            action: drop
          - source_labels: [datname]
            regex: (postgres|grafana|template.*)
            action: drop

        - job_name: integration-pods

          kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ${OPENSHIFT_PROJECT}

          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_label_syndesis_io_type]
            action: keep
            regex: integration
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_(syndesis.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          metric_relabel_configs:
          - source_labels: [__name__]
            regex: jmx_(.+)
            action: drop
          - source_labels: [__name__]
            regex: jvm_(.+)
            action: drop
          - source_labels: [__name__]
            regex: process_(.+)
            action: drop
          - source_labels: [type, __name__]
            separator: ':'
            regex: context:(org_apache_camel_ExchangesTotal|org_apache_camel_ExchangesFailed|io_syndesis_camel_StartTimestamp|io_syndesis_camel_LastExchangeCompletedTimestamp|io_syndesis_camel_LastExchangeFailureTimestamp)
            action: keep

- apiVersion: v1
  kind: Service
  metadata:
    name: syndesis-prometheus
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus
  spec:
    ports:
    - name: prometheus
      port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-prometheus
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: syndesis-prometheus
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${PROMETHEUS_VOLUME_CAPACITY}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: syndesis-prometheus
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-prometheus
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-prometheus
    strategy:
      type: Recreate
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/type: infrastructure
          syndesis.io/component: syndesis-prometheus
      spec:
        serviceAccountName: syndesis-prometheus
        containers:
        - name: prometheus
          image: ' '

          imagePullPolicy: IfNotPresent
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.retention=30d'
          livenessProbe:
            httpGet:
              port: 9090
            initialDelaySeconds: 60
          ports:
          - containerPort: 9090
          readinessProbe:
            httpGet:
              port: 9090
            initialDelaySeconds: 30
          # DB QoS class is "Guaranteed" (requests == limits)
          # Note: On OSO there is no Guaranteed class, its always burstable
          resources:
            limits:
              memory: ${PROMETHEUS_MEMORY_LIMIT}
            requests:
              memory: ${PROMETHEUS_MEMORY_LIMIT}
          volumeMounts:
          - name: syndesis-prometheus-data
            mountPath: /prometheus
          - name: syndesis-prometheus-config
            mountPath: /etc/prometheus
        volumes:
        - name: syndesis-prometheus-data
          persistentVolumeClaim:
            claimName: syndesis-prometheus
        - name: syndesis-prometheus-config
          configMap:
            name: syndesis-prometheus-config
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - prometheus
        from:
          kind: ImageStreamTag
          name: prometheus:v2.1.0
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange

    - type: ConfigChange
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: syndesis-grafana-datasource-config
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-grafana
  data:
    prometheus.yml: |
      apiVersion: 1
      datasources:
      - name: prometheus
        type: prometheus
        access: proxy
        orgId: 1
        url: http://syndesis-prometheus
        version: 1
        isDefault: true
        editable: false
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: grafana-config
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-grafana
  data:
    grafana.ini: |-
      ##################### Grafana Configuration Defaults #####################
      #
      # Do not modify this file in grafana installs
      #
      # possible values : production, development
      app_mode = production
      # instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
      instance_name = ${HOSTNAME}
      #################################### Paths ###############################
      [paths]
      # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
      #
      data = data
      #
      # Directory where grafana can store logs
      #
      logs = data/log
      #
      # Directory where grafana will automatically scan and look for plugins
      #
      plugins = data/plugins
      #################################### Server ##############################
      [server]
      # Protocol (http, https, socket)
      protocol = http
      # The ip address to bind to, empty will bind to all interfaces
      http_addr =
      # The http port  to use
      http_port = 3000
      # The public facing domain name used to access grafana from a browser
      domain = localhost
      # Redirect to correct domain if host header does not match domain
      # Prevents DNS rebinding attacks
      enforce_domain = false
      # The full public facing url
      root_url = %(protocol)s://%(domain)s:%(http_port)s/
      # Log web requests
      router_logging = false
      # the path relative working path
      static_root_path = public
      # enable gzip
      enable_gzip = false
      # https certs & key file
      cert_file = /etc/tls/private/tls.crt
      cert_key = /etc/tls/private/tls.key
      # Unix socket path
      socket = /tmp/grafana.sock
      #################################### Database ############################
      [database]
      # You can configure the database connection by specifying type, host, name, user and password
      # as separate properties or as on string using the url property.
      # Either "mysql", "postgres" or "sqlite3", it's your choice
      type = postgres
      host = syndesis-db:5432
      name = grafana
      user = grafana
      # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
      password = ${POSTGRESQL_GRAFANA_PASSWORD}
      # Use either URL or the previous fields to configure the database
      # Max idle conn setting default is 2
      max_idle_conn = 2
      # Max conn setting default is 0 (mean not set)
      max_open_conn =
      # For "postgres", use either "disable", "require" or "verify-full"
      # For "mysql", use either "true", "false", or "skip-verify".
      ssl_mode = disable
      ca_cert_path =
      client_key_path =
      client_cert_path =
      server_cert_name =
      # For "sqlite3" only, path relative to data_path setting
      # path = grafana.db
      #################################### Session #############################
      [session]
      # Either "memory", "file", "redis", "mysql", "postgres", "memcache", default is "file"
      provider = file
      # Provider config options
      # memory: not have any config yet
      # file: session dir path, is relative to grafana data_path
      # redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
      # postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable
      # mysql: go-sql-driver/mysql dsn config string, examples:
      #         `user:password@tcp(127.0.0.1:3306)/database_name`
      #         `user:password@unix(/var/run/mysqld/mysqld.sock)/database_name`
      # memcache: 127.0.0.1:11211
      provider_config = sessions
      # Session cookie name
      cookie_name = grafana_sess
      # If you use session in https only, default is false
      cookie_secure = false
      # Session life time, default is 86400
      session_life_time = 86400
      gc_interval_time = 86400
      #################################### Data proxy ###########################
      [dataproxy]
      # This enables data proxy logging, default is false
      logging = false
      #################################### Analytics ###########################
      [analytics]
      # Server reporting, sends usage counters to stats.grafana.org every 24 hours.
      # No ip addresses are being tracked, only simple counters to track
      # running instances, dashboard and error counts. It is very helpful to us.
      # Change this option to false to disable reporting.
      reporting_enabled = false
      # Set to false to disable all checks to https://grafana.com
      # for new versions (grafana itself and plugins), check is used
      # in some UI views to notify that grafana or plugin update exists
      # This option does not cause any auto updates, nor send any information
      # only a GET request to https://grafana.com to get latest versions
      check_for_updates = false
      # Google Analytics universal tracking code, only enabled if you specify an id here
      # google_analytics_ua_id =
      # Google Tag Manager ID, only enabled if you specify an id here
      # google_tag_manager_id =
      #################################### Security ############################
      [security]
      # default admin user, created on startup
      admin_user = admin
      # default admin password, can be changed before first start of grafana,  or in profile settings
      admin_password = admin
      # used for signing
      secret_key = SW2YcwTIb9zpOOhoPsMm
      # Auto-login remember days
      login_remember_days = 7
      cookie_username = grafana_user
      cookie_remember_name = grafana_remember
      # disable gravatar profile images
      disable_gravatar = false
      # data source proxy whitelist (ip_or_domain:port separated by spaces)
      data_source_proxy_whitelist =
      [snapshots]
      # snapshot sharing options
      external_enabled = true
      external_snapshot_url = https://snapshots-origin.raintank.io
      external_snapshot_name = Publish to snapshot.raintank.io
      # remove expired snapshot
      snapshot_remove_expired = true
      # remove snapshots after 90 days
      snapshot_TTL_days = 90
      #################################### Users ####################################
      [users]
      # disable user signup / registration
      allow_sign_up = true
      # Allow non admin users to create organizations
      allow_org_create = true
      # Set to true to automatically assign new users to the default organization (id 1)
      auto_assign_org = true
      # Default role new users will be automatically assigned (if auto_assign_org above is set to true)
      auto_assign_org_role = Admin
      # Require email validation before sign up completes
      verify_email_enabled = false
      # Background text for the user field on the login page
      login_hint = email or username
      # Default UI theme ("dark" or "light")
      default_theme = dark
      # External user management
      external_manage_link_url =
      external_manage_link_name =
      external_manage_info =
      [auth]
      # Set to true to disable (hide) the login form, useful if you use OAuth
      disable_login_form = true
      # Set to true to disable the signout link in the side menu. useful if you use auth.proxy
      disable_signout_menu = true
      #################################### Anonymous Auth ######################
      [auth.anonymous]
      # enable anonymous access
      enabled = true
      # specify organization name that should be used for unauthenticated users
      org_name = Main Org.
      # specify role for unauthenticated users
      org_role = Admin
      #################################### SMTP / Emailing #####################
      [smtp]
      enabled = false
      host = localhost:25
      user =
      # If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""
      password =
      cert_file =
      key_file =
      skip_verify = false
      from_address = admin@grafana.localhost
      from_name = Grafana
      ehlo_identity =
      [emails]
      welcome_email_on_sign_up = false
      templates_pattern = emails/*.html
      #################################### Logging ##########################
      [log]
      # Either "console", "file", "syslog". Default is console and  file
      # Use space to separate multiple modes, e.g. "console file"
      mode = console file
      # Either "debug", "info", "warn", "error", "critical", default is "info"
      level = error
      # optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
      filters =
      # For "console" mode only
      [log.console]
      level =
      # log line format, valid options are text, console and json
      format = console
      # For "file" mode only
      [log.file]
      level =
      # log line format, valid options are text, console and json
      format = text
      # This enables automated log rotate(switch of following options), default is true
      log_rotate = true
      # Max line number of single file, default is 1000000
      max_lines = 1000000
      # Max size shift of single file, default is 28 means 1 << 28, 256MB
      max_size_shift = 28
      # Segment log daily, default is true
      daily_rotate = true
      # Expired days of log file(delete after max days), default is 7
      max_days = 7
      [log.syslog]
      level =
      # log line format, valid options are text, console and json
      format = text
      # Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
      network =
      address =
      # Syslog facility. user, daemon and local0 through local7 are valid.
      facility =
      # Syslog tag. By default, the process' argv[0] is used.
      tag =
      #################################### Usage Quotas ########################
      [quota]
      enabled = false
      #### set quotas to -1 to make unlimited. ####
      # limit number of users per Org.
      org_user = 10
      # limit number of dashboards per Org.
      org_dashboard = 100
      # limit number of data_sources per Org.
      org_data_source = 10
      # limit number of api_keys per Org.
      org_api_key = 10
      # limit number of orgs a user can create.
      user_org = 10
      # Global limit of users.
      global_user = -1
      # global limit of orgs.
      global_org = -1
      # global limit of dashboards
      global_dashboard = -1
      # global limit of api_keys
      global_api_key = -1
      # global limit on number of logged in users.
      global_session = -1
      #################################### Alerting ############################
      [alerting]
      # Disable alerting engine & UI features
      enabled = true
      # Makes it possible to turn off alert rule execution but alerting UI is visible
      execute_alerts = true
      #################################### Internal Grafana Metrics ############
      # Metrics available at HTTP API Url /api/metrics
      [metrics]
      enabled           = true
      interval_seconds  = 10
      # Send internal Grafana metrics to graphite
      [metrics.graphite]
      # Enable by setting the address setting (ex localhost:2003)
      address =
      prefix = prod.grafana.%(instance_name)s.
      [grafana_net]
      url = https://grafana.com
      [grafana_com]
      url = https://grafana.com
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: syndesis-grafana-dashboard-config
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-grafana
  data:
    dashboard-config.yml: |
        apiVersion: 1
        providers:
        - name: 'syndesis'
          orgId: 1
          folder: ''
          type: file
          updateIntervalSeconds: 30
          disableDeletion: true
          editable: true
          options:
            path: /etc/grafana/provisioning/dashboards
    infrastructure-dashbard-syndesis-db.json: |
      {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "description": "Performance metrics for Syndesis DB Postgres instance",
        "editable": true,
        "gnetId": 455,
        "graphTooltip": 0,
        "id": 4,
        "iteration": 1547821676800,
        "links": [],
        "panels": [
          {
            "cacheTimeout": null,
            "colorBackground": false,
            "colorValue": false,
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "datasource": "prometheus",
            "decimals": 0,
            "editable": true,
            "error": false,
            "format": "none",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 4,
              "w": 24,
              "x": 0,
              "y": 0
            },
            "height": "55px",
            "id": 11,
            "interval": null,
            "isNew": true,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "rgba(31, 118, 189, 0.18)",
              "full": true,
              "lineColor": "rgb(31, 120, 193)",
              "show": true
            },
            "tableColumn": "",
            "targets": [
              {
                "dsType": "prometheus",
                "expr": "sum(irate(pg_stat_database_xact_commit{datname=~\"$db\"}[5m])) + sum(irate(pg_stat_database_xact_rollback{datname=~\"$db\"}[5m]))",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "measurement": "postgresql",
                "policy": "default",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "xact_commit"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [
                        "10s"
                      ],
                      "type": "non_negative_derivative"
                    }
                  ]
                ],
                "step": 1800,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              }
            ],
            "thresholds": "",
            "title": "Database (${db}) :: Queries per second",
            "transparent": true,
            "type": "singlestat",
            "valueFontSize": "80%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "current"
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "prometheus",
            "fill": 1,
            "gridPos": {
              "h": 7,
              "w": 12,
              "x": 0,
              "y": 4
            },
            "id": 15,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "links": [],
            "nullPointMode": "null",
            "percentage": false,
            "pointradius": 5,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "sum(pg_database_size{datname=~\"$db\"})",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{$db}} database size",
                "refId": "A"
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Database (${db}) ::  Size",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "decbytes",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "prometheus",
            "editable": true,
            "error": false,
            "fill": 1,
            "grid": {},
            "gridPos": {
              "h": 7,
              "w": 12,
              "x": 12,
              "y": 4
            },
            "id": 3,
            "isNew": true,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 2,
            "links": [],
            "nullPointMode": "connected",
            "percentage": false,
            "pointradius": 5,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "alias": "conflicts",
                "dsType": "prometheus",
                "expr": "sum(rate(pg_stat_database_deadlocks{datname=~\"$db\"}[5m]))",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "Deadlocks",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "conflicts"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [],
                      "type": "difference"
                    }
                  ]
                ],
                "step": 240,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              },
              {
                "alias": "deadlocks",
                "dsType": "prometheus",
                "expr": "sum(rate(pg_stat_database_conflicts{datname=~\"$db\"}[5m]))",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "Conflicts",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "B",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "deadlocks"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [],
                      "type": "difference"
                    }
                  ]
                ],
                "step": 240,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Database (${db}) :: Conflicts / Deadlocks",
            "tooltip": {
              "msResolution": false,
              "shared": true,
              "sort": 0,
              "value_type": "cumulative"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": 0,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "prometheus",
            "editable": true,
            "error": false,
            "fill": 1,
            "grid": {},
            "gridPos": {
              "h": 7,
              "w": 12,
              "x": 0,
              "y": 11
            },
            "id": 1,
            "isNew": true,
            "legend": {
              "alignAsTable": true,
              "avg": true,
              "current": false,
              "max": true,
              "min": true,
              "rightSide": true,
              "show": true,
              "total": false,
              "values": true
            },
            "lines": true,
            "linewidth": 1,
            "links": [],
            "nullPointMode": "connected",
            "percentage": false,
            "pointradius": 5,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "alias": "fetched",
                "dsType": "prometheus",
                "expr": "sum(irate(pg_stat_database_tup_fetched{datname=~\"$db\"}[5m]))",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "Fetched",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "tup_fetched"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [
                        "10s"
                      ],
                      "type": "non_negative_derivative"
                    }
                  ]
                ],
                "step": 120,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              },
              {
                "alias": "fetched",
                "dsType": "prometheus",
                "expr": "sum(irate(pg_stat_database_tup_returned{datname=~\"$db\"}[5m]))",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "Returned",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "B",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "tup_fetched"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [
                        "10s"
                      ],
                      "type": "non_negative_derivative"
                    }
                  ]
                ],
                "step": 120,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              },
              {
                "alias": "fetched",
                "dsType": "prometheus",
                "expr": "sum(irate(pg_stat_database_tup_inserted{datname=~\"$db\"}[5m]))",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "Inserted",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "C",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "tup_fetched"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [
                        "10s"
                      ],
                      "type": "non_negative_derivative"
                    }
                  ]
                ],
                "step": 120,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              },
              {
                "alias": "fetched",
                "dsType": "prometheus",
                "expr": "sum(irate(pg_stat_database_tup_updated{datname=~\"$db\"}[5m]))",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "Updated",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "D",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "tup_fetched"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [
                        "10s"
                      ],
                      "type": "non_negative_derivative"
                    }
                  ]
                ],
                "step": 120,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              },
              {
                "alias": "fetched",
                "dsType": "prometheus",
                "expr": "sum(irate(pg_stat_database_tup_deleted{datname=~\"$db\"}[5m]))",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "Deleted",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "E",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "tup_fetched"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [
                        "10s"
                      ],
                      "type": "non_negative_derivative"
                    }
                  ]
                ],
                "step": 120,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Database (${db}) :: Rows fetched / inserted / updated  deleted",
            "tooltip": {
              "msResolution": true,
              "shared": true,
              "sort": 0,
              "value_type": "cumulative"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "prometheus",
            "editable": true,
            "error": false,
            "fill": 1,
            "grid": {},
            "gridPos": {
              "h": 7,
              "w": 12,
              "x": 12,
              "y": 11
            },
            "id": 13,
            "isNew": true,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 2,
            "links": [],
            "nullPointMode": "connected",
            "percentage": false,
            "pointradius": 5,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "pg_stat_database_numbackends{datname=~\"$db\"}",
                "format": "time_series",
                "hide": false,
                "intervalFactor": 2,
                "legendFormat": "{{datname}} active connections",
                "refId": "A",
                "step": 240
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Database (${db}) :: Active connections",
            "tooltip": {
              "msResolution": false,
              "shared": true,
              "sort": 0,
              "value_type": "cumulative"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "prometheus",
            "decimals": 1,
            "editable": true,
            "error": false,
            "fill": 1,
            "grid": {},
            "gridPos": {
              "h": 7,
              "w": 12,
              "x": 0,
              "y": 18
            },
            "id": 2,
            "isNew": true,
            "legend": {
              "alignAsTable": true,
              "avg": true,
              "current": false,
              "hideZero": true,
              "max": true,
              "min": true,
              "rightSide": false,
              "show": true,
              "total": false,
              "values": true
            },
            "lines": true,
            "linewidth": 1,
            "links": [],
            "nullPointMode": "connected",
            "percentage": false,
            "pointradius": 5,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "alias": "Buffers Allocated",
                "dsType": "prometheus",
                "expr": "irate(pg_stat_bgwriter_buffers_alloc[5m])",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "buffers_alloc",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "buffers_alloc"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [],
                      "type": "difference"
                    }
                  ]
                ],
                "step": 240,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              },
              {
                "alias": "Buffers Allocated",
                "dsType": "prometheus",
                "expr": "irate(pg_stat_bgwriter_buffers_backend_fsync[5m])",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "buffers_backend_fsync",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "B",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "buffers_alloc"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [],
                      "type": "difference"
                    }
                  ]
                ],
                "step": 240,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              },
              {
                "alias": "Buffers Allocated",
                "dsType": "prometheus",
                "expr": "irate(pg_stat_bgwriter_buffers_backend[5m])",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "buffers_backend",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "C",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "buffers_alloc"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [],
                      "type": "difference"
                    }
                  ]
                ],
                "step": 240,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              },
              {
                "alias": "Buffers Allocated",
                "dsType": "prometheus",
                "expr": "irate(pg_stat_bgwriter_buffers_clean[5m])",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "buffers_clean",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "D",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "buffers_alloc"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [],
                      "type": "difference"
                    }
                  ]
                ],
                "step": 240,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              },
              {
                "alias": "Buffers Allocated",
                "dsType": "prometheus",
                "expr": "irate(pg_stat_bgwriter_buffers_checkpoint[5m])",
                "format": "time_series",
                "groupBy": [
                  {
                    "params": [
                      "$interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "null"
                    ],
                    "type": "fill"
                  }
                ],
                "intervalFactor": 2,
                "legendFormat": "buffers_checkpoint",
                "measurement": "postgresql",
                "policy": "default",
                "refId": "E",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "buffers_alloc"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    },
                    {
                      "params": [],
                      "type": "difference"
                    }
                  ]
                ],
                "step": 240,
                "tags": [
                  {
                    "key": "host",
                    "operator": "=~",
                    "value": "/^$host$/"
                  }
                ]
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Database (${db}) :: Buffers",
            "tooltip": {
              "msResolution": false,
              "shared": true,
              "sort": 0,
              "value_type": "cumulative"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": 0,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "prometheus",
            "editable": true,
            "error": false,
            "fill": 1,
            "grid": {},
            "gridPos": {
              "h": 7,
              "w": 12,
              "x": 12,
              "y": 18
            },
            "id": 12,
            "isNew": true,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 2,
            "links": [],
            "nullPointMode": "connected",
            "percentage": true,
            "pointradius": 1,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "round(100*sum(pg_stat_database_blks_hit{datname=~\"$db\"}) / (sum(pg_stat_database_blks_hit{datname=~\"$db\"}) + sum(pg_stat_database_blks_read{datname=~\"$db\"})),0.1)",
                "format": "time_series",
                "intervalFactor": 2,
                "legendFormat": "Cache hit rate",
                "refId": "A",
                "step": 240
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Database (${db}) :: Cache hit ratio",
            "tooltip": {
              "msResolution": false,
              "shared": true,
              "sort": 0,
              "value_type": "cumulative"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "decimals": null,
                "format": "percent",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "prometheus",
            "fill": 1,
            "gridPos": {
              "h": 9,
              "w": 12,
              "x": 0,
              "y": 25
            },
            "id": 17,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "links": [],
            "nullPointMode": "null",
            "percentage": false,
            "pointradius": 5,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "pg_locks_count{datname=~\"$db\", mode=\"accessexclusivelock\"} != 0",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{$db}} Access exclusive locks",
                "refId": "A"
              },
              {
                "expr": "pg_locks_count{datname=~\"$db\", mode=\"accesssharelock\"} != 0",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{$db}} Access shared locks",
                "refId": "B"
              },
              {
                "expr": "pg_locks_count{datname=~\"$db\", mode=\"exclusivelock\"} != 0",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{$db}} Exclusive locks",
                "refId": "C"
              },
              {
                "expr": "pg_locks_count{datname=~\"$db\", mode=\"rowexclusivelock\"} != 0",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{$db}}  Row exclusive locks",
                "refId": "D"
              },
              {
                "expr": "pg_locks_count{datname=~\"$db\", mode=\"rowsharelock\"} != 0",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{$db}}  Row shared locks",
                "refId": "E"
              },
              {
                "expr": "pg_locks_count{datname=~\"$db\", mode=\"sharelock\"} != 0",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{$db}} Shared locks",
                "refId": "F"
              },
              {
                "expr": "pg_locks_count{datname=~\"$db\", mode=\"sharerowexclusivelock\"} != 0",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{$db}} Shared row exclusive locks",
                "refId": "G"
              },
              {
                "expr": "pg_locks_count{datname=~\"$db\", mode=\"shareupdateexclusivelock\"} != 0",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{$db}} Shared update exclusive locks",
                "refId": "H"
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Database (${db}) :: Locks",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "prometheus",
            "fill": 1,
            "gridPos": {
              "h": 9,
              "w": 12,
              "x": 12,
              "y": 25
            },
            "id": 18,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "links": [],
            "nullPointMode": "null",
            "percentage": false,
            "pointradius": 5,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "sum(rate(pg_stat_database_xact_commit{datname=~\"$db\"}[1m]))",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "Transactions committed",
                "refId": "A"
              },
              {
                "expr": "sum(rate(pg_stat_database_xact_rollback{datname=~\"$db\"}[1m]))",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "Transactions rolled back",
                "refId": "B"
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Database (${db}) :: Tranactions",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "none",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          }
        ],
        "refresh": false,
        "schemaVersion": 16,
        "style": "dark",
        "tags": [
          "syndesis-infrastructure"
        ],
        "templating": {
          "list": [
            {
              "allValue": ".*",
              "current": {
                "tags": [],
                "text": "syndesis",
                "value": "syndesis"
              },
              "datasource": "prometheus",
              "definition": "label_values(pg_stat_database_tup_fetched{datname!~\"template.*|postgres\"},datname)",
              "hide": 0,
              "includeAll": true,
              "label": "Database",
              "multi": false,
              "name": "db",
              "options": [],
              "query": "label_values(pg_stat_database_tup_fetched{datname!~\"template.*|postgres\"},datname)",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            }
          ]
        },
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timepicker": {
          "refresh_intervals": [
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h",
            "2h",
            "1d"
          ],
          "time_options": [
            "5m",
            "15m",
            "1h",
            "6h",
            "12h",
            "24h",
            "2d",
            "7d",
            "30d"
          ]
        },
        "timezone": "browser",
        "title": "Syndesis DB Performance Metrics",
        "uid": "wGgaPlciz",
        "version": 11
      }


- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-grafana
    name: syndesis-grafana
  spec:
    ports:
    - name: grafana
      port: 80
      protocol: TCP
      targetPort: 3000
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-grafana
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    name: syndesis-grafana
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-grafana
  spec:
    to:
      name: syndesis-grafana
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: syndesis-grafana
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
      syndesis.io/component: syndesis-grafana
  spec:
    replicas: 1
    selector:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-grafana
    strategy:
      type: Recreate
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
    template:
      metadata:
        labels:
          app: syndesis
          syndesis.io/app: syndesis
          syndesis.io/type: infrastructure
          syndesis.io/component: syndesis-grafana
      spec:
        containers:
        - name: grafana
          image: ' '

          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              port: 3000
            initialDelaySeconds: 180
          readinessProbe:
            failureThreshold: 3
            httpGet:
              port: 3000
            initialDelaySeconds: 10
          resources:
            limits:
              memory: ${GRAFANA_MEMORY_LIMIT}
            requests:
              memory: ${GRAFANA_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /etc/grafana
            name: syndesis-grafana-etc
          - mountPath: /etc/grafana/provisioning/datasources
            name: syndesis-grafana-datasource
          - mountPath: /etc/grafana/provisioning/dashboards
            name: syndesis-grafana-dashboard
        restartPolicy: Always
        volumes:
        - name: syndesis-grafana-etc
          configMap:
            name: grafana-config
        - name: syndesis-grafana-datasource
          configMap:
            name: syndesis-grafana-datasource-config
        - name: syndesis-grafana-dashboard
          configMap:
            name: syndesis-grafana-dashboard-config
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - grafana
        from:
          kind: ImageStreamTag
          name: grafana:5.4.2
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange

    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: syndesis-upgrade
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${UPGRADE_VOLUME_CAPACITY}
- apiVersion: template.openshift.io/v1
  kind: Template
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: infrastructure
    name: syndesis-upgrade
    annotations:
      openshift.io/display-name: "Syndesis Upgrade"
      description: |-
        This is the upgrade application for Syndesis.
      openshift.io/long-description: |-
        When this template is applied then an upgrade to a new Syndesis version is performed.
        Only the infrastructure components are updated, no running integration is touched.
        Before doing the upgrade a backup is performed and restored in case of a rollback.
      tags: "syndesis,upgrade"
      iconClass: icon-rh-integration
      openshift.io/provider-display-name: "Red Hat, Inc."
      openshift.io/documentation-url: "https://syndesis.io"
      openshift.io/support-url: "https://access.redhat.com"
  parameters:
  - name: UPGRADE_REGISTRY
    description: 'Registry from where to pick up the upgrade pod'
    value: docker.io
    required: true
  message: |-
    Syndesis upgrade process started
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: syndesis-upgrade
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${UPGRADE_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: Pod
    metadata:
      name: syndesis-upgrade-latest
    spec:
      serviceAccountName: syndesis-operator
      containers:
      - name: upgrade
        image: ${UPGRADE_REGISTRY}/syndesis/syndesis-upgrade:latest
        env:
          - name: SYNDESIS_UPGRADE_PROJECT
            valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
        imagePullPolicy: IfNotPresent
        args:
          - "--backup"
          - "/opt/backup"
        volumeMounts:
        - mountPath: /opt/backup
          name: backup-dir
      volumes:
      - name: backup-dir
        persistentVolumeClaim:
          claimName: syndesis-upgrade
      restartPolicy: Never
