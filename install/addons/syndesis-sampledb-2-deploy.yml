apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: syndesis-db
  labels:
    app: syndesis
    syndesis.io/app: syndesis
    syndesis.io/type: infrastructure
    syndesis.io/component: syndesis-db
    syndesis.io/addon: db-sampledb
spec:
  replicas: 1
  selector:
    app: syndesis
    syndesis.io/app: syndesis
    syndesis.io/component: syndesis-db
  strategy:
    type: Recreate
    resources:
      limits:
        memory: "256Mi"
      requests:
        memory: "20Mi"
  template:
    metadata:
      labels:
        app: syndesis
        syndesis.io/app: syndesis
        syndesis.io/component: syndesis-db
    spec:
      serviceAccountName: syndesis-default
      containers:
      - capabilities: {}
        env:
        - name: POSTGRESQL_USER
          value: ${POSTGRESQL_USER}
        - name: POSTGRESQL_PASSWORD
          value: ${POSTGRESQL_PASSWORD}
        - name: POSTGRESQL_DATABASE
          value: ${POSTGRESQL_DATABASE}
        - name: POSTGRESQL_SAMPLEDB_PASSWORD
          value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
        image: ' '
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - /var/lib/pgsql/sampledb/postStart.sh
        livenessProbe:
          initialDelaySeconds: 60
          tcpSocket:
            port: 5432
        name: postgresql
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
          initialDelaySeconds: 5
        # DB QoS class is "Guaranteed" (requests == limits)
        # Note: On OSO there is no Guaranteed class, its always burstable
        resources:
          limits:
            memory: ${POSTGRESQL_MEMORY_LIMIT}
          requests:
            memory: ${POSTGRESQL_MEMORY_LIMIT}
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: syndesis-db-data
        - mountPath: /var/lib/pgsql/sampledb
          name: syndesis-sampledb-config
        - mountPath: /opt/app-root/src/postgresql-cfg/
          name: syndesis-db-conf
      - capabilities: {}
        env:
        - name: DATA_SOURCE_NAME
          value: postgresql://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@localhost:5432/syndesis?sslmode=disable
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: /etc/postgres/exporter/queries.yaml
        image: ' '

        imagePullPolicy: IfNotPresent
        name: syndesis-db-metrics
        livenessProbe:
          failureThreshold: 5
          tcpSocket:
            port: 9187
          initialDelaySeconds: 60
        readinessProbe:
          failureThreshold: 5
          tcpSocket:
            port: 9187
          initialDelaySeconds: 30
        ports:
        - containerPort: 9187
          name: metrics
        resources:
          limits:
            memory: 256Mi
          requests:
            memory: 20Mi
        volumeMounts:
        - mountPath: /etc/postgres/exporter
          name: syndesis-db-metrics-config
      volumes:
      - name: syndesis-db-metrics-config
        configMap:
          name: syndesis-db-metrics-config
      - name: syndesis-db-data
        persistentVolumeClaim:
          claimName: syndesis-db
      - configMap:
          defaultMode: 511
          name: syndesis-sampledb-config
        name: syndesis-sampledb-config
      - configMap:
          name: syndesis-db-conf
        name: syndesis-db-conf
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - postgresql
      from:
        kind: ImageStreamTag
        name: postgresql:9.5
        namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
    type: ImageChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - syndesis-db-metrics
      from:
        kind: ImageStreamTag
        name: postgres_exporter:v0.4.7
        namespace: ${IMAGE_STREAM_NAMESPACE}
    type: ImageChange
