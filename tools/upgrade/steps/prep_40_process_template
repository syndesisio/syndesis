#!/bin/bash

process_template::label() {
  echo "Process new template to extract update resources"
}

process_template::doc() {
  cat <<EOT
In this step, the OpenShift template of the new Syndesis version is processed locally to create resource objects definitions.
The parameters used for the template processing are the same as for the original installation.

However, not all objects are kept:
The following objects need to be filtered out:

* All `ConfigMaps`
* All `PersistentVolumeClaims` which reference the persistent volumes of the database and other stateful services (e.g. Prometheus's time series database).

Ideally, all such objects are annotated with `io.syndesis/upgrade-mode: keep` and the local processing filters out every object with this annotation.

The files created are stored locally and are applied in a later <<step-apply-upgrade-json, step>>.

All `DeployemntConfig`s replicas are set to 0 so that they do not startup right after the update because a config trigger change.

.Rollback
Only the locally created object definitions need to be cleaned up (or kept for a later manual rollback).
EOT
}

process_template::run() {
    local backupdir=$1
    local workdir=$2
    local tag=$3

    local syndesis_version=$(read_global_config syndesis)
    echo "      - Current Syndesis version \"$syndesis_version\""
    read_global_config params > ${workdir}/template_params.props

    post_process_template_params "${workdir}/template_params.props"

    local new_template=$(template_path)

    [ -d ${workdir}/resources/all ] || mkdir -p ${workdir}/resources/all

    # Process template locally and create individual descriptor files
    oc process -f ${new_template}   --param-file=${workdir}/template_params.props | \
       jq -M -c .items[] | \
       split -l 1 - ${workdir}/resources/all/res_

    # Iterate and remove all files with an annotation "io.syndesis/upgrade-mode: keep"
    # as these should not be updated
    for res in ${workdir}/resources/all/res_*; do
        local anno=$(cat $res | jq -r '.metadata.annotations|.["io.syndesis/upgrade-mode"]')
        local kind=$(cat $res | jq -r '.kind')
        local name=$(cat $res | jq -r '.metadata.name')
        [ -d ${workdir}/resources/${kind} ] || mkdir -p ${workdir}/resources/${kind}
        if [ -n "${anno}" ] && [ "${anno}" = "keep" ]; then
            echo "      - Not updating $name"
        else
            mv $res "${workdir}/resources/${kind}/${name}.json"
        fi
    done

    rm -rf ${workdir}/resources/all
}

process_template::rollback() {
    local backupdir=${1}
    local workdir=${2}
    local cleanup=${3:-}

    if [ "$cleanup" = "true" ]; then
        remove_resource_backup $backupdir "secret"
    fi
}

post_process_template_params() {
    local params="$1"
    local tmp=$(mktemp)

    # Adding possibly missing template parameters for new templates here.
    # Don't forget to add it later int the global config map to, with a file
    # in migration/resource/always
    set +e
    if ! grep -q SAR_PROJECT "${params}"; then
        # SAR_PROJECT defaults to OPENSHIFT_PROJECT
        local sar_project=$(grep OPENSHIFT_PROJECT ${params} | sed -e s/OPENSHIFT_PROJECT/SAR_PROJECT/)
        echo $sar_project > ${tmp}
        cat "${params}" >> ${tmp}
        mv "${tmp}" "${params}"
    fi
    set -e

    # Remove SYNDESIS_REGISTRY from params if not present in the template
    set +e
    if ! grep -q SYNDESIS_REGISTRY "$(template_path)"; then
        # No SYNDESIS_REGISTRY in the new template so just remove it from the
        # params

        grep -v SYNDESIS_REGISTRY "$params" > "$tmp"
        mv "$tmp" "$params"
    fi
    set -e
}
