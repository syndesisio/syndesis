#!/bin/bash

OC_MIN_VERSION=3.9.0

compare_version_part() {
    local test=$1
    local min=$2

    test=`expr $test`
    min=`expr $min`

    if [ $test -eq $min ]; then
        echo 0;
    elif [ $test -gt $min ]; then
        echo 1;
    else
        # $test -lt $min
        echo -1
    fi
}

compare_oc_version() {
    local test=$1
    local min=$2

    echo -n "Testing oc version '$test' against required minimum '$min' ... "

    testparts=( ${test//./ } )
    minparts=( ${min//./ } )

    local i=0
    while [ $i -lt ${#minparts[@]} ]
    do
        local testpart=${testparts[$i]}
        local minpart=${minparts[$i]}

        if [ -z "$testpart" ]; then
            # test version does not extend as far as minimum
            # in parts so append a 0
            testpart=0
        fi

        ret=$(compare_version_part $testpart $minpart)
        if [ $ret == -1 ]; then
            #
            # version part is less than minimum while all preceding
            # parts were equal so version does not meet minimum
            #
            echo "ERROR: oc version ($test) should be at least $min"
            return
        elif [ $ret == 1 ]; then
            #
            # version part is greater than minimum so no need to test
            # any further parts as version is greater than minimum
            #
            echo "OK"
            return
        fi

        #
        # Only if the version part is equal will the loop continue
        # with further parts.
        #
        i=`expr $i + 1`
    done

    echo "OK"
}

check_oc_version()
{
    local minimum=${OC_MIN_VERSION}
    local test=$(oc version | grep oc | tr -d oc\ v | cut -f1 -d "+")

    echo $(compare_oc_version $test $minimum)
}

setup_oc() {

    # Check path first if it already exists
    set +e
    which oc &>/dev/null
    if [ $? -eq 0 ]; then
      set -e
      err=$(check_oc_version)
      check_error $err
      return
    fi

    # Check for minishift
    which minishift &>/dev/null
    if [ $? -eq 0 ]; then
      set -e
      eval $(minishift oc-env)
      err=$(check_oc_version)
      check_error $err
      return
    fi

    set -e

    # Error, no oc found
    echo "ERROR: No 'oc' binary found in path. Please install the client tools from https://github.com/openshift/origin/releases/tag/v3.7.0 (or newer)"
    exit 1
}

determine_console() {
    local console=$(readopt --console)

    if [ -z "${console}" ]; then
        #
        # 1. Show the status of oc
        # 2. Cut the output to only the first line
        # 3. Reduce the line to only the https ... url
        #
        # If logged out then console should be empty
        #
        console=$(oc status | head -n 1 | sed s/.*https/https/)
    fi

    if [[ ! ${console} =~ .*\/console ]]; then
        #
        # Ensure that console is appended on the end of the url
        #
        console="${console}/console"
    fi

    # user specified console url so prefer that
    echo ${console}
}

recreate_project() {
    local project=$1
    local dont_ask=${2:-false}

    if [ -z "$project" ]; then
        echo "No project given"
        exit 1
    fi

    # Delete project if existing
    if oc get project "${project}" >/dev/null 2>&1 ; then
        if [ $dont_ask != "true" ]; then
            echo =============== WARNING -- Going to delete project ${project}
            oc get all -n $project
            echo ============================================================
            read -p "Do you really want to delete the existing project $project ? yes/[no] : " choice
            echo
            if [ "$choice" != "yes" ] && [ "$choice" != "y" ]; then
                echo "Aborting on user's request"
                exit 1
            fi
        fi
        echo "Deleting project ${project}"
        oc delete project "${project}"
    fi

    # Create project afresh
    echo "Creating project ${project}"
    for i in {1..10}; do
        if oc new-project "${project}" >/dev/null 2>&1 ; then
            break
        fi
        echo "Project still exists. Sleeping 10s ..."
        sleep 10
    done
    oc project "${project}"
}

select_template() {
    local is_dev=${1:-false}
    if [ ${is_dev} == "true" ]; then
        echo "syndesis-dev"
    else
        echo "syndesis"
    fi
}

create_oauthclient() {
    local tag=${1:-}
    local use_local_resource=${2:-}

    create_openshift_resource \
        "install/support/serviceaccount-as-oauthclient-restricted.yml" \
        "$tag" \
        "$use_local_resource"
}

create_and_apply_template() {
    local route=$1
    local template=${3:-syndesis}
    local tag="$(readopt --tag)"
    local use_local_resource="$(hasflag --local)"
    local test_support="$(hasflag --test-support)"

    if [ -z "$route" ]; then
        echo "No route given"
        exit 1
    fi

    # Determine the url of the console
    local console=$(determine_console)
    if [ -x "${console}" ]; then
        echo "No openshift console url could be determined. Try specifying it using --console <console>."
        exit 1
    fi

    create_openshift_resource \
        "install/${template}.yml" \
        "$tag" \
        "$use_local_resource"

    local template_name=$(get_template_name $template $tag)
    # Use '-restricted' template for tag <= 1.2
    if [ -n "$tag" ] && [[ $tag =~ 1\.[12] ]]; then
        template_name="${template_name}-restricted"
    fi

    local optional_args=""
    if [ -n "$(readopt --memory-server)" ]; then
      optional_args="$optional_args -p SERVER_MEMORY_LIMIT=$(readopt --memory-server)"
    fi
    if [ -n "$(readopt --memory-meta)" ]; then
      optional_args="$optional_args -p META_MEMORY_LIMIT=$(readopt --memory-meta)"
    fi
    if [ $(hasflag --test-support) ]; then
      optional_args="$optional_args -p TEST_SUPPORT_ENABLED=true"
    fi

    oc new-app --template=${template_name} \
      -p ROUTE_HOSTNAME="${route}" \
      -p OPENSHIFT_CONSOLE_URL="${console}" \
      -p OPENSHIFT_MASTER="$(oc whoami --show-server)" \
      -p OPENSHIFT_PROJECT="$(oc project -q)" \
      -p OPENSHIFT_OAUTH_CLIENT_SECRET=$(oc sa get-token syndesis-oauth-client) \
      $optional_args
}

# Try first a template with the tag as combination
get_template_name() {
    local template=$1
    local tag=${2:-}
    if [ -n "$tag" ]; then
        local candidate="$template-$tag"
        $(oc get template $candidate >/dev/null 2>&1)
        if [ $? -eq 0 ]; then
          echo $candidate
          return
        fi
    fi


    echo $template
}

create_openshift_resource() {
    local resource=${1:-}
    local tag=${2:-}
    local use_local_resource=${3:-}


    # Adapt to old names if tag is smaller than 1.3. Remove this when going to
    # GA
    if [ -n "$tag" ]; then
        if [[ $tag =~ 1\.[12] ]] && [[ ! $resource =~ restricted ]]; then
          local base=$(basename $resource .yml)
          local dir=$(dirname $resource)
          resource="$dir/../app/deploy/${base}-restricted.yml"
        fi
    fi

    if [ -n "$use_local_resource" ]; then
        if [ -n "$tag" ]; then
            pushd $(appdir) >/dev/null
            git fetch --tags
            git show $tag:${resource} | oc create -f -
            popd >/dev/null
        else
            oc create -f $(appdir)/../$resource
        fi
    else
        oc create -f https://raw.githubusercontent.com/syndesisio/syndesis/${tag:-master}/${resource}
    fi
}

scale_deployments() {
  local replicas=$1
  shift
  local dcs="$@"
  for dc in $dcs; do
    oc scale dc $dc --replicas=$replicas
  done
  wait_for_deployments $replicas $dcs
}

wait_for_deployments() {
  local replicas_desired=$1
  shift
  local dcs="$@"

  oc get pods -w &
  watch_pid=$!
  for dc in $dcs; do
      echo "Waiting for $dc to be scaled to ${replicas_desired}"
      local replicas=$(get_replicas $dc)
      while [ "$replicas" -ne $replicas_desired ]; do
          echo "Sleeping 10s ..."
          sleep 10
          replicas=$(get_replicas $dc)
      done
  done
  kill $watch_pid
}

get_replicas() {
  local dc=${1}
  oc get dc $dc -o jsonpath="{.status.availableReplicas}"
}

patch_imagestreams_for_initial_image() {
    for is in "syndesis-server" "syndesis-ui" "syndesis-meta" "syndesis-s2i"; do
        echo "Patching imagestream $is"
        local replace_kind='{"op": "replace", "path": "/spec/tags/0/from/kind", "value": "ImageStreamTag"}'
        local replace_name="{\"op\": \"replace\", \"path\": \"/spec/tags/0/from/name\", \"value\": \"$is:latest\"}"
        local remove_import_policy='{"op": "remove", "path": "/spec/tags/0/importPolicy"}'
        oc patch is $is --type json -p="[$replace_kind, $replace_name, $remove_import_policy]"
    done
}

guess_route() {
    local project=${1:-}
    if [ -z "${project}" ]; then
        project=$(oc project -q)
    fi
    local log=$(oc create service clusterip smokeservice --tcp=4343 2>&1 && \
                oc create route edge --service=smokeservice 2>&1)
    if [ $? != 0 ]; then
        echo "ERROR: Cannot create pivot route\n$log"
        exit 1
    fi
    local domain=$(oc get route smokeservice -o template  --template='{{.spec.host}}' 2>&1)
    if [ $? != 0 ]; then
        echo "ERROR: Cannot extract route: $domain"
        exit 1
    fi
    log=$(oc delete service smokeservice 2>&1 && \
          oc delete route smokeservice 2>&1)
    if [ $? != 0 ]; then
        echo "ERROR: Cannot delete pivot route\n$log"
        exit 1
    fi
    echo "${project}.${domain#*.}"
}

pod() {
  local dc=${1}
  local ret=$(oc get pod -o name | grep "$dc" | sed -e "s/^pods\///")
  local nr_pods=$(echo $ret | wc -l | awk '$1=$1')
  if [ $nr_pods != "1" ]; then
      echo "ERROR: More than 1 pod found for $dc ($nr_pods found)"
  fi
  echo $ret
}

syndesis_deployments() {
  oc get dc -l syndesis.io/app=syndesis -o name | sed -e "s/^deploymentconfigs\///"
}
