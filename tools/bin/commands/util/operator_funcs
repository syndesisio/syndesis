#!/bin/bash

# Image with which container builds are perfomed
GO_BUILDER_IMAGE="syndesis/godev:1.10"

# Name of the operator image
OPERATOR_IMAGE="syndesis/syndesis-operator"

# globs to test
TEST_TARGETS="./cmd/... ./pkg/..."

dep_ensure() {
    local operator_dir=${1}
    local do_local=${2:-}
    local as_user=${3:-}

    if [ "$do_local" ]; then
        local dir=$(gopath_dir)
        check_error $dir

        pushd $dir >/dev/null
        echo "Running 'dep ensure'"
        dep ensure -vendor-only -v
    else
        echo "Running 'dep ensure' with $GO_BUILDER_IMAGE"
        local docker_gopath_volume=$(mktemp -d ${TMPDIR:-/tmp}/gopath.XXXXX)
        local docker_cache_volume=$(mktemp -d ${TMPDIR:-/tmp}/gocache.XXXXX)
        trap "rm -rf $docker_cache_volume $docker_gopath_volume" EXIT

        mkdir_and_check_owner "$operator_dir/dep-cache"
        mkdir_and_check_owner "$docker_cache_volume"
        mkdir_and_check_owner "$docker_gopath_volume/pkg/dep"
        mkdir_and_check_owner "$docker_gopath_volume/src/github.com/syndesisio/syndesis/install/operator"

        local extra_opts=""
        if [ -n "$as_user" ]; then
            extra_opts="$extra_opts -u $as_user"
        fi
        docker run -w /gopath/src/github.com/syndesisio/syndesis/install/operator \
                   -u $(id -u):$(id -g) \
                   $extra_opts \
                   -v "$docker_gopath_volume":/gopath:z \
                   -v "$docker_cache_volume":/.cache:z \
                   -v $operator_dir/dep-cache:/gopath/pkg/dep:z \
                   -v $operator_dir:/gopath/src/github.com/syndesisio/syndesis/install/operator:z \
                   $GO_BUILDER_IMAGE \
                   dep ensure -vendor-only -v
    fi
}

mkdir_and_check_owner() {
    local dir=${1}
    [ -d "$dir" ] || mkdir -p $dir
    if [ "$(stat --format '%u:%g' $dir)" != "$(id -u)":"$(id -g)" ]; then
        echo "ERROR: $dir is not owned by the current user"
        exit 1
    fi
}

gopath_dir() {
    set +o nounset
    if [ -z "$GOPATH" ]; then
        if [ ! -d "$HOME/go" ]; then
          echo "ERROR: You have to set your GOPATH environment variable and the $HOME/go directory doesn't exist"
          exit 1
        fi
        GOPATH="$HOME/go"
    fi
    set -o nounset
    local dir=$GOPATH/src/github.com/syndesisio/syndesis/install/operator
    if [ ! -d "$dir" ]; then
        echo "ERROR: No directory $dir"
    fi
    echo $dir
}

need_to_ensure_dep() {
    if [ ! -d "$operator_dir/vendor" ] || [ $(ls "$operator_dir/vendor" | wc -l) == 0 ] || [ "$(hasflag -e --ensure)" ]; then
        echo 1
    else
        echo 0
    fi
}

build_operator_local() {
    local do_skip_tests="${1:-}"
    local do_linux="${2:-}"

    local dir=$(gopath_dir)
    check_error $dir

    pushd $dir >/dev/null

    if [ $(need_to_ensure_dep) == 1 ]; then
        echo "Running 'dep ensure'"
        dep ensure -vendor-only -v
    fi

    echo "Running local build"
    if [ ! "$do_skip_tests" ]; then
        echo "Running tests"
        go test $TEST_TARGETS
    fi
    if [ "$do_linux" ] && $(isMacOs); then
        echo "Cross-compiling syndesis-operator for Linux"
        GOOS="linux" GOARCH="amd64" CGO_ENABLED=0 go build ./cmd/syndesis-operator
    else
        echo "Compiling syndesis-operator with local go"
        go build ./cmd/syndesis-operator
    fi
    popd >/dev/null
}

build_operator_docker() {
    local operator_dir="${1}"
    local do_skip_tests="${2:-}"

    cd $operator_dir
    docker build -t syndesis-operator-builder . -f Dockerfile-builder
    docker run syndesis-operator-builder cat /syndesis-operator > syndesis-operator
    chmod a+x syndesis-operator
    cd -
}

build_operator() {
    local operator_dir="${1}"
    local do_local="${2:-}"
    local do_linux="${3:-}"
    local do_skip_tests="${4:-}"

    if [ "${do_local}" ]; then
        build_operator_local "$do_skip_tests" "$do_linux"
    else
        build_operator_docker "$operator_dir" "$do_skip_tests"
    fi
}

create_multi_stage_operator_image() {
    local operator_dir=${1}
    local tag=${2:-latest}

    local build_dir=$(prepare_multistage_docker_context "$operator_dir")
    pushd $build_dir > /dev/null
    trap "rm -rf $build_dir" EXIT

    echo "Creating multi stage image $OPERATOR_IMAGE:$tag via Docker"
    docker build -t $OPERATOR_IMAGE:${tag} .
    popd
}

create_operator_image() {
    local operator_dir=${1}
    local do_docker=${2:-}
    local tag=${3:-latest}

    local build_dir=$(prepare_docker_context "$operator_dir")
    pushd $build_dir > /dev/null
    trap "rm -rf $build_dir" EXIT

    if [ $do_docker ]; then
        echo "Creating image $OPERATOR_IMAGE:$tag via Docker"
        docker build -t $OPERATOR_IMAGE:${tag} .
        popd
        return
    fi

    setup_oc

    local tmpdir=$(mktemp -d)
    trap "rm -rf $tmpdir" EXIT

    echo "Creating image $OPERATOR_IMAGE:${tag} via S2I and Docker strategy"
    if [ -z "$(oc get bc -o name | grep syndesis-operator)" ]; then
        echo "Creating BuildConfig syndesis-operator"
        oc new-build --strategy=docker --binary=true --name syndesis-operator
    fi

    local arch=$(mktemp -t syndesis-operator-docker-XXXX.tgz)
    tar zcvf $arch Dockerfile syndesis-operator syndesis-template.yml addons
    trap "rm $arch" EXIT

    oc start-build --from-archive=$arch syndesis-operator

    popd
}

prepare_multistage_docker_context() {
    local operator_dir="${1}"
    local dir=$(mktemp -d)

    cp $operator_dir/Dockerfile-with-build ${dir}/Dockerfile
    cp $operator_dir/Gopkg* ${dir}/
    for i in "cmd" "pkg" "test" "tmp"; do
        rsync -a $operator_dir/${i} ${dir}/ 2>&1 >/dev/null
    done
    cp $operator_dir/../syndesis.yml ${dir}/syndesis-template.yml

    cp -R $operator_dir/../addons/ ${dir}/addons/

    echo $dir
}

prepare_docker_context() {
    local operator_dir="${1}"
    local dir=$(mktemp -d)

    cp $operator_dir/Dockerfile $operator_dir/syndesis-operator ${dir}/
    cp $operator_dir/../syndesis.yml ${dir}/syndesis-template.yml
    cp -R $operator_dir/../addons/ ${dir}/addons/

    echo $dir
}
