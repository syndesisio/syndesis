#!/bin/bash


build::description() {
    echo "Run Syndesis builds"
}

build::usage() {
    cat <<EOT
-b  --backend                 Build only backend modules (core, extension, integration, connectors, server, meta)
    --images                  Build only modules with Docker images (ui, server, meta, s2i)
-m  --module <m1>,<m2>, ..    Build modules
                              Modules: ui, server, connector, s2i, meta, integration, extension, common
-d  --dependencies            Build also all project the specified module depends on
    --skip-tests              Skip unit and system test execution
    --skip-checks             Disable all checks
-f  --flash                   Skip checks and tests execution (fastest mode)
-i  --image-mode  <mode>      <mode> can be
                              - "none"      : No images are build (default)
                              - "openshift" : Build for OpenShift image streams
                              - "docker"    : Build against a plain Docker daemon
                              - "auto"      : Automatically detect whether to use
                                              "openshift" or "docker"
    --docker                  == --image-mode docker
    --openshift               == --image-mode openshift
-p  --project <project>       Specifies the project to create images in when using '--openshift'
-k  --kill-pods               Kill pods after the image has been created.
                              Useful when building with image-mode docker
-c  --clean                   Run clean builds (mvn clean)
    --batch-mode              Run mvn in batch mode
    --camel-snapshot          Run a build with a specific Camel snapshot. You'll need to set an environment variable CAMEL_SNAPSHOT_VERSION with the SNAPSHOT version you want to use.
EOT

}

build::run() {
    # Maven helper funcs
    source "$(basedir)/commands/util/maven_funcs"
    # For killing pods:
    source "$(basedir)/commands/util/openshift_funcs"

    call_maven "$(maven_args)"
}

maven_args() {
    local project=${1:-}
    local args=""

    if [ -n "$(hasflag --flash -f)" ]; then
        args="$args -Pflash"
    fi

    if [ -n "$(hasflag --skip-tests)" ]; then
        args="$args -DskipTests"
    fi

    if [ -n "$(hasflag --skip-checks)" ]; then
        args="$args -Pskip-checks"
    fi

    if [ -n "$(hasflag --batch-mode)" ]; then
        args="$args --batch-mode"
    fi

    local image_mode="$(readopt --image-mode -i)"
    if [ -z "${image_mode}" ]; then
      if [ $(hasflag --docker) ]; then
          image_mode="docker"
      elif [ $(hasflag --openshift --s2i) ]; then
          image_mode="openshift"
      fi
    fi
    if [ "${image_mode}" != "none" ]; then
        if [ -n "$(hasflag --images)" ] || [ -n "${image_mode}" ]; then
            #Build images
            args="$args -Pimage"
            if [ -n "${image_mode}" ]; then
                if [ "${image_mode}" == "openshift" ] || [ "${image_mode}" == "s2i" ]; then
                    args="$args -Dfabric8.mode=openshift"
                elif [ "${image_mode}" == "docker" ]; then
                    args="$args -Dfabric8.mode=kubernetes"
                elif [ "${image_mode}" != "auto" ]; then
                    echo "ERROR: Invalid --image-mode ${image_mode}. Only 'none', 'openshift', 'docker' or 'auto' supported".
                    exit 1
                fi
            fi
        fi
    fi

    set +o nounset
    if [ -n "$(hasflag --camel-snapshot)" ]; then
       if [ -n "$CAMEL_SNAPSHOT_VERSION" ]; then
           args="$args -Dcamel.version=$CAMEL_SNAPSHOT_VERSION"
       else
           echo "ERROR: you need to set the environment variable CAMEL_SNAPSHOT_VERSION to use --camel-snapshot option".
           exit 1
       fi
    fi
    set -o nounset

    if [ -z "$project" ]; then
        project="$(readopt --project -p)"
    fi
    if [ -n "${project}" ]; then
        args="$args -Dfabric8.namespace=${project}"
    fi

    if [ -n "$(hasflag --clean -c)" ]; then
        args="$args clean"
    fi

    local goals="$(readopt --goals)"
    if [ -n "${goals}" ]; then
        args="$args ${goals//,/ }"
    else
        args="$args install"
    fi

    echo $args
}
