#!/bin/bash

install::description() {
    echo "Install Syndesis to a connected OpenShift cluster"
}

install::usage() {
    cat <<"EOT"
-s  --setup                   Install CRDs clusterwide. Use --grant if you want a specific user to be
                              able to install Syndesis. You have to run this option once as cluster admin.
-u  --grant <user>            Add permissions for the given user so that user can install the operator
                              in her projects. Must be run as cluster admin.
    --cluster                 Add the permission for all projects in the cluster
                              (only when used together with --grant)
-p  --project                 Install into this project. Delete this project
                              if it already exists. By default, install into the current project (without deleting)
    --operator-only           Only install the operator but no resource
                              connected cluster.
    --tag <tag>               Syndesis version/tag to install. If not given, then the latest
                              version from master is installed
    --force                   Override an existing "Syndesis" if present
-w  --watch                   Wait until cluster is up
    --local                   install from local Git repo when using. By default the resource descriptor is
                              downloaded from GitHub remotely.
-f  --force-binary-download   By default if the binary cli is present in the expected path, it will
                              be used. With this option enabled, the binary will be removed and downloaded,
                              ensuring it is the latest version
-o  --open                    Open Syndesis in browser when installation is ready (implies --watch)
-y  --yes                     Assume 'yes' automatically when asking for deleting
                              a given project.
    --memory-server <mem>     Memory limit to set for syndesis-server. Specify as "800Mi"
    --memory-meta <mem>       Memory limit to set for syndesis-meta. Specify as "512Mi"
    --test-support            Allow test support endpoint for syndesis-server
    --camel-k <version>       Install camel-k operator version <version>
                              (version is optional)
    --camel-k-options "opts"  Options used when installing the camel-k operator.
                              Use quotes and start with a space before appending the options.
    --datavirt                Install Data Virtualizations.
    --maven-mirror            Install Maven Mirror to be used with --maven-mirror when building.
EOT
}


install::run() {
    source "$(basedir)/commands/util/openshift_funcs"
    source "$(basedir)/commands/util/camel_k_funcs"
    source "$(basedir)/commands/util/operator_funcs"

    release_tag="$(readopt --tag)"
    if [[ $(hasflag -f --force-binary-download) ]] || [[ -n "$release_tag" ]]; then
        if [[ -f ${OPERATOR_BINARY} ]]; then
            rm ${OPERATOR_BINARY}
        fi
    fi
    download_operator_binary || print_error_and_exit "unable to download the operator binary, exit"

    local prep_only="false"
    if [[ $(hasflag -s --setup) ]]; then
        echo "Installing Syndesis CRD"
        result=$($OPERATOR_BINARY install cluster)
        check_error "$result"
        if [ $(hasflag --camel-k) ]; then
          echo "Installing Camel-K CRDs"
          result=$(install_camel_k_crds "$(readopt --camel-k)")
          check_error "$result"
        fi
        prep_only="true"
    fi

    local user_to_prepare="$(readopt -u --grant)"
    if [ -n  "$user_to_prepare" ]; then
        echo "Grant permission to create Syndesis to user $user_to_prepare"
        if [ $(hasflag --cluster) ]; then
            result=$($OPERATOR_BINARY grant --user $user_to_prepare --cluster)
        else
            result=$($OPERATOR_BINARY grant --user $user_to_prepare)

        fi
        check_error "$result"
        prep_only="true"
    fi

    if $prep_only; then
        return
    fi

    # If a project is given, create it new or recreate it
    local project=$(readopt --project -p)
    if [ -n "${project}" ]; then
        recreate_project $project "$(hasflag --yes -y)"
    fi

    # Setup oc
    setup_oc

    # Check for the proper setup
    set +e
    oc get syndesis >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        check_error "ERROR: No CRD Syndesis installed or not enough permissions to read them. Please run --setup and/or --grant as cluster-admin. See 'syndesis install --help' for more information."
    fi

    if [ $(hasflag --camel-k) ]; then
        oc get integration >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            check_error "ERROR: Camel-K installation requested but no Camel-K CRDs accessible. Please run --setup --camel-k to register the proper CRDs."
        fi
    fi
    set -e

    if [ $(hasflag --maven-mirror) ]; then
        install_maven_mirror
    fi

    # Deploy operator and wait until its up
    echo "Deploying Syndesis operator"
    result=$($OPERATOR_BINARY install operator)
    check_error "$result"

    if [ $(hasflag --camel-k) ]; then
        echo "Deploying Camel-K operator"
        result=$(deploy_camel_k_operator "$(readopt --camel-k)" "$(oc project -q)" "$(readopt --camel-k-options)")
        check_error "$result"
    fi

    wait_for_deployments 1 syndesis-operator

    if [ $(hasflag --operator-only) ]; then
        echo "Deployed operator."
        exit 0
    else
        echo "Deploying syndesis app."
        result=$($OPERATOR_BINARY install app)
        check_error "$result"
    fi

    echo "Install finished."
    if [ $(hasflag --watch -w) ] || [ $(hasflag --open -o) ]; then
        wait_for_deployments 1 syndesis-server syndesis-ui syndesis-meta
    fi

    if [ $(hasflag --open -o) ]; then
        while ! (oc get routes | grep syndesis >/dev/null 2>&1); do
            echo "Sleeping 5s ..."
            sleep 5
        done
        open_url "https://$(oc get routes syndesis --template "{{.spec.host}}")"
    fi
}
