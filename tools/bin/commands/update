#!/bin/bash

update::description() {
    echo "Update a Syndesis installation"
}

update::usage() {
    cat <<EOT
    --tag <tag>               Syndesis version/tag to update to. This options is mandatory
    --backup <dir>            Backup directory to use. The backup is kept after the update
    --local                   Use the local templates stored in this director instead of
                              fetching them directly from GitHub
EOT
}


update::run() {
    source "$(basedir)/commands/util/openshift_funcs"

    local stepsdir="$(basedir)/commands/update_steps"
    local tag=$(readopt --tag)
    if [ -z "${tag}" ]; then
      echo "ERROR: --tag is required to specify the target version"
      echo
      display_help update
      exit 1
    fi

    # Create backup dir
    local backupdir=$(readopt --backup)
    if [ -z "$backupdir" ]; then
       backupdir=$(mktemp -d)
    fi

    echo "============================================="
    echo "===== STARTING UPDATE TO SYNDESIS $tag "
    echo "============================================="
    echo
    # Prepare for an update.
    echo "===== Preparation"
    for prep in $(ls $stepsdir/prep_*); do
      source $prep
      local step="$(extract_step prep $prep)"
      local label=$(eval "${step}::label")
      echo "=== * $label"
      set +e
      (eval "${step}::run $backupdir")
      if [ $? -ne 0 ]; then
        set -e
        echo "====> Error in preparing. Abort"
        cleanup_backupdir $backupdir
        exit 1
      fi
      set -e
    done

    echo
    echo "+++++ Update"
    local actions_performed=""
    for update in $(ls $stepsdir/update_*); do
      source $update
      local step="$(extract_step update $update)"
      local label=$(eval "${step}::label")
      echo "+++ * $label"
      set +e
      (eval "${step}::run $backupdir")
      if [ $? -ne 0 ]; then
        set -e
        echo "====> Update Error ==> Rollback"
        rollback $backupdir $actions_performed
        cleanup_backupdir $backupdir
        exit 1
      fi
      set -e
      actions_performed="$step $actions_performed"
    done
}

rollback() {
    local backupdir=$1
    shift 1
    echo
    echo "----- Rollback"
    for step in $@; do
      local label=$(eval "${step}::label")
      echo "--- * Rolling back '$label'"
      set +e
      (eval "${step}::rollback $backupdir")
      if [ $? -ne 0 ]; then
        set -e
        echo "====> Rollback Error ==> Exit"
        echo "Backup directory *not* deleted: $backupdir"
        exit 1
      fi
      set -e
    done
}

cleanup_backupdir() {
    local backupdir="$1"
    if [ -z "$(readopt --backup)" ]; then
        rm -rf $backupdir
    fi
}

extract_step() {
  local prefix=$1
  local path=$2
  local file=$(basename $path)
  echo $(basename $path) | sed -e "s/${prefix}_[0-9]*_//"
}
