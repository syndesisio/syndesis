#!/bin/bash

DEFAULT_OPENSHIFT_VERSION="v3.10.0"
DEFAULT_CPUS="2"
DEFAULT_DISK_SIZE="20GB"
DEFAULT_RAM="4912"

minishift::description() {
    echo "Initialize and manage a Minishift developer environment"
}

minishift::usage() {
    cat <<EOT
    --install                 Install templates to a running Minishift.
-p  --project                 Install into this project. Delete this project if it already exists.
                              By default, install into the current project (without deleting)
-c  --context                 Install into this context. Default is 'minishift'
    --reset                   Reset and initialize the minishift installation by
                              'minishift delete && minishift start'.
    --full-reset              Full reset and initialie by
                              'minishift stop && rm -rf ~/.minishift/* && minishift start'
    --operator-only           Only install the operator but no resource
                              connected cluster.
    --memory <mem>            How much memory to use when doing a reset. Default: $DEFAULT_RAM
    --cpus <nr cpus>          How many CPUs to use when doing a reset. Default: $DEFAULT_CPUS
    --disk-size <size>        How many disk space to use when doing a reset. Default: $DEFAULT_DISK_SIZE
    --vm-driver <driver>      Which virtual machine driver to use (depends on OS)
    --show-logs               Show minishift logs during startup
    --openshift-version <ver> Set OpenShift version to use when reseting (default: $DEFAULT_OPENSHIFT_VERSION)
    --tag <tag>               Syndesis version/tag to install. If not given, then the latest
                              version from master is installed
    --local                   Use the local resource files instead of fetching them from GitHub
-r  --route <route>           Use the given route.
                              By default "syndesis.<minishift ip>.nip.io" is used.
-o  --open                    Open Syndesis in the browser
-y  --yes                     Assume 'yes' automatically when asking for deleting
                              a given project.
    --memory-server <mem>     Memory limit to set for syndesis-server. Specify as "800Mi"
    --memory-meta <mem>       Memory limit to set for syndesis-meta. Specify as "512Mi"
    --test-support            Allow test support endpoint for syndesis-server
    --camel-k <version>       Install the Camel-K operator with version <version>
                              (version is optional)
    --camel-k-options "opts"  Options used when installing the camel-k operator.
                              Use quotes and start with a space before appending the options.
EOT
}


minishift::run() {
    source "$(basedir)/commands/util/openshift_funcs"
    source "$(basedir)/commands/util/camel_k_funcs"

    # Check that mininishift is installed
    which minishift &>/dev/null
    if [ $? -ne 0 ]; then
        echo "ERROR: No 'minishift' found in path."
        echo "Please insall Minishift from https://github.com/MiniShift/minishift"
        exit 1
    fi

    if [ $(hasflag --full-reset) ] || [ $(hasflag --reset) ]; then
        delete_minishift $(hasflag --full-reset)
        start_minishift
    fi

    # Start minishift if necessary
    if [ -z "$(is_minishift_running)" ]; then
        start_minishift
    fi

    # Ensure OC is in the path
    eval $(minishift oc-env)

    if [ $(hasflag --install) ]; then

        local context=$(readopt --context -c)
        if [ -z "${context}" ]; then
            #recreate_context $context
            context=$(minishift profile list |grep '\(Active\)'|awk '{print $2}')
            context=${context:-minishift}
        fi

        # Switch to minishift to be safe when deleting projects
        local original_project="$(oc project -q)"
        oc config use-context $context

        local project=$(readopt --project -p)
        if [ -n "${project}" ]; then
            recreate_project $project "$(hasflag --yes -y)"
        else
            local project="$original_project"
        fi
        oc project $project

        # Login as admin to install CRDs
        local user=$(oc whoami)
        local revert_login=$(login_as_admin)

        # Install Syndesis CRD globally (if required)
        echo "Installing Syndesis CRD"
        local result=$(install_syndesis_crd)
        check_error "$result"

        # Install Camel-K CRD globally (if requested)
        if [ $(hasflag --camel-k) ]; then
          echo "Installing Camel-K CRDs"
          result=$(install_camel_k_crds "$(readopt --camel-k)")
          check_error "$result"
        fi

        # Adapt
        add_user_permissions_for_operator "$user" "true"

        # Deploy operator and wait until its up
        echo "Deploying Syndesis operator"
        result=$(deploy_syndesis_operator "$(oc project -q)")
        check_error "$result"

        # Deploy Camel-K operator if requested
        if [ $(hasflag --camel-k) ]; then
          echo "Deploying Camel-K operator"
          result=$(deploy_camel_k_operator "$(readopt --camel-k)" "$(oc project -q)" "$(readopt --camel-k-options)")
          check_error "$result"
        fi

        # Relogin with original user
        $revert_login

        if [ $(hasflag --operator-only) ]; then
            echo "Deployed operator."
            exit 0
        fi

        wait_for_deployments 1 syndesis-operator

        # Create syndesis resource
        local route=$(readopt --route -r)
        if [ -z "$route" ]; then
            route="syndesis.$(minishift ip).nip.io"
        fi
        result=$(create_syndesis "$route" "https://$(minishift ip):8443/console")
        check_error "$result"

        # Wait until everything's up and finally patch imagestreams for triggers
        wait_for_deployments 1 syndesis-server syndesis-ui syndesis-meta
        patch_imagestreams_for_initial_image
    fi

    if [ $(hasflag --open -o) ]; then
        open_url "$(minishift openshift service syndesis-oauthproxy --url)"
    fi
}

login_as_admin() {
    local user=$(oc whoami)
    local token=$(extract_current_token)
    local project=$(oc project -q)

    oc login -u system:admin >/dev/null 2>&1
    oc project "$project" >/dev/null 2>&1

    if [ -n "${token}" ]; then
        echo "oc login -u ${user} -p $token"
    else
        echo "oc login -u ${user}"
    fi
}

extract_current_token() {
    local token=$(oc whoami -t 2>/dev/null)
    if [ $? == 0 ]; then
        echo $token
    fi
}

is_minishift_running() {
    set +e
    minishift status 2>&1 | grep -q "Running"
    local stat=$?
    set -e
    if [ $stat -eq 0 ]; then
      echo "true"
    fi
}

delete_minishift() {
    local remove_all=${1:-}

    if [ $(is_minishift_running) ]; then
      minishift stop
    fi

    minishift delete --clear-cache --force
    if [ $remove_all ] && [ -d ~/.minishift ]; then
        rm -rf ~/.minishift/*
    fi
}

start_minishift() {
    local memory=$(readopt --memory)
    local cpus=$(readopt --cpus)
    local disksize=$(readopt --disk-size)
    local openshift_version=$(readopt --openshift-version)
    local extra_args=""
    if [ $(hasflag --show-logs --show-log) ]; then
        extra_args="--show-libmachine-logs=true "
    fi
    local vmdriver=$(readopt --vm-driver --vmdriver)
    if [ -n "${vmdriver}" ]; then
        extra_args="${extra_args}--vm-driver ${vmdriver} "
    fi

    minishift addons enable admin-user

    echo "Starting minishift ...."
    minishift start ${extra_args:-}\
            --memory ${memory:-$DEFAULT_RAM} \
            --cpus ${cpus:-$DEFAULT_CPUS} \
            --disk-size ${disksize:-$DEFAULT_DISK_SIZE} \
            --openshift-version ${openshift_version:-$DEFAULT_OPENSHIFT_VERSION}
}
