#
# Copyright (C) 2016 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: 2

common_env: &common_env
  MAVEN_OPTS: -Xmx1024m
  DOCKER_VERSION: 17.04.0-ce

job_default: &job_defaults
  working_directory: /workspace
  docker:
    - image: openjdk:8-jdk

push_images: &push_images
  deploy:
    command: |
      if [ "${CIRCLE_PROJECT_USERNAME}" != "syndesisio" ]; then
        exit 0
      fi

      curl -fsSL https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION}.tgz | tar xz -C /usr/bin --strip-components 1

      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        for image in ${DOCKER_IMAGES} ; do
          docker push syndesis/${image}:latest | cat -
        done
      fi
      if [[ "${CIRCLE_TAG}" =~ ^[0-9]+(\.[0-9]+){2} ]]; then
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        for image in ${IMAGES} ; do
          docker push syndesis/${image}:${CIRCLE_TAG} | cat -
          docker tag syndesis/${image}:${CIRCLE_TAG} syndesis/${image}:$(echo ${CIRCLE_TAG} | sed -e 's/\.[0-9][0-9]*$//')
          docker push syndesis/${image}:$(echo ${CIRCLE_TAG} | sed -e 's/\.[0-9][0-9]*$//')
        done
      fi

load_m2: &load_m2
  attach_workspace:
    at: ~/.m2

save_m2: &save_m2
  persist_to_workspace:
    root: ~/.m2
    paths:
      - repository/io/syndesis

jobs:
  # UI has no dependencies, just load cache
  ui:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-ui
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-ui-{{ checksum "app/ui/pom.xml" }}
      - restore_cache:
          key: syndesis-yarn-{{ checksum "app/ui/yarn.lock" }}
      - run:
          name: Build UI
          command: |
            ./app/build.sh --batch-mode --checks --image-mode=docker --module ui | tee build_log.txt | grep -v " Download"
      - store_artifacts:
          path: ./build_ui_log.txt
      - save_cache:
          key: syndesis-yarn-{{ checksum "app/ui/yarn.lock" }}
          paths:
          - /usr/local/share/.cache/yarn/v1
      - store_artifacts:
          path: build_log.txt
      - save_cache:
          key: syndesis-mvn-ui-{{ checksum "app/ui/pom.xml" }}
          paths:
          - ~/.m2
      - <<: *push_images

  # Connectors have no dependencies, just load cache
  connectors:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: syndesis-mvn-connectors-{{ checksum "app/connectors/pom.xml" }}
      - run:
          name: Build Connectors
          command: |
            ./app/build.sh --init --batch-mode --checks --module connectors | tee build_log.txt | grep -v " Download"
      - run:
          name: Collect junit reports
          command: |
            mkdir ./junit/
            find . -type f -regex '.*-reports/.*xml' -exec cp {} ./junit/ \;
      - store_artifacts:
          path: junit
      - store_artifacts:
          path: build_log.txt
      - save_cache:
          key: syndesis-mvn-connectors-{{ checksum "app/connectors/pom.xml" }}
          paths:
          - ~/.m2
      - <<: *save_m2


  # Verifier depends on connectors, mount workspace .m2
  verifier:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-verifier
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-verifier-{{ checksum "app/verifier/pom.xml" }}
      - <<: *load_m2
      - run:
          name: Build Verifier
          command: |
            ./app/build.sh --batch-mode --checks --image-mode=docker --module verifier | tee build_log.txt | grep -v " Download"
      - run:
          name: Collect junit reports
          command: |
            mkdir ./junit/
            find . -type f -regex '.*-reports/.*xml' -exec cp {} ./junit/ \;
      - store_artifacts:
          path: junit
      - store_artifacts:
          path: build_log.txt
      - <<: *push_images
      - <<: *save_m2
      - save_cache:
          key: syndesis-mvn-verifier-{{ checksum "app/verifier/pom.xml" }}
          paths:
          - ~/.m2

  # Runtime has no dependencies, just load cache
  runtime:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: syndesis-mvn-runtime-{{ checksum "app/runtime/pom.xml" }}
      - <<: *load_m2
      - run:
          name: Build Runtime
          command: |
            ./app/build.sh --batch-mode --checks --module runtime | tee build_log.txt | grep -v " Download"
      - run:
          name: Collect junit reports
          command: |
            mkdir ./junit/
            find . -type f -regex '.*-reports/.*xml' -exec cp {} ./junit/ \;
      - store_artifacts:
          path: junit
      - store_artifacts:
          path: build_log.txt
      - <<: *save_m2
      - save_cache:
          key: syndesis-mvn-runtime-{{ checksum "app/runtime/pom.xml" }}
          paths:
          - ~/.m2

  # S2I image
  s2i:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-s2i
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-s2i-{{ checksum "app/s2i/pom.xml" }}
      - <<: *load_m2
      - run:
          name: Build S2I Builder image
          command: |
            ./app/build.sh --batch-mode --checks --image-mode=docker --module s2i | tee build_log.txt | grep -v " Download"
      - store_artifacts:
          path: build_log.txt
      - <<: *push_images
      - <<: *save_m2
      - save_cache:
          key: syndesis-mvn-s2i-{{ checksum "app/s2i/pom.xml" }}
          paths:
          - ~/.m2

  # Rest depends on connectors and runtime, mount workspace .m2
  rest:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-rest
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-rest-{{ checksum "app/rest/pom.xml" }}
      - <<: *load_m2
      - run:
          name: Build Rest
          command: |
            ./app/build.sh --batch-mode --checks --image-mode docker --module rest | tee build_log.txt | grep -v " Download"
      - run:
          name: Collect API docs
          command: |
            mkdir ./apidocs
            if [[ -d app/runtime/runtime/target/classes/static ]]; then
              cp app/runtime/runtime/target/classes/static/index.html ./apidocs
              cp app/runtime/runtime/target/classes/static/swagger.json ./apidocs
              cp app/runtime/runtime/target/classes/static/swagger.yaml ./apidocs
            fi
      - run:
          name: Collect junit reports
          command: |
            mkdir ./junit/
            find . -type f -regex '.*-reports/.*xml' -exec cp {} ./junit/ \;
      - store_artifacts:
          path: junit
      - store_artifacts:
          path: apidocs
      - store_artifacts:
          path: build_log.txt
      - <<: *push_images
      - <<: *save_m2
      - save_cache:
          key: syndesis-mvn-rest-{{ checksum "app/rest/pom.xml" }}
          paths:
          - ~/.m2

  system-test:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - run:
          name: Prep for Maven cache load
          command: |
            cat $(find app -name pom.xml ! -path */src/* | sort) > all-poms
      - restore_cache:
          key: syndesis-mvn-tests-{{ checksum "all-poms" }}
      - run:
          name: Run System Tests
          command: |
            if [ -n "${OPENSHIFT_TOKEN}" ]; then
              curl -fsSL https://github.com/openshift/origin/releases/download/v3.6.0/openshift-origin-client-tools-v3.6.0-c4dd4cf-linux-64bit.tar.gz | tar xz -C /usr/bin --strip-components 1
              oc login --server "${OPENSHIFT_SERVER}" --token "${OPENSHIFT_TOKEN}"
              ./app/build.sh --batch-mode --mode system-test | tee test_log.txt | grep -v " Download"
            fi
      - store_artifacts:
          path: test_log.txt
      - save_cache:
          key: syndesis-mvn-tests-{{ checksum "all-poms" }}
          paths:
          - ~/.m2

workflows:
  version: 2
  syndesis:
    jobs:
      - system-test:
          filters:
            branches:
              only: master
      - ui
      - connectors
      - runtime:
          requires:
            - connectors
      - verifier:
          requires:
            - connectors
      - rest:
          requires:
            - runtime
      - s2i:
          requires:
            - rest
