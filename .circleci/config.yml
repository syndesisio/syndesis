#
# Copyright (C) 2016 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: 2.1

yaml-templates:

  attach_m2_workspace: &attach_m2_workspace
    attach_workspace:
      at: ~/.m2

  persist_m2_workspace: &persist_m2_workspace
    persist_to_workspace:
      root: ~/.m2
      paths:
        - repository/io/syndesis

  ignore_cherry_pick_branches: &ignore_cherry_pick_branches
    filters:
      branches:
        ignore: /cherry-pick-backport.*/

common_env: &common_env
  MAVEN_OPTS: -Xmx1024m
  DOCKER_VERSION: 18.06.1-ce

job_default: &job_defaults
  working_directory: /workspace
  docker:
    - image: openjdk:8-jdk

push_images: &push_images
  deploy:
    name: Push Images
    command: |
      if [ "${CIRCLE_PROJECT_USERNAME}" != "syndesisio" ]; then
        exit 0
      fi

      if [ ! -x /usr/bin/docker ]; then
        curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz | tar xz -C /usr/bin --strip-components 1
      fi

      # Check, if docker images declared by jobs have actually been built
      IMAGES_TO_PUSH=""
      for image in ${DOCKER_IMAGES}; do
        if [ ! -z "$(docker images -q syndesis/$image)" ]; then
          IMAGES_TO_PUSH="$IMAGES_TO_PUSH $image"
        fi
      done

      if [ -z $IMAGES_TO_PUSH ]; then
        exit 0
      fi

      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        for image in ${IMAGES_TO_PUSH} ; do
          docker push syndesis/${image}:latest | cat -
        done
      elif [ -n "${CIRCLE_PR_NUMBER}" ]; then
        for image in ${IMAGES_TO_PUSH} ; do
          docker tag syndesis/${image}:latest syndesis/${image}:${CIRCLE_PR_NUMBER}-${CIRCLE_SHA1}
          docker save syndesis/${image}:${CIRCLE_PR_NUMBER}-${CIRCLE_SHA1} | gzip > ${CIRCLE_WORKING_DIRECTORY}/${image}.tar.gz
        done
      elif [[ "${CIRCLE_TAG}" =~ ^[0-9]+(\.[0-9]+){2} ]]; then
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        for image in ${IMAGES_TO_PUSH} ; do
          docker push syndesis/${image}:${CIRCLE_TAG} | cat -
          docker tag syndesis/${image}:${CIRCLE_TAG} syndesis/${image}:$(echo ${CIRCLE_TAG} | sed -e 's/\.[0-9][0-9]*$//')
          docker push syndesis/${image}:$(echo ${CIRCLE_TAG} | sed -e 's/\.[0-9][0-9]*$//')
        done
      fi

save_junit: &save_junit
  run:
    name: Collect junit reports
    when: always
    command: |
      mkdir -p /workspace/junit/
      find . -type f -regextype posix-extended -regex ".*target/.*TESTS?-.*xml" | xargs -i cp --backup --suffix=.xml {} /workspace/junit/

quay_transfer: &quay_transfer
  run:
    name: Trigger image transfer to quay.io
    command: |
      if [ -n "${CIRCLE_PR_NUMBER}" ]; then
        curl -vs "https://ci.fabric8.io/generic-webhook-trigger/invoke?token=syndesis-circleci-to-quay&build_number=$CIRCLE_BUILD_NUM"
      else
        echo "Skip transfer to quay.io for non PR build"
      fi

jobs:
  ui:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-ui
      CHROME_BIN: "/usr/bin/google-chrome"
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-ui-{{ checksum "app/ui-react/pom.xml" }}
      - restore_cache:
          key: syndesis-yarn-ui-v2-{{ checksum "app/ui-react/yarn.lock" }}
      - run:
          name: Build UI
          command: |
            echo "deb https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
            curl -sSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
            apt-get update -y
            apt-get install -y --force-yes libxss1 patch apt-transport-https google-chrome-stable
            ./tools/bin/syndesis build --batch-mode --module ui-react --docker | tee build_log.txt
      - save_cache:
          key: syndesis-yarn-ui-v2-{{ checksum "app/ui-react/yarn.lock" }}
          paths:
            - /usr/local/share/.cache/yarn
      - store_artifacts:
          path: build_log.txt
      - save_cache:
          key: syndesis-mvn-ui-{{ checksum "app/ui-react/pom.xml" }}
          paths:
            - ~/.m2
      - <<: *push_images
      - store_artifacts:
          path: syndesis-ui.tar.gz
          destination: /images/syndesis-ui.tar.gz
      - <<: *quay_transfer

  ui-doc:
    working_directory: ~/src/app/ui-react
    docker:
      - image: circleci/node:10.15-browsers
    environment:
      <<: *common_env
    steps:
    - checkout:
        path: ~/src
    - restore_cache:
        key: syndesis-yarn-ui-doc-{{ checksum "yarn.lock" }}
    - run:
        name: Run Install
        command: yarn install --frozen-lockfile
    - run:
        name: Build Circle CI App
        command: |
          # 105563335 is GH project id, but it's not exposed as an env variable.
          PUBLIC_URL="https://$CIRCLE_BUILD_NUM-105563335-gh.circle-artifacts.com/0/doc/app" yarn build
          cp -a syndesis/build doc/app
          cp syndesis/config.staging.json doc/app/config.json
    - run:
        name: Build Docs
        command: yarn build-storybook
    - save_cache:
        key: syndesis-yarn-ui-doc-{{ checksum "yarn.lock" }}
        paths:
          - ~/.cache/yarn
    - store_artifacts:
        path: doc

  # All connectors job depends on integration, mount workspace .m2
  connectors:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: syndesis-mvn-connector-{{ checksum "app/connector/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build Connectors
          command: |
            ./tools/bin/syndesis build --batch-mode --module connector | tee build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: build_log.txt
      - <<: *persist_m2_workspace
      - save_cache:
          key: syndesis-mvn-connector-{{ checksum "app/connector/pom.xml" }}
          paths:
            - ~/.m2

  # Connector support depends on integration, mount workspace .m2
  connector-support:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: syndesis-mvn-connector-{{ checksum "app/connector/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build Connector Support
          command: |
            ./tools/bin/syndesis build --batch-mode --module :connector-parent,:connector-support-util,:connector-support-verifier,:connector-support-maven-plugin,:connector-support-processor,:connector-support-test | tee build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: build_log.txt
      - <<: *persist_m2_workspace
      - save_cache:
          key: syndesis-mvn-connector-{{ checksum "app/connector/pom.xml" }}
          paths:
            - ~/.m2

  # Connector support catalog depends on integration, mount workspace .m2
  connector-catalog:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: syndesis-mvn-connector-support-catalog-{{ checksum "app/connector/support/catalog/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build Connector Support
          command: |
            ./tools/bin/syndesis build --batch-mode --module :connector-support-catalog | tee build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: build_log.txt

      - persist_to_workspace:
          root: ~/.m2
          paths:
            - repository/io/syndesis/connector/connector-support-catalog

      - save_cache:
          key: syndesis-mvn-connector-support-catalog-{{ checksum "app/connector/support/catalog/pom.xml" }}
          paths:
            - ~/.m2

  # Connector parameterized depends on connector-support, mount workspace .m2
  connector:
    <<: *job_defaults
    environment:
      <<: *common_env
    parameters:
      module:
        type: string
    steps:
      - checkout
      - restore_cache:
          key: syndesis-mvn-connector-<< parameters.module >>-{{ checksum "app/connector/<< parameters.module >>/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build Connector connector-<< parameters.module >>
          command: |
            ./tools/bin/syndesis build --batch-mode --module :connector-<< parameters.module >> | tee build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: build_log.txt
      - persist_to_workspace:
          root: ~/.m2
          paths:
            - repository/io/syndesis/connector/connector-<< parameters.module >>
      - save_cache:
          key: syndesis-mvn-connector-<< parameters.module >>-{{ checksum "app/connector/<< parameters.module >>/pom.xml" }}
          paths:
            - ~/.m2

  # Meta depends on connectors, mount workspace .m2
  meta:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-meta
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-meta-{{ checksum "app/meta/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build Meta
          command: |
            ./tools/bin/syndesis build --batch-mode --module meta --docker | tee build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: build_log.txt
      - <<: *push_images
      - store_artifacts:
          path: syndesis-meta.tar.gz
          destination: /images/syndesis-meta.tar.gz
      - <<: *quay_transfer
      - <<: *persist_m2_workspace
      - save_cache:
          key: syndesis-mvn-meta-{{ checksum "app/meta/pom.xml" }}
          paths:
            - ~/.m2

  # Common has no dependencies, just load cache
  common:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: syndesis-mvn-common-{{ checksum "app/common/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build Common
          command: |
            ./tools/bin/syndesis build --batch-mode --module common | tee build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: build_log.txt
      - <<: *persist_m2_workspace
      - save_cache:
          key: syndesis-mvn-common-{{ checksum "app/common/pom.xml" }}
          paths:
            - ~/.m2

  # Extension depends on common
  extension:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: syndesis-mvn-extension-{{ checksum "app/extension/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build Extension
          command: |
            ./tools/bin/syndesis build --batch-mode --module extension | tee build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: build_log.txt
      - run:
          name: Collect Extension Maven plugin integration test results
          when: always
          command: |
            find ./app/extension/maven-plugin/target/it/ -type f -name build.log -exec sh -c 'DEST="/workspace/extension-maven-plugin-tests/$(basename $(dirname {}))" && mkdir -p $DEST && cp "{}" "$DEST/build.log"' \;
      - store_artifacts:
          path: /workspace/extension-maven-plugin-tests
      - <<: *persist_m2_workspace
      - save_cache:
          key: syndesis-mvn-extension-{{ checksum "app/extension/pom.xml" }}
          paths:
            - ~/.m2

  # integration depends on extension, mount workspace .m2
  integration:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: syndesis-mvn-integration-{{ checksum "app/integration/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build Connectors
          command: |
            ./tools/bin/syndesis build --batch-mode --module integration | tee build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: build_log.txt
      - <<: *persist_m2_workspace
      - save_cache:
          key: syndesis-mvn-integration-{{ checksum "app/integration/pom.xml" }}
          paths:
            - ~/.m2

  # S2I image
  s2i:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-s2i
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-s2i-{{ checksum "app/s2i/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build S2I Builder image
          command: |
            ./tools/bin/syndesis build --batch-mode --module s2i --docker | tee build_log.txt
      - store_artifacts:
          path: build_log.txt
      - <<: *push_images
      - store_artifacts:
          path: syndesis-s2i.tar.gz
          destination: /images/syndesis-s2i.tar.gz
      - <<: *quay_transfer
      - <<: *persist_m2_workspace
      - save_cache:
          key: syndesis-mvn-s2i-{{ checksum "app/s2i/pom.xml" }}
          paths:
            - ~/.m2

  # "server" depends on common, connector and integration, mount workspace .m2
  server:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-server
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-server-{{ checksum "app/server/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build Server
          command: |
            ./tools/bin/syndesis build --batch-mode --module server --docker | tee build_log.txt
      - run:
          name: Collect API docs
          command: |
            mkdir ./apidocs
            if [[ -d app/runtime/runtime/target/classes/static ]]; then
              cp app/runtime/runtime/target/classes/static/index.html ./apidocs
              cp app/runtime/runtime/target/classes/static/swagger.json ./apidocs
              cp app/runtime/runtime/target/classes/static/swagger.yaml ./apidocs
            fi
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: apidocs
      - store_artifacts:
          path: build_log.txt
      - <<: *push_images
      - store_artifacts:
          path: syndesis-server.tar.gz
          destination: /images/syndesis-server.tar.gz
      - <<: *quay_transfer
      - <<: *persist_m2_workspace
      - save_cache:
          key: syndesis-mvn-server-{{ checksum "app/server/pom.xml" }}
          paths:
            - ~/.m2

  # dv
  dv:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-dv
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-dv-{{ checksum "app/dv/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Build DV
          command: |
            ./tools/bin/syndesis build --batch-mode --module dv --docker | tee build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: build_log.txt
      - <<: *push_images
      - store_artifacts:
          path: syndesis-dv.tar.gz
          destination: /images/syndesis-dv.tar.gz
      - <<: *quay_transfer
      - <<: *persist_m2_workspace
      - save_cache:
          key: syndesis-mvn-dv-{{ checksum "app/dv/pom.xml" }}
          paths:
            - ~/.m2

  operator:
    working_directory: /home/circleci/project
    docker:
      - image: circleci/golang:1.13.6
    environment:
      DOCKER_IMAGES: syndesis-operator
      GOPROXY: https://proxy.golang.org
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build Operator
          command: |
            ./tools/bin/syndesis build --module operator --image --docker --source-gen verify-none | tee build_log.txt
      - store_artifacts:
          path: build_log.txt
      - <<: *push_images
      - store_artifacts:
          path: syndesis-operator.tar.gz
          destination: /images/syndesis-operator.tar.gz
      - <<: *quay_transfer

  upgrade:
    <<: *job_defaults
    environment:
      DOCKER_IMAGES: syndesis-upgrade
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: syndesis-mvn-server-{{ checksum "app/server/pom.xml" }}
      - <<: *attach_m2_workspace
      - run:
          name: Install Docker
          command: |
            if [ ! -x /usr/bin/docker ]; then
              curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz | tar xz -C /usr/bin --strip-components 1
            fi
      - run:
          name: Build CLI jar
          command: |
            ./tools/bin/syndesis build --batch-mode --flash --module server
      - run:
          name: Build upgrade image
          command: |
            ./tools/bin/syndesis build --batch-mode --module upgrade --docker
      - <<: *push_images
      - store_artifacts:
          path: syndesis-upgrade.tar.gz
          destination: /images/syndesis-upgrade.tar.gz
      - <<: *quay_transfer

  # Integration test
  integration-test:
    environment:
      <<: *common_env
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - <<: *attach_m2_workspace
      - run:
          name: Run integration tests
          command: |
            mkdir -p ~/integrations/
            mkdir -p ~/junit/
            mkdir -p ~/logs/
            ./tools/bin/syndesis integration-test --output /home/circleci/integrations --default-timeout 180 | tee ~/logs/test_log.txt
            cp ./app/test/integration-test/target/integration-runtime.log ~/logs/
      - run:
          name: Collect test results
          when: always
          command: |
            find . -type f -regextype posix-extended -regex ".*target/.*TESTS?-.*xml" | xargs -i cp --backup --suffix=.xml {} ~/junit
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/logs
      - store_artifacts:
          path: ~/integrations

  system-test:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - run:
          name: Prep for Maven cache load
          command: |
            cat $(find app -name pom.xml ! -path */src/* | sort) > all-poms
      - restore_cache:
          key: syndesis-mvn-tests-{{ checksum "all-poms" }}
      - run:
          name: Run System Tests
          command: |
            if [ -n "${OPENSHIFT_TOKEN}" ]; then
              # Install 'oc' and login
              curl -fsSL https://github.com/openshift/origin/releases/download/v3.6.0/openshift-origin-client-tools-v3.6.0-c4dd4cf-linux-64bit.tar.gz | tar xz -C /usr/bin --strip-components 1
              oc login --server "${OPENSHIFT_SERVER}" --token "${OPENSHIFT_TOKEN}"
              test_id="${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"

              # Install missing libs for UI tests
              apt-get update
              apt-get install libxss1

              ./tools/bin/syndesis system-test --batch-mode --server "${OPENSHIFT_SERVER}" --token "${OPENSHIFT_TOKEN}" --test-id "$test_id" --project ${OPENSHIFT_PROJECT} | tee test_log.txt | grep -v " Download"
              # Always cleanup
              ./tools/bin/syndesis system-test --release-project --test-id "$test_id"
            fi
      - store_artifacts:
          path: test_log.txt
      - save_cache:
          key: syndesis-mvn-tests-{{ checksum "all-poms" }}
          paths:
            - ~/.m2

  license-check:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - run:
          name: Prep for Maven cache load
          command: |
            cat $(find app -name pom.xml ! -path */src/* | sort) > all-poms
      - restore_cache:
          key: syndesis-license-check-{{ checksum "all-poms" }}
      - run:
          name: License check
          command: |
            cd app
            ./mvnw -N install license:check
      - save_cache:
          key: syndesis-license-check-{{ checksum "all-poms" }}
          paths:
            - ~/.m2

workflows:
  version: 2
  syndesis:
    jobs:
      - system-test:
          filters:
            branches:
              only: system-test
      - license-check:
          <<: *ignore_cherry_pick_branches
      - ui-doc:
          <<: *ignore_cherry_pick_branches
      - ui:
          <<: *ignore_cherry_pick_branches
      - common:
          <<: *ignore_cherry_pick_branches
      - operator:
          <<: *ignore_cherry_pick_branches
      - extension:
          <<: *ignore_cherry_pick_branches
          requires:
            - common
      - integration:
          <<: *ignore_cherry_pick_branches
          requires:
            - extension
      - connector-support:
          <<: *ignore_cherry_pick_branches
          requires:
            - integration
      - connector:
          name: connector-activemq
          module: activemq
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-api-provider
          module: api-provider
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-amqp
          module: amqp
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-aws-ddb
          module: aws-ddb
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-aws-s3
          module: aws-s3
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-aws-sqs
          module: aws-sqs
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-aws-sns
          module: aws-sns
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-box
          module: box
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-dropbox
          module: dropbox
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-email
          module: email
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-ftp
          module: ftp
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-fhir
          module: fhir
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-gmail
          module: gmail
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-google-calendar
          module: google-calendar
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-google-sheets
          module: google-sheets
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-http
          module: http
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-irc
          module: irc
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-jira
          module: jira
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-kafka
          module: kafka
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-log
          module: log
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-mqtt
          module: mqtt
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-rest-swagger
          module: rest-swagger
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-salesforce
          module: salesforce
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-sftp
          module: sftp
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-slack
          module: slack
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-soap
          module: soap
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-sql
          module: sql
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-telegram
          module: telegram
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-timer
          module: timer
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-twitter
          module: twitter
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-servicenow
          module: servicenow
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-webhook
          module: webhook
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-concur
          module: concur
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-kudu
          module: kudu
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-odata
          module: odata
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-knative
          module: knative
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-flow
          module: flow
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-mongodb
          module: mongodb
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
      - connector:
          name: connector-debezium
          module: debezium
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-support
            - connector-kafka
      - connector-catalog:
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-activemq
            - connector-api-provider
            - connector-amqp
            - connector-aws-ddb
            - connector-aws-s3
            - connector-aws-sqs
            - connector-aws-sns
            - connector-box
            - connector-dropbox
            - connector-email
            - connector-ftp
            - connector-fhir
            - connector-gmail
            - connector-google-calendar
            - connector-google-sheets
            - connector-http
            - connector-irc
            - connector-jira
            - connector-kafka
            - connector-log
            - connector-mqtt
            - connector-rest-swagger
            - connector-salesforce
            - connector-sftp
            - connector-slack
            - connector-soap
            - connector-sql
            - connector-telegram
            - connector-timer
            - connector-twitter
            - connector-servicenow
            - connector-webhook
            - connector-concur
            - connector-kudu
            - connector-odata
            - connector-knative
            - connector-flow
            - connector-mongodb
            - connector-debezium
      - meta:
          <<: *ignore_cherry_pick_branches
          requires:
            - connector-catalog
      - server:
          <<: *ignore_cherry_pick_branches
          requires:
            - integration
            - connector-catalog
            - common
      - dv:
          <<: *ignore_cherry_pick_branches
          requires:
            - server
      - s2i:
          <<: *ignore_cherry_pick_branches
          requires:
            - server
      - upgrade:
          filters:
            branches:
              only: master
          requires:
            - server
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - common
      - extension:
          requires:
            - common
      - integration:
          requires:
            - extension
      - connectors:
          requires:
            - integration
      - meta:
          requires:
            - connectors
      - server:
          requires:
            - connectors
      - dv:
          requires:
            - server
      - s2i:
          requires:
            - server
      - integration-test:
          requires:
            - s2i
