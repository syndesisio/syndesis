- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-rest
    labels:
      app: syndesis
      component: syndesis-rest
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-integration
    labels:
      app: syndesis
      component: syndesis-rest
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: syndesis
      component: syndesis-rest
    name: syndesis-rest
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: syndesis
      component: syndesis-rest{{#Probeless}}

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: syndesis
      component: syndesis-rest
    name: syndesis-rest
  spec:
    host: rest-${ROUTE_HOSTNAME}
    path: /api
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: syndesis-rest{{/Probeless}}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: syndesis
      component: syndesis-rest
    name: syndesis-rest
  spec:
    replicas: 1
    selector:
      app: syndesis
      component: syndesis-rest
      deploymentconfig: syndesis-rest
    strategy:
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
      type: Recreate
    template:
      metadata:
        labels:
          app: syndesis
          component: syndesis-rest
          deploymentconfig: syndesis-rest
      spec:
        serviceAccountName: syndesis-rest
        containers:
        - name: syndesis-rest
          env:
          - name: AB_JOLOKIA_OFF
            value: "true"
          - name: JAVA_APP_DIR
            value: /deployments
          - name: AB_OFF
            value: "true"
          - name: JAVA_OPTIONS
            value: "-Djava.net.preferIPv4Stack=true -Duser.home=/tmp"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ENDPOINTS_TEST_SUPPORT_ENABLED
            value: ${TEST_SUPPORT_ENABLED}
          - name: CONTROLLERS_INTEGRATION_ENABLED
            value: ${CONTROLLERS_INTEGRATION_ENABLED}
          - name: POSTGRESQL_SAMPLEDB_PASSWORD
            value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
{{#Debug}}
          - name: JAVA_DEBUG
            value: "true"
{{/Debug}}{{^WithDockerImages}}
          image: ' '
{{/WithDockerImages}}{{#WithDockerImages}}
          image: ${SYNDESIS_REGISTRY}/{{Images.SyndesisImagesPrefix}}/{{ Images.Syndesis.Rest }}:{{ Tags.Syndesis }}
{{/WithDockerImages}}
          imagePullPolicy: IfNotPresent
{{^Probeless}}
          livenessProbe:
            httpGet:
              port: 8080
              path: /api/v1/version
            initialDelaySeconds: 180
          readinessProbe:
            httpGet:
              path: "/health"
              port: 8181
            initialDelaySeconds: 10{{/Probeless}}
          ports:
          - containerPort: 8080
            name: http
          - containerPort: 9779
            name: prometheus
          - containerPort: 8778
            name: jolokia
          workingDir: /deployments
          volumeMounts:
          - name: config-volume
            mountPath: /deployments/config
          # Set QoS class to "Guaranteed" (limits == requests)
          # This doesn't work on OSO as there is a fixed ratio
          # from limit to resource (80% currently). 'requests' is ignored there
          resources:
            limits:
              memory: 612Mi
            requests:
              memory: 256Mi

        volumes:
        - name: config-volume
          configMap:
            name: syndesis-rest-config
    triggers:
{{^WithDockerImages}}
    - imageChangeParams:
        automatic: true
        containerNames:
        - syndesis-rest
        from:
          kind: ImageStreamTag
          name: {{ Images.Syndesis.Rest }}:{{ Tags.Syndesis }}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
{{/WithDockerImages}}
    - type: ConfigChange

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      component: syndesis-rest
    name: syndesis-rest-config
  data:
    application.yml: |-
      deployment:
        load-demo-data: ${DEMO_DATA_ENABLED}
      cors:
{{^AllowLocalHost}}
        allowedOrigins: https://${ROUTE_HOSTNAME}
{{/AllowLocalHost}}{{#AllowLocalHost}}
        allowedOrigins: http://localhost:4200, https://localhost:4200, https://${ROUTE_HOSTNAME}
{{/AllowLocalHost}}
      cache:
        cluster:
          name: SyndesisCluster
        max:
          entries: 100
      encrypt:
        key: ${SYNDESIS_ENCRYPT_KEY}
      spring:
        zipkin:
          enabled: false
        datasource:
          url: jdbc:postgresql://syndesis-db:5432/syndesis?sslmode=disable
          username: ${POSTGRESQL_USER}
          password: ${POSTGRESQL_PASSWORD}
          driver-class-name: org.postgresql.Driver
      security:
        basic:
          enabled: false
      management:
        port: 8181
        security:
          enabled: true
      endpoints:
        health:
          sensitive: false
        jsondb:
          enabled: true
{{#Productized}}
      maven:
        repositories:
          01_maven_central: https://repo1.maven.org/maven2
          02_redhat_ea_repository: https://maven.repository.redhat.com/earlyaccess/all
          03_jboss_ea: https://repository.jboss.org/nexus/content/groups/ea
{{/Productized}}      openshift:
        apiBaseUrl: ${OPENSHIFT_MASTER}/oapi/v1
        namespace: ${NAMESPACE}
        imageStreamNamespace: ${IMAGE_STREAM_NAMESPACE}
        builderImageStreamTag: {{ Images.S2i.ImageStream }}:{{ Images.S2i.Tag }}
        deploymentMemoryRequestMi: 200
        deploymentMemoryLimitMi: 512
        mavenOptions: "-XX:+UseG1GC -XX:+UseStringDeduplication -Xmx310m"
      dao:
        kind: jsondb
