/*
 * Copyright 2012-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE - DO NOT EDIT
 */

package {{packageName}};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.teiid.spring.data.mongodb.MongoDBTemplate;
import org.teiid.spring.data.mongodb.MongoDBConfiguration;
import org.teiid.spring.data.mongodb.MongoDBConnectionFactory;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;

@Configuration
@EnableAutoConfiguration(exclude = {MongoAutoConfiguration.class})
public class DataSources{{dsName}} {

    @Bean(name="{{dsName}}")
    @Autowired
    public MongoDBConnectionFactory {{dsName}}(@Qualifier("{{dsName}}-config") MongoDBConfiguration config) {
        MongoDBTemplate template = new MongoDBTemplate(config);
        return new MongoDBConnectionFactory(template);
    }

    @Bean(name="{{dsName}}-config")
    @ConfigurationProperties("spring.teiid.data.mongodb.{{dsName}}")
    public MongoDBConfiguration mongoConfig() {
        return new MongoDBConfiguration();
    }
}
