{
 "component": {
    "kind": "component",
    "scheme": "google-sheets-stream",
    "syntax": "google-sheets-stream:apiName",
    "title": "Google Sheets Stream",
    "description": "The google-sheets component provides access to Google Sheets.",
    "label": "api,cloud,sheets",
    "deprecated": false,
    "deprecationNote": "",
    "async": false,
    "consumerOnly": true,
    "producerOnly": false,
    "lenientProperties": false,
    "javaType": "org.apache.camel.component.google.sheets.stream.GoogleSheetsStreamComponent",
    "firstVersion": "2.23.0",
    "groupId": "org.apache.camel",
    "artifactId": "camel-google-sheets",
    "verifiers": "parameters,connectivity",
    "version": "2.23.0-SNAPSHOT"
  },
  "componentProperties": {
    "configuration": { "kind": "property", "displayName": "Configuration", "group": "consumer", "required": false, "type": "object", "javaType": "org.apache.camel.component.google.sheets.stream.GoogleSheetsStreamConfiguration", "deprecated": false, "secret": false, "description": "To use the shared configuration" },
    "clientFactory": { "kind": "property", "displayName": "Client Factory", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "org.apache.camel.component.google.sheets.GoogleSheetsClientFactory", "deprecated": false, "secret": false, "description": "To use the GoogleSheetsClientFactory as factory for creating the client. Will by default use BatchGoogleSheetsClientFactory" },
    "resolvePropertyPlaceholders": { "kind": "property", "displayName": "Resolve Property Placeholders", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders." }
  },
  "properties": {
    "apiName": { "kind": "path", "displayName": "Api Name", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Sets the apiName." },
    "accessToken": { "kind": "parameter", "displayName": "Access Token", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "OAuth 2 access token. This typically expires after an hour so refreshToken is recommended for long term usage." },
    "applicationName": { "kind": "parameter", "displayName": "Application Name", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Google sheets application name. Example would be camel-google-sheets/1.0" },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "clientId": { "kind": "parameter", "displayName": "Client Id", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Client ID of the sheets application" },
    "clientSecret": { "kind": "parameter", "displayName": "Client Secret", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Client secret of the sheets application" },
    "includeGridData": { "kind": "parameter", "displayName": "Include Grid Data", "group": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "True if grid data should be returned." },
    "majorDimension": { "kind": "parameter", "displayName": "Major Dimension", "group": "consumer", "type": "string", "javaType": "java.lang.String", "enum": [ "ROWS", "COLUMNS", "DIMENSION_UNSPECIFIED" ], "deprecated": false, "secret": false, "defaultValue": "ROWS", "description": "Specifies the major dimension that results should use.." },
    "maxResults": { "kind": "parameter", "displayName": "Max Results", "group": "consumer", "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 10, "description": "Specify the maximum number of returned results. This will limit the number of rows in a returned value range data set or the number of returned value ranges in a batch request." },
    "range": { "kind": "parameter", "displayName": "Range", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Specifies the range of rows and columns in a sheet to get data from." },
    "refreshToken": { "kind": "parameter", "displayName": "Refresh Token", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "OAuth 2 refresh token. Using this, the Google Calendar component can obtain a new accessToken whenever the current one expires - a necessity if the application is long-lived." },
    "scopes": { "kind": "parameter", "displayName": "Scopes", "group": "consumer", "type": "array", "javaType": "java.util.List<java.lang.String>", "deprecated": false, "secret": false, "description": "Specifies the level of permissions you want a sheets application to have to a user account. See https://developers.google.com/identity/protocols/googlescopes for more info." },
    "sendEmptyMessageWhenIdle": { "kind": "parameter", "displayName": "Send Empty Message When Idle", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead." },
    "splitResults": { "kind": "parameter", "displayName": "Split Results", "group": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "True if value range result should be split into rows or columns to process each of them individually. When true each row or column is represented with a separate exchange in batch processing. Otherwise value range object is used as exchange junk size." },
    "spreadsheetId": { "kind": "parameter", "displayName": "Spreadsheet Id", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Specifies the spreadsheet identifier that is used to identify the target to obtain." },
    "valueRenderOption": { "kind": "parameter", "displayName": "Value Render Option", "group": "consumer", "type": "string", "javaType": "java.lang.String", "enum": [ "FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA" ], "deprecated": false, "secret": false, "defaultValue": "FORMATTED_VALUE", "description": "Determines how values should be rendered in the output." },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "pollStrategy": { "kind": "parameter", "displayName": "Poll Strategy", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.PollingConsumerPollStrategy", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel." },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported)." },
    "backoffErrorThreshold": { "kind": "parameter", "displayName": "Backoff Error Threshold", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in." },
    "backoffIdleThreshold": { "kind": "parameter", "displayName": "Backoff Idle Threshold", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in." },
    "backoffMultiplier": { "kind": "parameter", "displayName": "Backoff Multiplier", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured." },
    "delay": { "kind": "parameter", "displayName": "Delay", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": 500, "description": "Milliseconds before the next poll. You can also specify time values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30 seconds), and 1h (1 hour)." },
    "greedy": { "kind": "parameter", "displayName": "Greedy", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages." },
    "initialDelay": { "kind": "parameter", "displayName": "Initial Delay", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": 1000, "description": "Milliseconds before the first poll starts. You can also specify time values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30 seconds), and 1h (1 hour)." },
    "runLoggingLevel": { "kind": "parameter", "displayName": "Run Logging Level", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": "TRACE", "description": "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that." },
    "scheduledExecutorService": { "kind": "parameter", "displayName": "Scheduled Executor Service", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.concurrent.ScheduledExecutorService", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool." },
    "scheduler": { "kind": "parameter", "displayName": "Scheduler", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "org.apache.camel.spi.ScheduledPollConsumerScheduler", "enum": [ "none", "spring", "quartz2" ], "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": "none", "description": "To use a cron scheduler from either camel-spring or camel-quartz2 component" },
    "schedulerProperties": { "kind": "parameter", "displayName": "Scheduler Properties", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "scheduler.", "multiValue": true, "deprecated": false, "secret": false, "description": "To configure additional properties when using a custom scheduler or any of the Quartz2, Spring based scheduler." },
    "startScheduler": { "kind": "parameter", "displayName": "Start Scheduler", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the scheduler should be auto started." },
    "timeUnit": { "kind": "parameter", "displayName": "Time Unit", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": "MILLISECONDS", "description": "Time unit for initialDelay and delay options." },
    "useFixedDelay": { "kind": "parameter", "displayName": "Use Fixed Delay", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": true, "description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details." }
  }
}

