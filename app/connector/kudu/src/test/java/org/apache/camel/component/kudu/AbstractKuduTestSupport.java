/*
 * Copyright (C) 2016 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.camel.component.kudu;

import io.syndesis.connector.kudu.model.KuduModelTable;
import org.apache.camel.CamelContext;
import org.apache.camel.CamelExecutionException;
import org.apache.camel.component.kudu.api.KuduTablesManager;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.apache.camel.util.IntrospectionSupport;
import org.apache.kudu.ColumnSchema;
import org.apache.kudu.Schema;
import org.apache.kudu.Type;
import org.apache.kudu.client.CreateTableOptions;
import org.apache.kudu.client.KuduClient;
import org.apache.kudu.client.KuduTable;
import java.io.IOException;
import java.util.*;

/**
 * Abstract base class for Kudu Integration tests generated by Camel API component maven plugin.
 */
public class AbstractKuduTestSupport extends CamelTestSupport {

    private static final String TEST_OPTIONS_PROPERTIES = "/test-options.properties";

    protected KuduTable testTable;

    @Override
    protected CamelContext createCamelContext() throws Exception {

        final CamelContext context = super.createCamelContext();

        // read Kudu component configuration from TEST_OPTIONS_PROPERTIES
        final Properties properties = new Properties();
        try {
            properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES));
        } catch (Exception e) {
            throw new IOException(String.format("%s could not be loaded: %s", TEST_OPTIONS_PROPERTIES, e.getMessage()),
                    e);
        }

        Map<String, Object> options = new HashMap<String, Object>();
        for (Map.Entry<Object, Object> entry : properties.entrySet()) {
            options.put(entry.getKey().toString(), entry.getValue());
        }

        final KuduConfiguration configuration = new KuduConfiguration();
        IntrospectionSupport.setProperties(configuration, options);

        // add KuduComponent to Camel context
        final KuduComponent component = new KuduComponent(context);
        component.setConfiguration(configuration);
        context.addComponent("kudu", component);

        return context;
    }

    @Override
    public boolean isCreateCamelContextPerClass() {
        // only create the context once for this class
        return true;
    }

    @SuppressWarnings("unchecked")
    protected Object requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers)
            throws CamelExecutionException {
        return template().requestBodyAndHeaders(endpointUri, body, headers);
    }

    @SuppressWarnings("unchecked")
    protected Object requestBody(String endpoint, Object body) throws CamelExecutionException {
        return template().requestBody(endpoint, body);
    }


    /**
     * Delete test table if it exists
     * @param tableName Table name
     */
    protected void deleteTestTable(String tableName) {
        KuduClient client = ((KuduComponent) context().getComponent("kudu")).getClient();
        if (this.testTable == null) {
            try {
                client.deleteTable(tableName);
            } catch (Throwable t) {

            }
            testTable = null;
        }
    }


    /**
     * Create a simple test table to be used in test cases. The only required parameter
     * is the name od the table, the rest will be generated automatically. The table has
     * two columns, a Int key, and a String value.
     *
     * @param name Table name
     * @return KuduModelTable ready to be used for inserting a table in kudu
     */
    protected KuduModelTable createTestKuduModelTable(String name) {
        /**
         * Create the schema with two colums, _key_ and _value_
         */
        List<ColumnSchema> columns = new ArrayList<>(2);
        columns.add(new ColumnSchema.ColumnSchemaBuilder("key", Type.INT32)
                .key(true)
                .build());
        columns.add(new ColumnSchema.ColumnSchemaBuilder("value", Type.STRING).nullable(true)
                .build());
        Schema schema = new Schema(columns);

        /**
         * Set up the partition schema, which distributes rows to different tablets by hash.
         * Kudu also supports partitioning by key range. Hash and range partitioning can be combined.
         * For more information, see http://kudu.apache.org/docs/schema_design.html.
         */
        CreateTableOptions cto = new CreateTableOptions();
        List<String> hashKeys = new ArrayList<>(1);
        hashKeys.add("key");
        int numBuckets = 8;
        cto.addHashPartitions(hashKeys, numBuckets);

        return new KuduModelTable(name, schema, cto);
    }

    /**
     * Create a table in kudu for testing purposed
     *
     * @param tableName Table name
     */
    protected void createTestTable(String tableName) {
        KuduClient client = ((KuduComponent) context().getComponent("kudu")).getClient();
        KuduModelTable apiTable = createTestKuduModelTable(tableName);
        if (this.testTable != null) {
            try {
                KuduTable table = new KuduTablesManager(client).createTable(apiTable);
                testTable = table;
            } catch (Throwable t) {

            }
        }
    }
}
