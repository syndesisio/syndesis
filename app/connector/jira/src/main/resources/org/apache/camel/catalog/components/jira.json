{
  "component": {
    "kind": "component",
    "scheme": "jira",
    "syntax": "jira:type",
    "title": "Jira",
    "description": "The jira component interacts with the JIRA issue tracker.",
    "label": "api,reporting",
    "deprecated": false,
    "deprecationNote": "",
    "async": false,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": false,
    "javaType": "org.apache.camel.component.jira.JiraComponent",
    "firstVersion": "2.21.0",
    "groupId": "org.apache.camel",
    "artifactId": "camel-jira",
    "version": "@project.version@"
  },
  "componentProperties": {
    "configuration": { "kind": "property", "displayName": "Configuration", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "org.apache.camel.component.jira.JiraConfiguration", "deprecated": false, "secret": false, "description": "The JiraConfiguration parameters" },
    "resolvePropertyPlaceholders": { "kind": "property", "displayName": "Resolve Property Placeholders", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders." }
  },
  "properties": {
    "type": { "kind": "path", "displayName": "Type", "group": "common", "required": true, "type": "object", "javaType": "org.apache.camel.component.jira.JiraType", "enum": [ "ADDCOMMENT", "ADDISSUE", "ATTACH", "DELETEISSUE", "NEWISSUE", "NEWISSUES", "NEWCOMMENT", "NEWCOMMENTS", "UPDATEISSUE", "TRANSITIONISSUE", "WATCHERS" ], "deprecated": false, "secret": false, "description": "Operation to perform. Consumers: NewIssues, NewComments. Producers: AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue, Watchers. See this class javadoc description for more information." },
    "delay": { "kind": "parameter", "displayName": "Delay", "group": "common", "type": "integer", "javaType": "java.lang.Integer", "deprecated": false, "secret": false, "defaultValue": 6000, "description": "Time in milliseconds to elapse for the next poll." },
    "jiraUrl": { "kind": "parameter", "displayName": "Jira Url", "group": "common", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "The Jira server url, example: http://my_jira.com:8081" },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "jql": { "kind": "parameter", "displayName": "Jql", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "JQL is the query language from JIRA which allows you to retrieve the data you want. For example jql=project=MyProject Where MyProject is the product key in Jira. It is important to use the RAW() and set the JQL inside it to prevent camel parsing it, example: RAW(project in (MYP, COM) AND resolution = Unresolved)" },
    "maxResults": { "kind": "parameter", "displayName": "Max Results", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": false, "secret": false, "defaultValue": 50, "description": "Max number of issues to search for" },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported)." },
    "accessToken": { "kind": "parameter", "displayName": "Access Token", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "description": "(OAuth only) The access token generated by the Jira server." },
    "consumerKey": { "kind": "parameter", "displayName": "Consumer Key", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "description": "(OAuth only) The consumer key from Jira settings." },
    "password": { "kind": "parameter", "displayName": "Password", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "description": "(Basic authentication only) The password to authenticate to the Jira server. Use only if username basic authentication is used." },
    "privateKey": { "kind": "parameter", "displayName": "Private Key", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "description": "(OAuth only) The private key generated by the client to encrypt the conversation to the server." },
    "username": { "kind": "parameter", "displayName": "Username", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "description": "(Basic authentication only) The username to authenticate to the Jira server. Use only if OAuth is not enabled on the Jira server. Do not set the username and OAuth token parameter, if they are both set, the username basic authentication takes precedence." },
    "verificationCode": { "kind": "parameter", "displayName": "Verification Code", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "description": "(OAuth only) The verification code from Jira generated in the first step of the authorization proccess." }
  }
}
