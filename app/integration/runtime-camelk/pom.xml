<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (C) 2016 Red Hat, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.syndesis.integration</groupId>
    <artifactId>integration-parent</artifactId>
    <version>1.6-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>integration-runtime-camelk</artifactId>
  <name>Integration :: Runtime :: Camel-k</name>
  <packaging>jar</packaging>


  <dependencies>
    <!-- common -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>

    <!-- syndesis -->
    <dependency>
      <groupId>io.syndesis.common</groupId>
      <artifactId>common-util</artifactId>
    </dependency>
    <dependency>
      <groupId>io.syndesis.integration</groupId>
      <artifactId>integration-runtime</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.el</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- camel -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-http-common</artifactId>
    </dependency>

    <!-- set atlasmap as always required runtime dependency-->
    <dependency>
      <groupId>io.atlasmap</groupId>
      <artifactId>camel-atlasmap</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- camel-k -->
    <dependency>
      <groupId>org.apache.camel.k</groupId>
      <artifactId>camel-k-runtime-core</artifactId>
      <version>${camel-k-runtime.version}</version>
    </dependency>

    <dependency>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-annotations</artifactId>
    </dependency>

    <!-- test -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>analyze</id>
            <goals>
              <goal>analyze-only</goal>
            </goals>
            <configuration>

              <ignoredDependencies>
                <ignoredDependency>io.syndesis.connector</ignoredDependency>
              </ignoredDependencies>

            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
          <groupId>org.apache.camel.k</groupId>
          <artifactId>camel-k-maven-plugin</artifactId>
          <version>${camel-k-runtime.version}</version>
          <executions>
              <execution>
                  <id>generate-catalog</id>
                  <phase>initialize</phase>
                  <goals>
                      <goal>generate-catalog</goal>
                  </goals>
              </execution>
          </executions>
          <configuration>
            <outputPath>${project.build.directory}/</outputPath>
            <outputFile>camel-catalog-${camel.version}.yaml</outputFile>
          </configuration>
          <dependencies>
              <dependency>
                  <groupId>org.apache.camel</groupId>
                  <artifactId>camel-catalog</artifactId>
                  <version>${camel.version}</version>
              </dependency>
          </dependencies>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>${project.build.directory}/camel-catalog-${camel.version}.yaml</file>
                  <classifier>catalog</classifier>
                  <type>yaml</type>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>dependency-prepare</id>
      <dependencies>
        <dependency>
          <groupId>io.syndesis.connector</groupId>
          <artifactId>connector-timer</artifactId>
        </dependency>
        <dependency>
          <groupId>io.syndesis.connector</groupId>
          <artifactId>connector-log</artifactId>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <!--This is to generate dependencies folder
          containing a maven like repository with all the dependencies of the current project-->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-dependencies</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/dependencies</outputDirectory>
                  <overWriteReleases>false</overWriteReleases>
                  <overWriteSnapshots>false</overWriteSnapshots>
                  <overWriteIfNewer>true</overWriteIfNewer>
                  <includeScope>compile</includeScope>
                  <useRepositoryLayout>true</useRepositoryLayout>
                  <addParentPoms>true</addParentPoms>
                  <copyPom>true</copyPom>
                  <includeScope>runtime</includeScope>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!--This is adding to generate dependencies folder this project's jar as wellt-->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-install-plugin</artifactId>
            <configuration>
              <groupId>${project.groupId}</groupId>
              <artifactId>${project.artifactId}</artifactId>
              <version>${project.version}</version>
              <packaging>${project.packaging}</packaging>
              <file>${project.build.directory}/${project.artifactId}-${project.version}.${project.packaging}</file>
              <localRepositoryPath>${project.build.directory}/dependencies/</localRepositoryPath>
              <generatePom>false</generatePom>
              <pomFile>${project.basedir}/pom.xml</pomFile>
            </configuration>
            <executions>
              <execution>
                <id>install-jar-lib</id>
                <goals>
                  <goal>install-file</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>analyze</id>
                <goals>
                  <goal>analyze-only</goal>
                </goals>
                <configuration>
                  <failOnWarning>false</failOnWarning>

                  <!-- ignore jsr305 for both "used but undeclared" and "declared but unused" -->
                  <ignoredDependencies>
                    <ignoredDependency>io.syndesis.connector</ignoredDependency>
                  </ignoredDependencies>

                  <!-- ignore annotations for "used but undeclared" warnings -->
                  <ignoredUsedUndeclaredDependencies>
                    <ignoredUsedUndeclaredDependency>io.syndesis.connector</ignoredUsedUndeclaredDependency>
                  </ignoredUsedUndeclaredDependencies>

                  <!-- ignore annotations for "unused but declared" warnings -->
                  <ignoredUnusedDeclaredDependencies>
                    <ignoredUnusedDeclaredDependency>io.syndesis.connector</ignoredUnusedDeclaredDependency>
                  </ignoredUnusedDeclaredDependencies>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
