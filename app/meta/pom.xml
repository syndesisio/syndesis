<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (C) 2016 Red Hat, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.syndesis</groupId>
    <artifactId>syndesis-parent</artifactId>
    <version>1.3.11-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <groupId>io.syndesis.meta</groupId>
  <artifactId>meta</artifactId>
  <name>Meta</name>
  <properties>
    <license.dir>${project.basedir}/src/main/resources/licenses</license.dir>
    <license.output.dir>${project.build.directory}/licenses</license.output.dir>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- === Internal dependencies (don't touch without discussion) ========================== -->

    <dependency>
      <groupId>io.syndesis.common</groupId>
      <artifactId>common-util</artifactId>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-support-verifier</artifactId>
    </dependency>

    <dependency>
      <groupId>io.syndesis.common</groupId>
      <artifactId>common-model</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- ===================================================================================== -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-undertow</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>com.paypal.springboot</groupId>
      <artifactId>resteasy-spring-boot-starter</artifactId>
      <version>${resteasy-spring-boot-starter.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- =========================================================== -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-autoconfigure</artifactId>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
    </dependency>

    <dependency>
      <groupId>io.swagger</groupId>
      <artifactId>swagger-jaxrs</artifactId>
      <version>${swagger.version}</version>
      <exclusions>
        <exclusion>
          <groupId>javax.ws.rs</groupId>
          <artifactId>jsr311-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.2_spec</artifactId>
      <version>1.0.0.Final</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jaxrs</artifactId>
      <version>${resteasy.version}</version>
    </dependency>

    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-multipart-provider</artifactId>
      <version>${resteasy.version}</version>
      <exclusions>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.jboss.spec.javax.ws.rs</groupId>
      <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
    </dependency>

    <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.el</artifactId>
    </dependency>

    <!-- === Connectors ================================================================== -->

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
    </dependency>

    <!-- Redefine Activemq deps to override ones from spring-boot pom import -->
    <dependency>
      <groupId>org.apache.activemq</groupId>
      <artifactId>activemq-client</artifactId>
      <exclusions>
        <!-- avoid conflict with AMQP connector's JMS 2.0 dependency -->
        <exclusion>
          <groupId>org.apache.geronimo.specs</groupId>
          <artifactId>geronimo-jms_1.1_spec</artifactId>
        </exclusion>
      </exclusions>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.activemq</groupId>
      <artifactId>activemq-openwire-legacy</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-activemq</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-amqp</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-ftp</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-sftp</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-dropbox</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-aws-s3</artifactId>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-twitter</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-sql</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-mqtt</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-http</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-slack</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.syndesis.connector</groupId>
      <artifactId>connector-salesforce</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- === Testing Dependencies ======================================================== -->

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.skyscreamer</groupId>
      <artifactId>jsonassert</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.vaadin.external.google</groupId>
      <artifactId>android-json</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring-boot.version}</version>
        <configuration>
          <jvmArguments>-server -Xms256m -Xmx512m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000</jvmArguments>
          <layout>ZIP</layout>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
              <goal>build-info</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.basepom.maven</groupId>
        <artifactId>duplicate-finder-maven-plugin</artifactId>
        <configuration>
          <printEqualFiles>false</printEqualFiles>
          <ignoredResourcePatterns>
            <ignore>camel-component-schema.json</ignore>
            <ignore>camel-connector-schema.json</ignore>
            <ignore>camel-connector.json</ignore>
            <ignore>git.properties</ignore>
          </ignoredResourcePatterns>
          <ignoredDependencies>
            <ignoredDependency>
              <groupId>org.apache.camel</groupId>
              <artifactId>spi-annotations</artifactId>
            </ignoredDependency>
            <ignoredDependency>
              <groupId>com.vaadin.external.google</groupId>
              <artifactId>android-json</artifactId>
            </ignoredDependency>
            <ignoredDependency>
              <groupId>xpp3</groupId>
              <artifactId>xpp3_min</artifactId>
            </ignoredDependency>
          </ignoredDependencies>
          <ignoredClassPatterns>
            <ignored>org.apache.camel.json.simple.*</ignored>
          </ignoredClassPatterns>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <configuration>
          <ignoredUnusedDeclaredDependencies>
            <!--
                This is shipped alongside spring-boot-starter-undertow but such artifact has
                scope 'runtime' so javax.el is not used for testing purpose, setting javax.el
                to have scope 'test' would make the javax.el not available at runtime.
            -->
            <ignoredUnusedDeclaredDependency>org.glassfish:javax.el</ignoredUnusedDeclaredDependency>
          </ignoredUnusedDeclaredDependencies>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.hubspot.maven.plugins</groupId>
        <artifactId>dependency-management-maven-plugin</artifactId>
        <configuration>
          <requireManagement>
            <allowExclusions>true</allowExclusions>
          </requireManagement>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <profile>
      <id>image</id>
      <activation>
        <property>
          <name>::image</name>
        </property>
      </activation>
      <properties>
        <fabric8.generator.name>${image.meta}</fabric8.generator.name>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>fabric8-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build</id>
                <goals>
                  <goal>build</goal>
                </goals>
                <phase>package</phase>
                <configuration>

                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
	<profile>
      <id>generate-licenses-xml</id>
	  <build>
	  <plugins>
	    <plugin>
	      <groupId>org.codehaus.mojo</groupId>
	      <artifactId>license-maven-plugin</artifactId>
	      <executions>
	        <execution>
	          <goals>
	            <goal>aggregate-download-licenses</goal>
	          </goals>
	          <phase>generate-resources</phase>
	          <configuration>
	            <licensesOutputDirectory>${license.dir}/licenses</licensesOutputDirectory>
	            <licensesOutputFile>${license.dir}/licenses.xml</licensesOutputFile>
	          </configuration>
	        </execution>
	      </executions>
	    </plugin>
	  </plugins>
	  </build>
    </profile>
  </profiles>

</project>
