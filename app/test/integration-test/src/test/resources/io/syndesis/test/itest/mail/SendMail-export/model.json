{
  "connections": {
    ":5": {
      "configuredProperties": {
        "password": "Â»ENC:3b8eb1233c76249873c3562340abab511e5cdd590e0c5399a95fc2742336aa8112b84ecc9e5f56d91ff2f5a21d28c2f4",
        "schema": "sampledb",
        "url": "jdbc:postgresql://syndesis-db:5432/sampledb",
        "user": "sampledb"
      },
      "connector": {
        "actions": [
          {
            "actionType": "connector",
            "description": "Invoke SQL to obtain, store, update, or delete data.",
            "descriptor": {
              "componentScheme": "sql",
              "connectorCustomizers": [
                "io.syndesis.connector.sql.customizer.SqlConnectorCustomizer"
              ],
              "inputDataShape": {
                "kind": "json-schema"
              },
              "outputDataShape": {
                "kind": "json-schema"
              },
              "propertyDefinitionSteps": [
                {
                  "description": "Enter a SQL statement that starts with INSERT, SELECT, UPDATE or DELETE.",
                  "name": "SQL statement",
                  "properties": {
                    "batch": {
                      "defaultValue": false,
                      "deprecated": false,
                      "displayName": "Batch update",
                      "group": "common",
                      "javaType": "java.lang.Boolean",
                      "kind": "property",
                      "labelHint": "Use prepared statements for INSERT, UPDATE, DELETE in order to update multiple rows with batch update.",
                      "order": 2,
                      "required": false,
                      "secret": false,
                      "type": "boolean"
                    },
                    "query": {
                      "deprecated": false,
                      "displayName": "SQL statement",
                      "group": "common",
                      "javaType": "java.lang.String",
                      "kind": "path",
                      "labelHint": "SQL statement to be executed. Can contain input parameters prefixed by ':#'.",
                      "order": 1,
                      "placeholder": "for example ':#MYPARAMNAME'",
                      "required": true,
                      "secret": false,
                      "type": "dataList"
                    },
                    "raiseErrorOnNotFound": {
                      "defaultValue": false,
                      "deprecated": false,
                      "displayName": "Raise error when record not found",
                      "group": "common",
                      "javaType": "java.lang.Boolean",
                      "kind": "property",
                      "labelHint": "Error when no records are selected, updated or deleted",
                      "order": 3,
                      "required": false,
                      "secret": false,
                      "type": "boolean"
                    }
                  }
                }
              ],
              "standardizedErrors": [
                {
                  "displayName": "DataAccessError",
                  "name": "DATA_ACCESS_ERROR"
                },
                {
                  "displayName": "EntityNotFoundError",
                  "name": "ENTITY_NOT_FOUND_ERROR"
                },
                {
                  "displayName": "DuplicateKeyError",
                  "name": "DUPLICATE_KEY_ERROR"
                },
                {
                  "displayName": "ConnectorError",
                  "name": "CONNECTOR_ERROR"
                }
              ]
            },
            "id": "sql-connector",
            "name": "Invoke SQL",
            "pattern": "To",
            "tags": [
              "dynamic"
            ]
          },
          {
            "actionType": "connector",
            "description": "Periodically invoke SQL to obtain data.",
            "descriptor": {
              "componentScheme": "sql",
              "connectorCustomizers": [
                "io.syndesis.connector.sql.customizer.SqlStartConnectorCustomizer"
              ],
              "inputDataShape": {
                "kind": "none"
              },
              "outputDataShape": {
                "kind": "json-schema"
              },
              "propertyDefinitionSteps": [
                {
                  "description": "Enter a SQL statement that returns results, such as SELECT.",
                  "name": "SQL statement",
                  "properties": {
                    "isRaiseErrorOnNotFound": {
                      "deprecated": false,
                      "displayName": "Raise NotFoundError",
                      "group": "consumer",
                      "javaType": "java.lang.Boolean",
                      "kind": "parameter",
                      "labelHint": "Raise NotFoundError if no records are inserted, updated, selected or deleted",
                      "order": 3,
                      "required": false,
                      "secret": false,
                      "type": "boolean"
                    },
                    "query": {
                      "deprecated": false,
                      "displayName": "SQL statement",
                      "group": "common",
                      "javaType": "java.lang.String",
                      "kind": "path",
                      "labelHint": "SQL statement to be executed.",
                      "order": 1,
                      "required": true,
                      "secret": false,
                      "type": "dataList"
                    },
                    "schedulerExpression": {
                      "defaultValue": 60000,
                      "deprecated": false,
                      "displayName": "Period",
                      "group": "consumer",
                      "javaType": "long",
                      "kind": "parameter",
                      "labelHint": "Delay between scheduling (executing).",
                      "order": 2,
                      "required": false,
                      "secret": false,
                      "type": "duration"
                    }
                  }
                }
              ]
            },
            "id": "sql-start-connector",
            "name": "Periodic SQL invocation",
            "pattern": "From",
            "tags": [
              "dynamic"
            ]
          },
          {
            "actionType": "connector",
            "description": "Invoke a stored procedure.",
            "descriptor": {
              "componentScheme": "sql-stored",
              "connectorCustomizers": [
                "io.syndesis.connector.sql.customizer.SqlStoredConnectorCustomizer"
              ],
              "inputDataShape": {
                "kind": "json-schema"
              },
              "outputDataShape": {
                "kind": "json-schema"
              },
              "propertyDefinitionSteps": [
                {
                  "description": "Select the stored procedure.",
                  "name": "Procedure name",
                  "properties": {
                    "procedureName": {
                      "componentProperty": true,
                      "deprecated": false,
                      "displayName": "Procedure name",
                      "group": "common",
                      "javaType": "java.lang.String",
                      "kind": "property",
                      "labelHint": "Name of the stored procedure.",
                      "required": false,
                      "secret": false,
                      "type": "select"
                    },
                    "template": {
                      "componentProperty": false,
                      "deprecated": false,
                      "displayName": "Template",
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "path",
                      "labelHint": "Stored procedure template to perform.",
                      "required": false,
                      "secret": false,
                      "type": "hidden"
                    }
                  }
                }
              ]
            },
            "id": "sql-stored-connector",
            "name": "Invoke stored procedure",
            "pattern": "To",
            "tags": [
              "dynamic"
            ]
          },
          {
            "actionType": "connector",
            "description": "Periodically invoke a stored procedure.",
            "descriptor": {
              "componentScheme": "sql-stored",
              "connectorCustomizers": [
                "io.syndesis.connector.sql.customizer.SqlStartStoredConnectorCustomizer"
              ],
              "inputDataShape": {
                "kind": "none"
              },
              "outputDataShape": {
                "kind": "json-schema"
              },
              "propertyDefinitionSteps": [
                {
                  "description": "Select the stored procedure.",
                  "name": "Procedure name",
                  "properties": {
                    "procedureName": {
                      "componentProperty": true,
                      "deprecated": false,
                      "displayName": "Procedure name",
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "path",
                      "labelHint": "Name of the stored procedure.",
                      "required": true,
                      "secret": false,
                      "type": "select"
                    },
                    "schedulerExpression": {
                      "defaultValue": 60000,
                      "deprecated": false,
                      "displayName": "Period",
                      "group": "consumer",
                      "javaType": "long",
                      "kind": "parameter",
                      "labelHint": "Delay between scheduling (executing).",
                      "required": false,
                      "secret": false,
                      "type": "duration"
                    },
                    "template": {
                      "componentProperty": false,
                      "deprecated": false,
                      "displayName": "Template",
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "path",
                      "labelHint": "Stored Procedure template to perform.",
                      "required": true,
                      "secret": false,
                      "type": "hidden"
                    }
                  }
                }
              ]
            },
            "id": "sql-stored-start-connector",
            "name": "Periodic stored procedure invocation",
            "pattern": "From",
            "tags": [
              "dynamic"
            ]
          }
        ],
        "connectorCustomizers": [
          "io.syndesis.connector.sql.customizer.DataSourceCustomizer"
        ],
        "dependencies": [
          {
            "id": "io.syndesis.connector:connector-sql:1.10-SNAPSHOT",
            "type": "MAVEN"
          },
          {
            "id": "jdbc-driver",
            "type": "EXTENSION_TAG"
          }
        ],
        "description": "Invoke SQL to obtain, store, update, or delete data.",
        "icon": "assets:sql.svg",
        "id": "sql",
        "name": "Database",
        "properties": {
          "password": {
            "componentProperty": true,
            "deprecated": false,
            "displayName": "Password",
            "group": "security",
            "javaType": "java.lang.String",
            "kind": "property",
            "label": "common,security",
            "labelHint": "Password for the database connection.",
            "order": 3,
            "required": true,
            "secret": true,
            "type": "string"
          },
          "schema": {
            "componentProperty": true,
            "deprecated": false,
            "displayName": "Schema",
            "group": "common",
            "javaType": "java.lang.String",
            "kind": "property",
            "label": "common",
            "labelHint": "Database schema.",
            "order": 4,
            "required": false,
            "secret": false,
            "type": "string"
          },
          "url": {
            "componentProperty": true,
            "deprecated": false,
            "displayName": "Connection URL",
            "group": "common",
            "javaType": "java.lang.String",
            "kind": "property",
            "labelHint": "JDBC URL of the database.",
            "order": 1,
            "required": true,
            "secret": false,
            "type": "string"
          },
          "user": {
            "componentProperty": true,
            "deprecated": false,
            "displayName": "Username",
            "group": "common",
            "javaType": "java.lang.String",
            "kind": "property",
            "labelHint": "Username for the database connection.",
            "order": 2,
            "required": true,
            "secret": false,
            "type": "string"
          }
        },
        "tags": [
          "verifier"
        ],
        "version": 6
      },
      "connectorId": "sql",
      "description": "Connection to SampleDB",
      "icon": "assets:sql.svg",
      "id": "5",
      "isDerived": false,
      "name": "PostgresDB",
      "tags": [
        "sampledb"
      ],
      "uses": 0
    },
    ":i-LhL2-ccjv5WqGyjCaVVz": {
      "configuredProperties": {
        "host": "syndesis.smtp.de",
        "password": "Â»ENC:6ec3220f0f7350917574e1f34bbe71cd3543a36ec59c982ed035240590d5730c",
        "port": "2525",
        "secureType": "None",
        "username": "syndesis"
      },
      "connector": {
        "actions": [
          {
            "actionType": "connector",
            "description": "Send messages to the email account that this connection is authorized to access.",
            "descriptor": {
              "connectorCustomizers": [
                "io.syndesis.connector.email.customizer.EMailSendCustomizer"
              ],
              "connectorFactory": "io.syndesis.connector.email.component.EMailComponentFactory",
              "inputDataShape": {
                "kind": "java",
                "name": "EmailMessage",
                "specification": "{\"JavaClass\":{\"jsonType\":\"io.atlasmap.java.v2.JavaClass\",\"collectionType\":\"NONE\",\"path\":\"/\",\"fieldType\":\"COMPLEX\",\"modifiers\":{\"modifier\":[\"FINAL\",\"PUBLIC\"]},\"className\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"canonicalClassName\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"primitive\":false,\"synthetic\":false,\"javaEnumFields\":{\"javaEnumField\":[]},\"javaFields\":{\"javaField\":[{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/subject\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"subject\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getSubject\",\"setMethod\":\"setSubject\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/from\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"from\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getFrom\",\"setMethod\":\"setFrom\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/to\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"to\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getTo\",\"setMethod\":\"setTo\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/cc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"cc\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getCc\",\"setMethod\":\"setCc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/bcc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"bcc\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getBcc\",\"setMethod\":\"setBcc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/content\",\"status\":\"SUPPORTED\",\"fieldType\":\"ANY\",\"name\":\"content\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.Object\",\"canonicalClassName\":\"java.lang.Object\",\"getMethod\":\"getContent\",\"setMethod\":\"setContent\",\"primitive\":false,\"synthetic\":false}]},\"packageName\":\"io.syndesis.connector.email.model\",\"annotation\":false,\"annonymous\":false,\"enumeration\":false,\"localClass\":false,\"memberClass\":false,\"uri\":\"atlas:java?className=io.syndesis.connector.email.model.EMailMessageModel\",\"interface\":false}}",
                "type": "io.syndesis.connector.email.model.EMailMessageModel"
              },
              "outputDataShape": {
                "kind": "none"
              },
              "propertyDefinitionSteps": [
                {
                  "description": "Specify the email messages that you want to send.",
                  "name": "Send messages to Email",
                  "properties": {
                    "bcc": {
                      "deprecated": false,
                      "displayName": "Email bcc",
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "producer",
                      "labelHint": "One or more comma-separated email addresses to send a blind copy of the email to.",
                      "order": 6,
                      "required": false,
                      "secret": false,
                      "type": "string"
                    },
                    "cc": {
                      "deprecated": false,
                      "displayName": "Email cc",
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "producer",
                      "labelHint": "One or more comma-separated email addresses to send a copy of the email to.",
                      "order": 5,
                      "required": false,
                      "secret": false,
                      "type": "string"
                    },
                    "from": {
                      "deprecated": false,
                      "displayName": "Email from",
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "producer",
                      "labelHint": "Email address of the sender (must be valid email address to avoid sender verification failure)",
                      "order": 2,
                      "required": true,
                      "secret": false,
                      "type": "string"
                    },
                    "priority": {
                      "defaultValue": "injectedData",
                      "deprecated": false,
                      "displayName": "Parameter Priority",
                      "enum": [
                        {
                          "label": "Input Values",
                          "value": "inputValues"
                        },
                        {
                          "label": "Consumed Data",
                          "value": "consumedData"
                        }
                      ],
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "producer",
                      "labelHint": "Whether the input values above or the consumed data gets priority in being applied to the generated emails",
                      "order": 7,
                      "required": false,
                      "secret": false,
                      "type": "string"
                    },
                    "subject": {
                      "deprecated": false,
                      "displayName": "Email subject",
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "producer",
                      "labelHint": "The text to insert in the subject line of the email.",
                      "order": 3,
                      "required": false,
                      "secret": false,
                      "type": "string"
                    },
                    "text": {
                      "deprecated": false,
                      "displayName": "Email text",
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "producer",
                      "labelHint": "The email message that you want to send.",
                      "order": 4,
                      "required": false,
                      "secret": false,
                      "type": "textarea"
                    },
                    "to": {
                      "deprecated": false,
                      "displayName": "Email to",
                      "group": "producer",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "producer",
                      "labelHint": "One or more comma-separated email addresses to send the email to.",
                      "order": 1,
                      "required": false,
                      "secret": false,
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "id": "io.syndesis:email-send-connector",
            "name": "Send Email",
            "pattern": "To"
          }
        ],
        "componentScheme": "email-send",
        "configuredProperties": {
          "protocol": "smtp"
        },
        "dependencies": [
          {
            "id": "io.syndesis.connector:connector-email:1.10-SNAPSHOT",
            "type": "MAVEN"
          }
        ],
        "description": "Send email messages.",
        "icon": "assets:email-send.svg",
        "id": "email-send",
        "name": "Send Email (smtp)",
        "properties": {
          "host": {
            "componentProperty": true,
            "deprecated": false,
            "description": "The hostname of the email server.",
            "displayName": "Email Host Name",
            "group": "common",
            "javaType": "java.lang.String",
            "kind": "parameter",
            "label": "common",
            "order": 1,
            "required": true,
            "secret": false,
            "type": "string"
          },
          "password": {
            "componentProperty": true,
            "deprecated": false,
            "displayName": "Password",
            "group": "security",
            "javaType": "java.lang.String",
            "kind": "parameter",
            "label": "common,security",
            "labelHint": "Specify the password for the email account that this connection is authorized to access.",
            "order": 4,
            "required": true,
            "secret": true,
            "type": "string"
          },
          "port": {
            "componentProperty": true,
            "deprecated": false,
            "description": "The port of the email server.",
            "displayName": "Email Server Port Number",
            "group": "common",
            "javaType": "java.lang.Integer",
            "kind": "parameter",
            "label": "common",
            "order": 2,
            "required": true,
            "secret": false,
            "type": "integer"
          },
          "secureType": {
            "componentProperty": true,
            "defaultValue": "None",
            "deprecated": false,
            "displayName": "Security Method",
            "enum": [
              {
                "label": "None",
                "value": "None"
              },
              {
                "label": "StartTLS",
                "value": "StartTLS"
              },
              {
                "label": "SSL / TLS",
                "value": "SSL/TLS"
              }
            ],
            "group": "security",
            "javaType": "java.lang.String",
            "kind": "parameter",
            "label": "security",
            "labelHint": "Specify what security protocol (if any) the connection requires",
            "order": 5,
            "required": false,
            "secret": false,
            "type": "string"
          },
          "serverCertificate": {
            "componentProperty": true,
            "deprecated": false,
            "description": "If the SSL email server is internal and possesses a self-signed certificate then enable SSL by adding the certificate here.",
            "displayName": "Server Certificate",
            "group": "security",
            "javaType": "java.lang.String",
            "kind": "parameter",
            "label": "common,security",
            "order": 6,
            "relation": [
              {
                "action": "DISABLE",
                "when": [
                  {
                    "id": "secureType",
                    "value": "None"
                  }
                ]
              }
            ],
            "required": false,
            "secret": false,
            "type": "textarea"
          },
          "username": {
            "componentProperty": true,
            "deprecated": false,
            "displayName": "User Name",
            "group": "security",
            "javaType": "java.lang.String",
            "kind": "parameter",
            "label": "common,security",
            "labelHint": "Specify the user name for the email account that this connection is authorized to access.",
            "order": 3,
            "required": true,
            "secret": false,
            "type": "string"
          }
        },
        "tags": [
          "verifier"
        ],
        "version": 6
      },
      "connectorId": "email-send",
      "createdDate": 1560516758048,
      "icon": "assets:email-send.svg",
      "id": "i-LhL2-ccjv5WqGyjCaVVz",
      "isDerived": false,
      "lastUpdated": 1586944455246,
      "name": "SMTP",
      "userId": "developer",
      "uses": 0
    },
    ":webhook": {
      "connector": {
        "actions": [
          {
            "actionType": "connector",
            "description": "Start an integration from a Webhook",
            "descriptor": {
              "componentScheme": "servlet",
              "configuredProperties": {
                "headerFilterStrategy": "syndesisHeaderStrategy",
                "httpMethodRestrict": "GET,POST"
              },
              "connectorCustomizers": [
                "io.syndesis.connector.webhook.WebhookConnectorCustomizer"
              ],
              "exceptionHandler": "io.syndesis.connector.webhook.WebhookOnExceptionHandler",
              "inputDataShape": {
                "kind": "none"
              },
              "outputDataShape": {
                "kind": "any"
              },
              "propertyDefinitionSteps": [
                {
                  "description": "Webhook Configuration",
                  "name": "configuration",
                  "properties": {
                    "contextPath": {
                      "componentProperty": false,
                      "deprecated": false,
                      "description": "The Webhook token that will be set as final part of the URL",
                      "displayName": "Webhook Token",
                      "generator": "alphanum:50",
                      "javaType": "String",
                      "kind": "parameter",
                      "order": 0,
                      "required": true,
                      "secret": false,
                      "tags": [
                        "context-path"
                      ],
                      "type": "string"
                    },
                    "defaultResponse": {
                      "componentProperty": false,
                      "deprecated": false,
                      "displayName": "Default Response",
                      "javaType": "String",
                      "kind": "parameter",
                      "order": 1,
                      "required": false,
                      "secret": false,
                      "type": "legend"
                    },
                    "errorHandling": {
                      "componentProperty": false,
                      "deprecated": false,
                      "displayName": "Error Handling",
                      "javaType": "String",
                      "kind": "parameter",
                      "order": 3,
                      "required": false,
                      "secret": false,
                      "type": "legend"
                    },
                    "errorResponseCodes": {
                      "componentProperty": false,
                      "defaultValue": "{}",
                      "deprecated": false,
                      "description": "The return code to set according to different error situations",
                      "displayName": "Error Response Codes",
                      "extendedProperties": "{ \"mapsetValueDefinition\": {   \"enum\" : [{\"label\":\"400 Bad Request\",\"value\":\"400\"},{\"label\":\"404 Not Found\",\"value\":\"404\"},{\"label\":\"405 Method Not Allowed\",\"value\":\"405\"},{\"label\":\"409 Conflict\",\"value\":\"409\"},{\"label\":\"500 Server Error\",\"value\":\"500\"},{\"label\":\"501 Not Implemented\",\"value\":\"501\"},{\"label\":\"503 Service Unavailable\",\"value\":\"503\"}],    \"type\" : \"select\" },\"mapsetOptions\": {    \"i18nKeyColumnTitle\": \"When the error message is\",    \"i18nValueColumnTitle\": \"Return this HTTP response code\" }}",
                      "javaType": "Map",
                      "kind": "parameter",
                      "order": 5,
                      "required": false,
                      "secret": false,
                      "type": "mapset"
                    },
                    "httpResponseCode": {
                      "componentProperty": false,
                      "deprecated": false,
                      "description": "The return code to set in the HTTP response",
                      "displayName": "Return Code",
                      "enum": [
                        {
                          "label": "200 OK",
                          "value": "200"
                        },
                        {
                          "label": "201 Created",
                          "value": "201"
                        },
                        {
                          "label": "202 Accepted",
                          "value": "202"
                        },
                        {
                          "label": "204 No Content",
                          "value": "204"
                        }
                      ],
                      "javaType": "String",
                      "kind": "parameter",
                      "order": 2,
                      "required": true,
                      "secret": false,
                      "type": "select"
                    },
                    "returnBody": {
                      "componentProperty": false,
                      "defaultValue": true,
                      "deprecated": false,
                      "displayName": "Include error message in the return body",
                      "javaType": "Boolean",
                      "kind": "parameter",
                      "order": 4,
                      "required": false,
                      "secret": false,
                      "type": "boolean"
                    }
                  }
                }
              ],
              "standardizedErrors": [
                {
                  "displayName": "ServerError",
                  "name": "SERVER_ERROR"
                }
              ]
            },
            "id": "io.syndesis:webhook-incoming",
            "metadata": {
              "serverBasePath": "/webhook"
            },
            "name": "Incoming Webhook",
            "pattern": "From",
            "tags": [
              "expose"
            ]
          }
        ],
        "dependencies": [
          {
            "id": "io.syndesis.connector:connector-webhook:1.10-SNAPSHOT",
            "type": "MAVEN"
          }
        ],
        "description": "Create direct connections with external systems through Webhooks",
        "icon": "assets:webhook.svg",
        "id": "webhook",
        "metadata": {
          "hide-from-connection-pages": "true"
        },
        "name": "Webhook",
        "version": 6
      },
      "connectorId": "webhook",
      "description": "Create direct connections with external systems through Webhooks",
      "icon": "assets:webhook.svg",
      "id": "webhook",
      "isDerived": false,
      "metadata": {
        "hide-from-connection-pages": "true"
      },
      "name": "Webhook",
      "uses": 0
    }
  },
  "connectors": {
    ":email-send": {
      "actions": [
        {
          "actionType": "connector",
          "description": "Send messages to the email account that this connection is authorized to access.",
          "descriptor": {
            "connectorCustomizers": [
              "io.syndesis.connector.email.customizer.EMailSendCustomizer"
            ],
            "connectorFactory": "io.syndesis.connector.email.component.EMailComponentFactory",
            "inputDataShape": {
              "kind": "java",
              "name": "EmailMessage",
              "specification": "{\"JavaClass\":{\"jsonType\":\"io.atlasmap.java.v2.JavaClass\",\"collectionType\":\"NONE\",\"path\":\"/\",\"fieldType\":\"COMPLEX\",\"modifiers\":{\"modifier\":[\"FINAL\",\"PUBLIC\"]},\"className\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"canonicalClassName\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"primitive\":false,\"synthetic\":false,\"javaEnumFields\":{\"javaEnumField\":[]},\"javaFields\":{\"javaField\":[{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/subject\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"subject\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getSubject\",\"setMethod\":\"setSubject\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/from\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"from\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getFrom\",\"setMethod\":\"setFrom\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/to\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"to\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getTo\",\"setMethod\":\"setTo\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/cc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"cc\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getCc\",\"setMethod\":\"setCc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/bcc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"bcc\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getBcc\",\"setMethod\":\"setBcc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/content\",\"status\":\"SUPPORTED\",\"fieldType\":\"ANY\",\"name\":\"content\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.Object\",\"canonicalClassName\":\"java.lang.Object\",\"getMethod\":\"getContent\",\"setMethod\":\"setContent\",\"primitive\":false,\"synthetic\":false}]},\"packageName\":\"io.syndesis.connector.email.model\",\"annotation\":false,\"annonymous\":false,\"enumeration\":false,\"localClass\":false,\"memberClass\":false,\"uri\":\"atlas:java?className=io.syndesis.connector.email.model.EMailMessageModel\",\"interface\":false}}",
              "type": "io.syndesis.connector.email.model.EMailMessageModel"
            },
            "outputDataShape": {
              "kind": "none"
            },
            "propertyDefinitionSteps": [
              {
                "description": "Specify the email messages that you want to send.",
                "name": "Send messages to Email",
                "properties": {
                  "bcc": {
                    "deprecated": false,
                    "displayName": "Email bcc",
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "parameter",
                    "label": "producer",
                    "labelHint": "One or more comma-separated email addresses to send a blind copy of the email to.",
                    "order": 6,
                    "required": false,
                    "secret": false,
                    "type": "string"
                  },
                  "cc": {
                    "deprecated": false,
                    "displayName": "Email cc",
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "parameter",
                    "label": "producer",
                    "labelHint": "One or more comma-separated email addresses to send a copy of the email to.",
                    "order": 5,
                    "required": false,
                    "secret": false,
                    "type": "string"
                  },
                  "from": {
                    "deprecated": false,
                    "displayName": "Email from",
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "parameter",
                    "label": "producer",
                    "labelHint": "Email address of the sender (must be valid email address to avoid sender verification failure)",
                    "order": 2,
                    "required": true,
                    "secret": false,
                    "type": "string"
                  },
                  "priority": {
                    "defaultValue": "injectedData",
                    "deprecated": false,
                    "displayName": "Parameter Priority",
                    "enum": [
                      {
                        "label": "Input Values",
                        "value": "inputValues"
                      },
                      {
                        "label": "Consumed Data",
                        "value": "consumedData"
                      }
                    ],
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "parameter",
                    "label": "producer",
                    "labelHint": "Whether the input values above or the consumed data gets priority in being applied to the generated emails",
                    "order": 7,
                    "required": false,
                    "secret": false,
                    "type": "string"
                  },
                  "subject": {
                    "deprecated": false,
                    "displayName": "Email subject",
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "parameter",
                    "label": "producer",
                    "labelHint": "The text to insert in the subject line of the email.",
                    "order": 3,
                    "required": false,
                    "secret": false,
                    "type": "string"
                  },
                  "text": {
                    "deprecated": false,
                    "displayName": "Email text",
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "parameter",
                    "label": "producer",
                    "labelHint": "The email message that you want to send.",
                    "order": 4,
                    "required": false,
                    "secret": false,
                    "type": "textarea"
                  },
                  "to": {
                    "deprecated": false,
                    "displayName": "Email to",
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "parameter",
                    "label": "producer",
                    "labelHint": "One or more comma-separated email addresses to send the email to.",
                    "order": 1,
                    "required": false,
                    "secret": false,
                    "type": "string"
                  }
                }
              }
            ]
          },
          "id": "io.syndesis:email-send-connector",
          "name": "Send Email",
          "pattern": "To"
        }
      ],
      "componentScheme": "email-send",
      "configuredProperties": {
        "protocol": "smtp"
      },
      "dependencies": [
        {
          "id": "io.syndesis.connector:connector-email:1.10-SNAPSHOT",
          "type": "MAVEN"
        }
      ],
      "description": "Send email messages.",
      "icon": "assets:email-send.svg",
      "id": "email-send",
      "name": "Send Email (smtp)",
      "properties": {
        "host": {
          "componentProperty": true,
          "deprecated": false,
          "description": "The hostname of the email server.",
          "displayName": "Email Host Name",
          "group": "common",
          "javaType": "java.lang.String",
          "kind": "parameter",
          "label": "common",
          "order": 1,
          "required": true,
          "secret": false,
          "type": "string"
        },
        "password": {
          "componentProperty": true,
          "deprecated": false,
          "displayName": "Password",
          "group": "security",
          "javaType": "java.lang.String",
          "kind": "parameter",
          "label": "common,security",
          "labelHint": "Specify the password for the email account that this connection is authorized to access.",
          "order": 4,
          "required": true,
          "secret": true,
          "type": "string"
        },
        "port": {
          "componentProperty": true,
          "deprecated": false,
          "description": "The port of the email server.",
          "displayName": "Email Server Port Number",
          "group": "common",
          "javaType": "java.lang.Integer",
          "kind": "parameter",
          "label": "common",
          "order": 2,
          "required": true,
          "secret": false,
          "type": "integer"
        },
        "secureType": {
          "componentProperty": true,
          "defaultValue": "None",
          "deprecated": false,
          "displayName": "Security Method",
          "enum": [
            {
              "label": "None",
              "value": "None"
            },
            {
              "label": "StartTLS",
              "value": "StartTLS"
            },
            {
              "label": "SSL / TLS",
              "value": "SSL/TLS"
            }
          ],
          "group": "security",
          "javaType": "java.lang.String",
          "kind": "parameter",
          "label": "security",
          "labelHint": "Specify what security protocol (if any) the connection requires",
          "order": 5,
          "required": false,
          "secret": false,
          "type": "string"
        },
        "serverCertificate": {
          "componentProperty": true,
          "deprecated": false,
          "description": "If the SSL email server is internal and possesses a self-signed certificate then enable SSL by adding the certificate here.",
          "displayName": "Server Certificate",
          "group": "security",
          "javaType": "java.lang.String",
          "kind": "parameter",
          "label": "common,security",
          "order": 6,
          "relation": [
            {
              "action": "DISABLE",
              "when": [
                {
                  "id": "secureType",
                  "value": "None"
                }
              ]
            }
          ],
          "required": false,
          "secret": false,
          "type": "textarea"
        },
        "username": {
          "componentProperty": true,
          "deprecated": false,
          "displayName": "User Name",
          "group": "security",
          "javaType": "java.lang.String",
          "kind": "parameter",
          "label": "common,security",
          "labelHint": "Specify the user name for the email account that this connection is authorized to access.",
          "order": 3,
          "required": true,
          "secret": false,
          "type": "string"
        }
      },
      "tags": [
        "verifier"
      ],
      "version": 6
    },
    ":sql": {
      "actions": [
        {
          "actionType": "connector",
          "description": "Invoke SQL to obtain, store, update, or delete data.",
          "descriptor": {
            "componentScheme": "sql",
            "connectorCustomizers": [
              "io.syndesis.connector.sql.customizer.SqlConnectorCustomizer"
            ],
            "inputDataShape": {
              "kind": "json-schema"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "description": "Enter a SQL statement that starts with INSERT, SELECT, UPDATE or DELETE.",
                "name": "SQL statement",
                "properties": {
                  "batch": {
                    "defaultValue": false,
                    "deprecated": false,
                    "displayName": "Batch update",
                    "group": "common",
                    "javaType": "java.lang.Boolean",
                    "kind": "property",
                    "labelHint": "Use prepared statements for INSERT, UPDATE, DELETE in order to update multiple rows with batch update.",
                    "order": 2,
                    "required": false,
                    "secret": false,
                    "type": "boolean"
                  },
                  "query": {
                    "deprecated": false,
                    "displayName": "SQL statement",
                    "group": "common",
                    "javaType": "java.lang.String",
                    "kind": "path",
                    "labelHint": "SQL statement to be executed. Can contain input parameters prefixed by ':#'.",
                    "order": 1,
                    "placeholder": "for example ':#MYPARAMNAME'",
                    "required": true,
                    "secret": false,
                    "type": "dataList"
                  },
                  "raiseErrorOnNotFound": {
                    "defaultValue": false,
                    "deprecated": false,
                    "displayName": "Raise error when record not found",
                    "group": "common",
                    "javaType": "java.lang.Boolean",
                    "kind": "property",
                    "labelHint": "Error when no records are selected, updated or deleted",
                    "order": 3,
                    "required": false,
                    "secret": false,
                    "type": "boolean"
                  }
                }
              }
            ],
            "standardizedErrors": [
              {
                "displayName": "DataAccessError",
                "name": "DATA_ACCESS_ERROR"
              },
              {
                "displayName": "EntityNotFoundError",
                "name": "ENTITY_NOT_FOUND_ERROR"
              },
              {
                "displayName": "DuplicateKeyError",
                "name": "DUPLICATE_KEY_ERROR"
              },
              {
                "displayName": "ConnectorError",
                "name": "CONNECTOR_ERROR"
              }
            ]
          },
          "id": "sql-connector",
          "name": "Invoke SQL",
          "pattern": "To",
          "tags": [
            "dynamic"
          ]
        },
        {
          "actionType": "connector",
          "description": "Periodically invoke SQL to obtain data.",
          "descriptor": {
            "componentScheme": "sql",
            "connectorCustomizers": [
              "io.syndesis.connector.sql.customizer.SqlStartConnectorCustomizer"
            ],
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "description": "Enter a SQL statement that returns results, such as SELECT.",
                "name": "SQL statement",
                "properties": {
                  "isRaiseErrorOnNotFound": {
                    "deprecated": false,
                    "displayName": "Raise NotFoundError",
                    "group": "consumer",
                    "javaType": "java.lang.Boolean",
                    "kind": "parameter",
                    "labelHint": "Raise NotFoundError if no records are inserted, updated, selected or deleted",
                    "order": 3,
                    "required": false,
                    "secret": false,
                    "type": "boolean"
                  },
                  "query": {
                    "deprecated": false,
                    "displayName": "SQL statement",
                    "group": "common",
                    "javaType": "java.lang.String",
                    "kind": "path",
                    "labelHint": "SQL statement to be executed.",
                    "order": 1,
                    "required": true,
                    "secret": false,
                    "type": "dataList"
                  },
                  "schedulerExpression": {
                    "defaultValue": 60000,
                    "deprecated": false,
                    "displayName": "Period",
                    "group": "consumer",
                    "javaType": "long",
                    "kind": "parameter",
                    "labelHint": "Delay between scheduling (executing).",
                    "order": 2,
                    "required": false,
                    "secret": false,
                    "type": "duration"
                  }
                }
              }
            ]
          },
          "id": "sql-start-connector",
          "name": "Periodic SQL invocation",
          "pattern": "From",
          "tags": [
            "dynamic"
          ]
        },
        {
          "actionType": "connector",
          "description": "Invoke a stored procedure.",
          "descriptor": {
            "componentScheme": "sql-stored",
            "connectorCustomizers": [
              "io.syndesis.connector.sql.customizer.SqlStoredConnectorCustomizer"
            ],
            "inputDataShape": {
              "kind": "json-schema"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "description": "Select the stored procedure.",
                "name": "Procedure name",
                "properties": {
                  "procedureName": {
                    "componentProperty": true,
                    "deprecated": false,
                    "displayName": "Procedure name",
                    "group": "common",
                    "javaType": "java.lang.String",
                    "kind": "property",
                    "labelHint": "Name of the stored procedure.",
                    "required": false,
                    "secret": false,
                    "type": "select"
                  },
                  "template": {
                    "componentProperty": false,
                    "deprecated": false,
                    "displayName": "Template",
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "path",
                    "labelHint": "Stored procedure template to perform.",
                    "required": false,
                    "secret": false,
                    "type": "hidden"
                  }
                }
              }
            ]
          },
          "id": "sql-stored-connector",
          "name": "Invoke stored procedure",
          "pattern": "To",
          "tags": [
            "dynamic"
          ]
        },
        {
          "actionType": "connector",
          "description": "Periodically invoke a stored procedure.",
          "descriptor": {
            "componentScheme": "sql-stored",
            "connectorCustomizers": [
              "io.syndesis.connector.sql.customizer.SqlStartStoredConnectorCustomizer"
            ],
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "description": "Select the stored procedure.",
                "name": "Procedure name",
                "properties": {
                  "procedureName": {
                    "componentProperty": true,
                    "deprecated": false,
                    "displayName": "Procedure name",
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "path",
                    "labelHint": "Name of the stored procedure.",
                    "required": true,
                    "secret": false,
                    "type": "select"
                  },
                  "schedulerExpression": {
                    "defaultValue": 60000,
                    "deprecated": false,
                    "displayName": "Period",
                    "group": "consumer",
                    "javaType": "long",
                    "kind": "parameter",
                    "labelHint": "Delay between scheduling (executing).",
                    "required": false,
                    "secret": false,
                    "type": "duration"
                  },
                  "template": {
                    "componentProperty": false,
                    "deprecated": false,
                    "displayName": "Template",
                    "group": "producer",
                    "javaType": "java.lang.String",
                    "kind": "path",
                    "labelHint": "Stored Procedure template to perform.",
                    "required": true,
                    "secret": false,
                    "type": "hidden"
                  }
                }
              }
            ]
          },
          "id": "sql-stored-start-connector",
          "name": "Periodic stored procedure invocation",
          "pattern": "From",
          "tags": [
            "dynamic"
          ]
        }
      ],
      "connectorCustomizers": [
        "io.syndesis.connector.sql.customizer.DataSourceCustomizer"
      ],
      "dependencies": [
        {
          "id": "io.syndesis.connector:connector-sql:1.10-SNAPSHOT",
          "type": "MAVEN"
        },
        {
          "id": "jdbc-driver",
          "type": "EXTENSION_TAG"
        }
      ],
      "description": "Invoke SQL to obtain, store, update, or delete data.",
      "icon": "assets:sql.svg",
      "id": "sql",
      "name": "Database",
      "properties": {
        "password": {
          "componentProperty": true,
          "deprecated": false,
          "displayName": "Password",
          "group": "security",
          "javaType": "java.lang.String",
          "kind": "property",
          "label": "common,security",
          "labelHint": "Password for the database connection.",
          "order": 3,
          "required": true,
          "secret": true,
          "type": "string"
        },
        "schema": {
          "componentProperty": true,
          "deprecated": false,
          "displayName": "Schema",
          "group": "common",
          "javaType": "java.lang.String",
          "kind": "property",
          "label": "common",
          "labelHint": "Database schema.",
          "order": 4,
          "required": false,
          "secret": false,
          "type": "string"
        },
        "url": {
          "componentProperty": true,
          "deprecated": false,
          "displayName": "Connection URL",
          "group": "common",
          "javaType": "java.lang.String",
          "kind": "property",
          "labelHint": "JDBC URL of the database.",
          "order": 1,
          "required": true,
          "secret": false,
          "type": "string"
        },
        "user": {
          "componentProperty": true,
          "deprecated": false,
          "displayName": "Username",
          "group": "common",
          "javaType": "java.lang.String",
          "kind": "property",
          "labelHint": "Username for the database connection.",
          "order": 2,
          "required": true,
          "secret": false,
          "type": "string"
        }
      },
      "tags": [
        "verifier"
      ],
      "version": 6
    },
    ":webhook": {
      "actions": [
        {
          "actionType": "connector",
          "description": "Start an integration from a Webhook",
          "descriptor": {
            "componentScheme": "servlet",
            "configuredProperties": {
              "headerFilterStrategy": "syndesisHeaderStrategy",
              "httpMethodRestrict": "GET,POST"
            },
            "connectorCustomizers": [
              "io.syndesis.connector.webhook.WebhookConnectorCustomizer"
            ],
            "exceptionHandler": "io.syndesis.connector.webhook.WebhookOnExceptionHandler",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "any"
            },
            "propertyDefinitionSteps": [
              {
                "description": "Webhook Configuration",
                "name": "configuration",
                "properties": {
                  "contextPath": {
                    "componentProperty": false,
                    "deprecated": false,
                    "description": "The Webhook token that will be set as final part of the URL",
                    "displayName": "Webhook Token",
                    "generator": "alphanum:50",
                    "javaType": "String",
                    "kind": "parameter",
                    "order": 0,
                    "required": true,
                    "secret": false,
                    "tags": [
                      "context-path"
                    ],
                    "type": "string"
                  },
                  "defaultResponse": {
                    "componentProperty": false,
                    "deprecated": false,
                    "displayName": "Default Response",
                    "javaType": "String",
                    "kind": "parameter",
                    "order": 1,
                    "required": false,
                    "secret": false,
                    "type": "legend"
                  },
                  "errorHandling": {
                    "componentProperty": false,
                    "deprecated": false,
                    "displayName": "Error Handling",
                    "javaType": "String",
                    "kind": "parameter",
                    "order": 3,
                    "required": false,
                    "secret": false,
                    "type": "legend"
                  },
                  "errorResponseCodes": {
                    "componentProperty": false,
                    "defaultValue": "{}",
                    "deprecated": false,
                    "description": "The return code to set according to different error situations",
                    "displayName": "Error Response Codes",
                    "extendedProperties": "{ \"mapsetValueDefinition\": {   \"enum\" : [{\"label\":\"400 Bad Request\",\"value\":\"400\"},{\"label\":\"404 Not Found\",\"value\":\"404\"},{\"label\":\"405 Method Not Allowed\",\"value\":\"405\"},{\"label\":\"409 Conflict\",\"value\":\"409\"},{\"label\":\"500 Server Error\",\"value\":\"500\"},{\"label\":\"501 Not Implemented\",\"value\":\"501\"},{\"label\":\"503 Service Unavailable\",\"value\":\"503\"}],    \"type\" : \"select\" },\"mapsetOptions\": {    \"i18nKeyColumnTitle\": \"When the error message is\",    \"i18nValueColumnTitle\": \"Return this HTTP response code\" }}",
                    "javaType": "Map",
                    "kind": "parameter",
                    "order": 5,
                    "required": false,
                    "secret": false,
                    "type": "mapset"
                  },
                  "httpResponseCode": {
                    "componentProperty": false,
                    "deprecated": false,
                    "description": "The return code to set in the HTTP response",
                    "displayName": "Return Code",
                    "enum": [
                      {
                        "label": "200 OK",
                        "value": "200"
                      },
                      {
                        "label": "201 Created",
                        "value": "201"
                      },
                      {
                        "label": "202 Accepted",
                        "value": "202"
                      },
                      {
                        "label": "204 No Content",
                        "value": "204"
                      }
                    ],
                    "javaType": "String",
                    "kind": "parameter",
                    "order": 2,
                    "required": true,
                    "secret": false,
                    "type": "select"
                  },
                  "returnBody": {
                    "componentProperty": false,
                    "defaultValue": true,
                    "deprecated": false,
                    "displayName": "Include error message in the return body",
                    "javaType": "Boolean",
                    "kind": "parameter",
                    "order": 4,
                    "required": false,
                    "secret": false,
                    "type": "boolean"
                  }
                }
              }
            ],
            "standardizedErrors": [
              {
                "displayName": "ServerError",
                "name": "SERVER_ERROR"
              }
            ]
          },
          "id": "io.syndesis:webhook-incoming",
          "metadata": {
            "serverBasePath": "/webhook"
          },
          "name": "Incoming Webhook",
          "pattern": "From",
          "tags": [
            "expose"
          ]
        }
      ],
      "dependencies": [
        {
          "id": "io.syndesis.connector:connector-webhook:1.10-SNAPSHOT",
          "type": "MAVEN"
        }
      ],
      "description": "Create direct connections with external systems through Webhooks",
      "icon": "assets:webhook.svg",
      "id": "webhook",
      "metadata": {
        "hide-from-connection-pages": "true"
      },
      "name": "Webhook",
      "version": 6
    }
  },
  "integrations": {
    ":i-M4y1EddlCY5ii3d0hYCz": {
      "createdAt": 1593773316005,
      "flows": [
        {
          "id": "-M4xzAiqpwlS3r3FxupD",
          "steps": [
            {
              "action": {
                "actionType": "connector",
                "description": "Start an integration from a Webhook",
                "descriptor": {
                  "componentScheme": "servlet",
                  "configuredProperties": {
                    "headerFilterStrategy": "syndesisHeaderStrategy",
                    "httpMethodRestrict": "GET,POST"
                  },
                  "connectorCustomizers": [
                    "io.syndesis.connector.webhook.WebhookConnectorCustomizer"
                  ],
                  "exceptionHandler": "io.syndesis.connector.webhook.WebhookOnExceptionHandler",
                  "inputDataShape": {
                    "kind": "none"
                  },
                  "outputDataShape": {
                    "kind": "json-instance",
                    "metadata": {
                      "userDefined": "true"
                    },
                    "name": "Contact",
                    "specification": "{\"first_name\":\"Jane Doe\",\"company\":\"Syndesis\",\"mail\":\"jdoe@syndesis.org\"}"
                  },
                  "propertyDefinitionSteps": [
                    {
                      "name": "configuration",
                      "properties": {
                        "contextPath": {
                          "componentProperty": false,
                          "defaultValue": "BYw3B8rjRI1jPuMSM8kiKeBSyaPID85eLg8bVMJcH8M17NIZJk",
                          "deprecated": false,
                          "description": "The Webhook token that will be set as final part of the URL",
                          "displayName": "Webhook Token",
                          "generator": "alphanum:50",
                          "javaType": "String",
                          "kind": "parameter",
                          "order": 0,
                          "required": true,
                          "secret": false,
                          "tags": [
                            "context-path"
                          ],
                          "type": "string"
                        },
                        "defaultResponse": {
                          "componentProperty": false,
                          "deprecated": false,
                          "displayName": "Default Response",
                          "javaType": "String",
                          "kind": "parameter",
                          "order": 1,
                          "required": false,
                          "secret": false,
                          "type": "legend"
                        },
                        "errorHandling": {
                          "componentProperty": false,
                          "deprecated": false,
                          "displayName": "Error Handling",
                          "javaType": "String",
                          "kind": "parameter",
                          "order": 3,
                          "required": false,
                          "secret": false,
                          "type": "legend"
                        },
                        "errorResponseCodes": {
                          "componentProperty": false,
                          "defaultValue": "{}",
                          "deprecated": false,
                          "description": "The return code to set according to different error situations",
                          "displayName": "Error Response Codes",
                          "extendedProperties": "{ \"mapsetValueDefinition\": {   \"enum\" : [{\"label\":\"400 Bad Request\",\"value\":\"400\"},{\"label\":\"404 Not Found\",\"value\":\"404\"},{\"label\":\"405 Method Not Allowed\",\"value\":\"405\"},{\"label\":\"409 Conflict\",\"value\":\"409\"},{\"label\":\"500 Server Error\",\"value\":\"500\"},{\"label\":\"501 Not Implemented\",\"value\":\"501\"},{\"label\":\"503 Service Unavailable\",\"value\":\"503\"}],    \"type\" : \"select\" },\"mapsetOptions\": {    \"i18nKeyColumnTitle\": \"When the error message is\",    \"i18nValueColumnTitle\": \"Return this HTTP response code\" }}",
                          "javaType": "Map",
                          "kind": "parameter",
                          "order": 5,
                          "required": false,
                          "secret": false,
                          "type": "mapset"
                        },
                        "httpResponseCode": {
                          "componentProperty": false,
                          "deprecated": false,
                          "description": "The return code to set in the HTTP response",
                          "displayName": "Return Code",
                          "enum": [
                            {
                              "label": "200 OK",
                              "value": "200"
                            },
                            {
                              "label": "201 Created",
                              "value": "201"
                            },
                            {
                              "label": "202 Accepted",
                              "value": "202"
                            },
                            {
                              "label": "204 No Content",
                              "value": "204"
                            }
                          ],
                          "javaType": "String",
                          "kind": "parameter",
                          "order": 2,
                          "required": true,
                          "secret": false,
                          "type": "select"
                        },
                        "returnBody": {
                          "componentProperty": false,
                          "deprecated": false,
                          "displayName": "Include error message in the return body",
                          "javaType": "Boolean",
                          "kind": "parameter",
                          "order": 4,
                          "required": false,
                          "secret": false,
                          "type": "boolean"
                        }
                      }
                    }
                  ],
                  "standardizedErrors": [
                    {
                      "displayName": "ServerError",
                      "name": "SERVER_ERROR"
                    }
                  ]
                },
                "id": "io.syndesis:webhook-incoming",
                "metadata": {
                  "serverBasePath": "/webhook"
                },
                "name": "Incoming Webhook",
                "pattern": "From",
                "tags": [
                  "expose"
                ]
              },
              "configuredProperties": {
                "contextPath": "test-webhook",
                "errorResponseCodes": "{}",
                "httpResponseCode": "200",
                "returnBody": "true"
              },
              "connection": {
                "connector": {
                  "actions": [
                    {
                      "actionType": "connector",
                      "description": "Start an integration from a Webhook",
                      "descriptor": {
                        "componentScheme": "servlet",
                        "configuredProperties": {
                          "headerFilterStrategy": "syndesisHeaderStrategy",
                          "httpMethodRestrict": "GET,POST"
                        },
                        "connectorCustomizers": [
                          "io.syndesis.connector.webhook.WebhookConnectorCustomizer"
                        ],
                        "exceptionHandler": "io.syndesis.connector.webhook.WebhookOnExceptionHandler",
                        "inputDataShape": {
                          "kind": "none"
                        },
                        "outputDataShape": {
                          "kind": "any"
                        },
                        "propertyDefinitionSteps": [
                          {
                            "description": "Webhook Configuration",
                            "name": "configuration",
                            "properties": {
                              "contextPath": {
                                "componentProperty": false,
                                "deprecated": false,
                                "description": "The Webhook token that will be set as final part of the URL",
                                "displayName": "Webhook Token",
                                "generator": "alphanum:50",
                                "javaType": "String",
                                "kind": "parameter",
                                "order": 0,
                                "required": true,
                                "secret": false,
                                "tags": [
                                  "context-path"
                                ],
                                "type": "string"
                              },
                              "defaultResponse": {
                                "componentProperty": false,
                                "deprecated": false,
                                "displayName": "Default Response",
                                "javaType": "String",
                                "kind": "parameter",
                                "order": 1,
                                "required": false,
                                "secret": false,
                                "type": "legend"
                              },
                              "errorHandling": {
                                "componentProperty": false,
                                "deprecated": false,
                                "displayName": "Error Handling",
                                "javaType": "String",
                                "kind": "parameter",
                                "order": 3,
                                "required": false,
                                "secret": false,
                                "type": "legend"
                              },
                              "errorResponseCodes": {
                                "componentProperty": false,
                                "defaultValue": "{}",
                                "deprecated": false,
                                "description": "The return code to set according to different error situations",
                                "displayName": "Error Response Codes",
                                "extendedProperties": "{ \"mapsetValueDefinition\": {   \"enum\" : [{\"label\":\"400 Bad Request\",\"value\":\"400\"},{\"label\":\"404 Not Found\",\"value\":\"404\"},{\"label\":\"405 Method Not Allowed\",\"value\":\"405\"},{\"label\":\"409 Conflict\",\"value\":\"409\"},{\"label\":\"500 Server Error\",\"value\":\"500\"},{\"label\":\"501 Not Implemented\",\"value\":\"501\"},{\"label\":\"503 Service Unavailable\",\"value\":\"503\"}],    \"type\" : \"select\" },\"mapsetOptions\": {    \"i18nKeyColumnTitle\": \"When the error message is\",    \"i18nValueColumnTitle\": \"Return this HTTP response code\" }}",
                                "javaType": "Map",
                                "kind": "parameter",
                                "order": 5,
                                "required": false,
                                "secret": false,
                                "type": "mapset"
                              },
                              "httpResponseCode": {
                                "componentProperty": false,
                                "deprecated": false,
                                "description": "The return code to set in the HTTP response",
                                "displayName": "Return Code",
                                "enum": [
                                  {
                                    "label": "200 OK",
                                    "value": "200"
                                  },
                                  {
                                    "label": "201 Created",
                                    "value": "201"
                                  },
                                  {
                                    "label": "202 Accepted",
                                    "value": "202"
                                  },
                                  {
                                    "label": "204 No Content",
                                    "value": "204"
                                  }
                                ],
                                "javaType": "String",
                                "kind": "parameter",
                                "order": 2,
                                "required": true,
                                "secret": false,
                                "type": "select"
                              },
                              "returnBody": {
                                "componentProperty": false,
                                "defaultValue": true,
                                "deprecated": false,
                                "displayName": "Include error message in the return body",
                                "javaType": "Boolean",
                                "kind": "parameter",
                                "order": 4,
                                "required": false,
                                "secret": false,
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "standardizedErrors": [
                          {
                            "displayName": "ServerError",
                            "name": "SERVER_ERROR"
                          }
                        ]
                      },
                      "id": "io.syndesis:webhook-incoming",
                      "metadata": {
                        "serverBasePath": "/webhook"
                      },
                      "name": "Incoming Webhook",
                      "pattern": "From",
                      "tags": [
                        "expose"
                      ]
                    }
                  ],
                  "dependencies": [
                    {
                      "id": "io.syndesis.connector:connector-webhook:1.10-SNAPSHOT",
                      "type": "MAVEN"
                    }
                  ],
                  "description": "Create direct connections with external systems through Webhooks",
                  "icon": "assets:webhook.svg",
                  "id": "webhook",
                  "metadata": {
                    "hide-from-connection-pages": "true"
                  },
                  "name": "Webhook",
                  "version": 6
                },
                "connectorId": "webhook",
                "description": "Create direct connections with external systems through Webhooks",
                "icon": "assets:webhook.svg",
                "id": "webhook",
                "isDerived": false,
                "metadata": {
                  "hide-from-connection-pages": "true"
                },
                "name": "Webhook",
                "uses": 0
              },
              "id": "-M4y0Svloj9AnQ4QczWE",
              "metadata": {
                "configured": "true"
              },
              "stepKind": "endpoint"
            },
            {
              "action": {
                "actionType": "step",
                "descriptor": {
                  "inputDataShape": {
                    "kind": "any",
                    "name": "All preceding outputs"
                  },
                  "outputDataShape": {
                    "kind": "json-schema",
                    "name": "Template JSON Schema",
                    "specification": "{\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"Template JSON Schema\",\"type\":\"object\",\"properties\":{\"first_name\":{\"description\":\"Identifier for the symbol first_name\",\"type\":\"string\"},\"company\":{\"description\":\"Identifier for the symbol company\",\"type\":\"string\"}}}"
                  }
                }
              },
              "configuredProperties": {
                "atlasmapping": "{\"AtlasMapping\":{\"jsonType\":\"io.atlasmap.v2.AtlasMapping\",\"dataSource\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0Svloj9AnQ4QczWE\",\"uri\":\"atlas:json:-M4y0Svloj9AnQ4QczWE\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0qmDoj9AnQ4QczWE\",\"uri\":\"atlas:json:-M4y0qmDoj9AnQ4QczWE\",\"dataSourceType\":\"TARGET\",\"template\":null}],\"mappings\":{\"mapping\":[{\"jsonType\":\"io.atlasmap.v2.Mapping\",\"id\":\"mapping.333045\",\"inputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"company\",\"path\":\"/company\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0Svloj9AnQ4QczWE\",\"userCreated\":false}],\"outputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"company\",\"path\":\"/company\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0qmDoj9AnQ4QczWE\",\"userCreated\":false}]},{\"jsonType\":\"io.atlasmap.v2.Mapping\",\"id\":\"mapping.335128\",\"inputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"first_name\",\"path\":\"/first_name\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0Svloj9AnQ4QczWE\",\"userCreated\":false}],\"outputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"first_name\",\"path\":\"/first_name\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0qmDoj9AnQ4QczWE\",\"userCreated\":false}]}]},\"name\":\"UI.0\",\"lookupTables\":{\"lookupTable\":[]},\"constants\":{\"constant\":[]},\"properties\":{\"property\":[]}}}"
              },
              "id": "-M4y0x8koj9AnQ4QczWF",
              "metadata": {
                "configured": "true"
              },
              "name": "Data Mapper",
              "stepKind": "mapper"
            },
            {
              "action": {
                "actionType": "step",
                "descriptor": {
                  "inputDataShape": {
                    "kind": "json-schema",
                    "name": "Template JSON Schema",
                    "specification": "{\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"Template JSON Schema\",\"type\":\"object\",\"properties\":{\"first_name\":{\"description\":\"Identifier for the symbol first_name\",\"type\":\"string\"},\"company\":{\"description\":\"Identifier for the symbol company\",\"type\":\"string\"}}}"
                  },
                  "outputDataShape": {
                    "kind": "json-schema",
                    "name": "Template JSON Schema",
                    "specification": "{\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"Template JSON Schema\",\"type\":\"object\",\"properties\":{\"message\":{\"description\":\"Identifier for the symbol message\",\"type\":\"string\"}}}"
                  }
                },
                "id": "-M4y0qmCoj9AnQ4QczWE",
                "name": "Template"
              },
              "configuredProperties": {
                "language": "mustache",
                "template": "Welcome {{first_name}},\n\nhave a great start here at {{company}}!\n\nRegards,\nPeople Team"
              },
              "id": "-M4y0qmDoj9AnQ4QczWE",
              "metadata": {
                "configured": "true"
              },
              "name": "Template",
              "stepKind": "template"
            },
            {
              "action": {
                "actionType": "step",
                "descriptor": {
                  "inputDataShape": {
                    "kind": "any",
                    "name": "All preceding outputs"
                  },
                  "outputDataShape": {
                    "kind": "java",
                    "name": "EmailMessage",
                    "specification": "{\"JavaClass\":{\"jsonType\":\"io.atlasmap.java.v2.JavaClass\",\"collectionType\":\"NONE\",\"path\":\"/\",\"fieldType\":\"COMPLEX\",\"modifiers\":{\"modifier\":[\"FINAL\",\"PUBLIC\"]},\"className\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"canonicalClassName\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"primitive\":false,\"synthetic\":false,\"javaEnumFields\":{\"javaEnumField\":[]},\"javaFields\":{\"javaField\":[{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/subject\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"subject\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getSubject\",\"setMethod\":\"setSubject\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/from\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"from\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getFrom\",\"setMethod\":\"setFrom\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/to\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"to\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getTo\",\"setMethod\":\"setTo\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/cc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"cc\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getCc\",\"setMethod\":\"setCc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/bcc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"bcc\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getBcc\",\"setMethod\":\"setBcc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/content\",\"status\":\"SUPPORTED\",\"fieldType\":\"ANY\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"content\",\"className\":\"java.lang.Object\",\"canonicalClassName\":\"java.lang.Object\",\"getMethod\":\"getContent\",\"setMethod\":\"setContent\",\"primitive\":false,\"synthetic\":false}]},\"packageName\":\"io.syndesis.connector.email.model\",\"annotation\":false,\"annonymous\":false,\"enumeration\":false,\"localClass\":false,\"memberClass\":false,\"uri\":\"atlas:java?className=io.syndesis.connector.email.model.EMailMessageModel\",\"interface\":false}}",
                    "type": "io.syndesis.connector.email.model.EMailMessageModel"
                  }
                }
              },
              "configuredProperties": {
                "atlasmapping": "{\"AtlasMapping\":{\"jsonType\":\"io.atlasmap.v2.AtlasMapping\",\"dataSource\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0Svloj9AnQ4QczWE\",\"uri\":\"atlas:json:-M4y0Svloj9AnQ4QczWE\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0x8koj9AnQ4QczWF\",\"uri\":\"atlas:json:-M4y0x8koj9AnQ4QczWF\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0qmDoj9AnQ4QczWE\",\"uri\":\"atlas:json:-M4y0qmDoj9AnQ4QczWE\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.v2.DataSource\",\"id\":\"-M4y0kTOoj9AnQ4QczWE\",\"uri\":\"atlas:java?className=io.syndesis.connector.email.model.EMailMessageModel\",\"dataSourceType\":\"TARGET\"}],\"mappings\":{\"mapping\":[{\"jsonType\":\"io.atlasmap.v2.Mapping\",\"id\":\"mapping.534354\",\"inputField\":[{\"jsonType\":\"io.atlasmap.v2.PropertyField\",\"name\":\"/subject\",\"path\":\"/subject\",\"fieldType\":\"STRING\",\"docId\":\"DOC.Properties.524275\",\"value\":\"Welcome!\"}],\"outputField\":[{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"name\":\"subject\",\"path\":\"/subject\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0kTOoj9AnQ4QczWE\"}]},{\"jsonType\":\"io.atlasmap.v2.Mapping\",\"id\":\"mapping.198010\",\"inputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"mail\",\"path\":\"/mail\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0Svloj9AnQ4QczWE\",\"userCreated\":false}],\"outputField\":[{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"name\":\"to\",\"path\":\"/to\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0kTOoj9AnQ4QczWE\"}]},{\"jsonType\":\"io.atlasmap.v2.Mapping\",\"id\":\"mapping.736649\",\"inputField\":[{\"jsonType\":\"io.atlasmap.v2.PropertyField\",\"name\":\"/from\",\"path\":\"/from\",\"fieldType\":\"STRING\",\"docId\":\"DOC.Properties.524275\",\"value\":\"people-team@syndesis.org\"}],\"outputField\":[{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"name\":\"from\",\"path\":\"/from\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0kTOoj9AnQ4QczWE\"}]},{\"jsonType\":\"io.atlasmap.v2.Mapping\",\"id\":\"mapping.426200\",\"inputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"message\",\"path\":\"/message\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0qmDoj9AnQ4QczWE\",\"userCreated\":false}],\"outputField\":[{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"name\":\"content\",\"path\":\"/content\",\"fieldType\":\"ANY\",\"docId\":\"-M4y0kTOoj9AnQ4QczWE\",\"className\":\"java.lang.Object\"}]}]},\"name\":\"UI.0\",\"lookupTables\":{\"lookupTable\":[]},\"constants\":{\"constant\":[]},\"properties\":{\"property\":[{\"name\":\"Welcome!\",\"value\":\"Welcome!\",\"fieldType\":\"STRING\"},{\"name\":\"from\",\"value\":\"people-team@syndesis.org\",\"fieldType\":\"STRING\"},{\"name\":\"people-team@syndesis.org\",\"value\":\"people-team@syndesis.org\",\"fieldType\":\"STRING\"},{\"name\":\"subject\",\"value\":\"Welcome!\",\"fieldType\":\"STRING\"}]}}}"
              },
              "id": "-M4y2MY9qo1w5KT5YvY7",
              "metadata": {
                "configured": "true"
              },
              "name": "Data Mapper",
              "stepKind": "mapper"
            },
            {
              "action": {
                "actionType": "connector",
                "description": "Send messages to the email account that this connection is authorized to access.",
                "descriptor": {
                  "connectorCustomizers": [
                    "io.syndesis.connector.email.customizer.EMailSendCustomizer"
                  ],
                  "connectorFactory": "io.syndesis.connector.email.component.EMailComponentFactory",
                  "inputDataShape": {
                    "kind": "java",
                    "name": "EmailMessage",
                    "specification": "{\"JavaClass\":{\"jsonType\":\"io.atlasmap.java.v2.JavaClass\",\"collectionType\":\"NONE\",\"path\":\"/\",\"fieldType\":\"COMPLEX\",\"modifiers\":{\"modifier\":[\"FINAL\",\"PUBLIC\"]},\"className\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"canonicalClassName\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"primitive\":false,\"synthetic\":false,\"javaEnumFields\":{\"javaEnumField\":[]},\"javaFields\":{\"javaField\":[{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/subject\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"subject\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getSubject\",\"setMethod\":\"setSubject\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/from\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"from\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getFrom\",\"setMethod\":\"setFrom\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/to\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"to\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getTo\",\"setMethod\":\"setTo\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/cc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"cc\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getCc\",\"setMethod\":\"setCc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/bcc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"bcc\",\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getBcc\",\"setMethod\":\"setBcc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/content\",\"status\":\"SUPPORTED\",\"fieldType\":\"ANY\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"name\":\"content\",\"className\":\"java.lang.Object\",\"canonicalClassName\":\"java.lang.Object\",\"getMethod\":\"getContent\",\"setMethod\":\"setContent\",\"primitive\":false,\"synthetic\":false}]},\"packageName\":\"io.syndesis.connector.email.model\",\"annotation\":false,\"annonymous\":false,\"enumeration\":false,\"localClass\":false,\"memberClass\":false,\"uri\":\"atlas:java?className=io.syndesis.connector.email.model.EMailMessageModel\",\"interface\":false}}",
                    "type": "io.syndesis.connector.email.model.EMailMessageModel"
                  },
                  "outputDataShape": {
                    "kind": "none"
                  },
                  "propertyDefinitionSteps": [
                    {
                      "name": "Send messages to Email",
                      "properties": {
                        "bcc": {
                          "deprecated": false,
                          "displayName": "Email bcc",
                          "group": "producer",
                          "javaType": "java.lang.String",
                          "kind": "parameter",
                          "label": "producer",
                          "labelHint": "One or more comma-separated email addresses to send a blind copy of the email to.",
                          "order": 6,
                          "required": false,
                          "secret": false,
                          "type": "string"
                        },
                        "cc": {
                          "deprecated": false,
                          "displayName": "Email cc",
                          "group": "producer",
                          "javaType": "java.lang.String",
                          "kind": "parameter",
                          "label": "producer",
                          "labelHint": "One or more comma-separated email addresses to send a copy of the email to.",
                          "order": 5,
                          "required": false,
                          "secret": false,
                          "type": "string"
                        },
                        "from": {
                          "deprecated": false,
                          "displayName": "Email from",
                          "group": "producer",
                          "javaType": "java.lang.String",
                          "kind": "parameter",
                          "label": "producer",
                          "labelHint": "Email address of the sender (must be valid email address to avoid sender verification failure)",
                          "order": 2,
                          "required": true,
                          "secret": false,
                          "type": "string"
                        },
                        "priority": {
                          "defaultValue": "injectedData",
                          "deprecated": false,
                          "displayName": "Parameter Priority",
                          "enum": [
                            {
                              "label": "Input Values",
                              "value": "inputValues"
                            },
                            {
                              "label": "Consumed Data",
                              "value": "consumedData"
                            }
                          ],
                          "group": "producer",
                          "javaType": "java.lang.String",
                          "kind": "parameter",
                          "label": "producer",
                          "labelHint": "Whether the input values above or the consumed data gets priority in being applied to the generated emails",
                          "order": 7,
                          "required": false,
                          "secret": false,
                          "type": "string"
                        },
                        "subject": {
                          "deprecated": false,
                          "displayName": "Email subject",
                          "group": "producer",
                          "javaType": "java.lang.String",
                          "kind": "parameter",
                          "label": "producer",
                          "labelHint": "The text to insert in the subject line of the email.",
                          "order": 3,
                          "required": false,
                          "secret": false,
                          "type": "string"
                        },
                        "text": {
                          "deprecated": false,
                          "displayName": "Email text",
                          "group": "producer",
                          "javaType": "java.lang.String",
                          "kind": "parameter",
                          "label": "producer",
                          "labelHint": "The email message that you want to send.",
                          "order": 4,
                          "required": false,
                          "secret": false,
                          "type": "textarea"
                        },
                        "to": {
                          "deprecated": false,
                          "displayName": "Email to",
                          "group": "producer",
                          "javaType": "java.lang.String",
                          "kind": "parameter",
                          "label": "producer",
                          "labelHint": "One or more comma-separated email addresses to send the email to.",
                          "order": 1,
                          "required": false,
                          "secret": false,
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                "id": "io.syndesis:email-send-connector",
                "name": "Send Email",
                "pattern": "To"
              },
              "configuredProperties": {
                "from": "people-team@syndesis.org",
                "priority": "injectedData"
              },
              "connection": {
                "configuredProperties": {
                  "host": "syndesis.smtp.de",
                  "password": "Â»ENC:6ec3220f0f7350917574e1f34bbe71cd3543a36ec59c982ed035240590d5730c",
                  "port": "2525",
                  "secureType": "None",
                  "username": "syndesis"
                },
                "connector": {
                  "actions": [
                    {
                      "actionType": "connector",
                      "description": "Send messages to the email account that this connection is authorized to access.",
                      "descriptor": {
                        "connectorCustomizers": [
                          "io.syndesis.connector.email.customizer.EMailSendCustomizer"
                        ],
                        "connectorFactory": "io.syndesis.connector.email.component.EMailComponentFactory",
                        "inputDataShape": {
                          "kind": "java",
                          "name": "EmailMessage",
                          "specification": "{\"JavaClass\":{\"jsonType\":\"io.atlasmap.java.v2.JavaClass\",\"collectionType\":\"NONE\",\"path\":\"/\",\"fieldType\":\"COMPLEX\",\"modifiers\":{\"modifier\":[\"FINAL\",\"PUBLIC\"]},\"className\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"canonicalClassName\":\"io.syndesis.connector.email.model.EMailMessageModel\",\"primitive\":false,\"synthetic\":false,\"javaEnumFields\":{\"javaEnumField\":[]},\"javaFields\":{\"javaField\":[{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/subject\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"subject\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getSubject\",\"setMethod\":\"setSubject\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/from\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"from\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getFrom\",\"setMethod\":\"setFrom\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/to\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"to\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getTo\",\"setMethod\":\"setTo\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/cc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"cc\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getCc\",\"setMethod\":\"setCc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/bcc\",\"status\":\"SUPPORTED\",\"fieldType\":\"STRING\",\"name\":\"bcc\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.String\",\"canonicalClassName\":\"java.lang.String\",\"getMethod\":\"getBcc\",\"setMethod\":\"setBcc\",\"primitive\":true,\"synthetic\":false},{\"jsonType\":\"io.atlasmap.java.v2.JavaField\",\"path\":\"/content\",\"status\":\"SUPPORTED\",\"fieldType\":\"ANY\",\"name\":\"content\",\"modifiers\":{\"modifier\":[\"PRIVATE\"]},\"className\":\"java.lang.Object\",\"canonicalClassName\":\"java.lang.Object\",\"getMethod\":\"getContent\",\"setMethod\":\"setContent\",\"primitive\":false,\"synthetic\":false}]},\"packageName\":\"io.syndesis.connector.email.model\",\"annotation\":false,\"annonymous\":false,\"enumeration\":false,\"localClass\":false,\"memberClass\":false,\"uri\":\"atlas:java?className=io.syndesis.connector.email.model.EMailMessageModel\",\"interface\":false}}",
                          "type": "io.syndesis.connector.email.model.EMailMessageModel"
                        },
                        "outputDataShape": {
                          "kind": "none"
                        },
                        "propertyDefinitionSteps": [
                          {
                            "description": "Specify the email messages that you want to send.",
                            "name": "Send messages to Email",
                            "properties": {
                              "bcc": {
                                "deprecated": false,
                                "displayName": "Email bcc",
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "parameter",
                                "label": "producer",
                                "labelHint": "One or more comma-separated email addresses to send a blind copy of the email to.",
                                "order": 6,
                                "required": false,
                                "secret": false,
                                "type": "string"
                              },
                              "cc": {
                                "deprecated": false,
                                "displayName": "Email cc",
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "parameter",
                                "label": "producer",
                                "labelHint": "One or more comma-separated email addresses to send a copy of the email to.",
                                "order": 5,
                                "required": false,
                                "secret": false,
                                "type": "string"
                              },
                              "from": {
                                "deprecated": false,
                                "displayName": "Email from",
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "parameter",
                                "label": "producer",
                                "labelHint": "Email address of the sender (must be valid email address to avoid sender verification failure)",
                                "order": 2,
                                "required": true,
                                "secret": false,
                                "type": "string"
                              },
                              "priority": {
                                "defaultValue": "injectedData",
                                "deprecated": false,
                                "displayName": "Parameter Priority",
                                "enum": [
                                  {
                                    "label": "Input Values",
                                    "value": "inputValues"
                                  },
                                  {
                                    "label": "Consumed Data",
                                    "value": "consumedData"
                                  }
                                ],
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "parameter",
                                "label": "producer",
                                "labelHint": "Whether the input values above or the consumed data gets priority in being applied to the generated emails",
                                "order": 7,
                                "required": false,
                                "secret": false,
                                "type": "string"
                              },
                              "subject": {
                                "deprecated": false,
                                "displayName": "Email subject",
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "parameter",
                                "label": "producer",
                                "labelHint": "The text to insert in the subject line of the email.",
                                "order": 3,
                                "required": false,
                                "secret": false,
                                "type": "string"
                              },
                              "text": {
                                "deprecated": false,
                                "displayName": "Email text",
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "parameter",
                                "label": "producer",
                                "labelHint": "The email message that you want to send.",
                                "order": 4,
                                "required": false,
                                "secret": false,
                                "type": "textarea"
                              },
                              "to": {
                                "deprecated": false,
                                "displayName": "Email to",
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "parameter",
                                "label": "producer",
                                "labelHint": "One or more comma-separated email addresses to send the email to.",
                                "order": 1,
                                "required": false,
                                "secret": false,
                                "type": "string"
                              }
                            }
                          }
                        ]
                      },
                      "id": "io.syndesis:email-send-connector",
                      "name": "Send Email",
                      "pattern": "To"
                    }
                  ],
                  "componentScheme": "email-send",
                  "configuredProperties": {
                    "protocol": "smtp"
                  },
                  "dependencies": [
                    {
                      "id": "io.syndesis.connector:connector-email:1.10-SNAPSHOT",
                      "type": "MAVEN"
                    }
                  ],
                  "description": "Send email messages.",
                  "icon": "assets:email-send.svg",
                  "id": "email-send",
                  "name": "Send Email (smtp)",
                  "properties": {
                    "host": {
                      "componentProperty": true,
                      "deprecated": false,
                      "description": "The hostname of the email server.",
                      "displayName": "Email Host Name",
                      "group": "common",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "common",
                      "order": 1,
                      "required": true,
                      "secret": false,
                      "type": "string"
                    },
                    "password": {
                      "componentProperty": true,
                      "deprecated": false,
                      "displayName": "Password",
                      "group": "security",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "common,security",
                      "labelHint": "Specify the password for the email account that this connection is authorized to access.",
                      "order": 4,
                      "required": true,
                      "secret": true,
                      "type": "string"
                    },
                    "port": {
                      "componentProperty": true,
                      "deprecated": false,
                      "description": "The port of the email server.",
                      "displayName": "Email Server Port Number",
                      "group": "common",
                      "javaType": "java.lang.Integer",
                      "kind": "parameter",
                      "label": "common",
                      "order": 2,
                      "required": true,
                      "secret": false,
                      "type": "integer"
                    },
                    "secureType": {
                      "componentProperty": true,
                      "defaultValue": "None",
                      "deprecated": false,
                      "displayName": "Security Method",
                      "enum": [
                        {
                          "label": "None",
                          "value": "None"
                        },
                        {
                          "label": "StartTLS",
                          "value": "StartTLS"
                        },
                        {
                          "label": "SSL / TLS",
                          "value": "SSL/TLS"
                        }
                      ],
                      "group": "security",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "security",
                      "labelHint": "Specify what security protocol (if any) the connection requires",
                      "order": 5,
                      "required": false,
                      "secret": false,
                      "type": "string"
                    },
                    "serverCertificate": {
                      "componentProperty": true,
                      "deprecated": false,
                      "description": "If the SSL email server is internal and possesses a self-signed certificate then enable SSL by adding the certificate here.",
                      "displayName": "Server Certificate",
                      "group": "security",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "common,security",
                      "order": 6,
                      "relation": [
                        {
                          "action": "DISABLE",
                          "when": [
                            {
                              "id": "secureType",
                              "value": "None"
                            }
                          ]
                        }
                      ],
                      "required": false,
                      "secret": false,
                      "type": "textarea"
                    },
                    "username": {
                      "componentProperty": true,
                      "deprecated": false,
                      "displayName": "User Name",
                      "group": "security",
                      "javaType": "java.lang.String",
                      "kind": "parameter",
                      "label": "common,security",
                      "labelHint": "Specify the user name for the email account that this connection is authorized to access.",
                      "order": 3,
                      "required": true,
                      "secret": false,
                      "type": "string"
                    }
                  },
                  "tags": [
                    "verifier"
                  ],
                  "version": 6
                },
                "connectorId": "email-send",
                "createdDate": 1560516758048,
                "icon": "assets:email-send.svg",
                "id": "i-LhL2-ccjv5WqGyjCaVVz",
                "isDerived": false,
                "lastUpdated": 1586944455246,
                "name": "SMTP",
                "userId": "developer",
                "uses": 0
              },
              "id": "-M4y0kTOoj9AnQ4QczWE",
              "metadata": {
                "configured": "true"
              },
              "stepKind": "endpoint"
            },
            {
              "action": {
                "actionType": "step",
                "descriptor": {
                  "inputDataShape": {
                    "kind": "any",
                    "name": "All preceding outputs"
                  },
                  "outputDataShape": {
                    "kind": "json-schema",
                    "name": "Template JSON Schema",
                    "specification": "{\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"Template JSON Schema\",\"type\":\"object\",\"properties\":{\"first_name\":{\"description\":\"Identifier for the symbol first_name\",\"type\":\"string\"},\"company\":{\"description\":\"Identifier for the symbol company\",\"type\":\"string\"}}}"
                  }
                }
              },
              "configuredProperties": {
                "atlasmapping": "{\"AtlasMapping\":{\"jsonType\":\"io.atlasmap.v2.AtlasMapping\",\"dataSource\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0Svloj9AnQ4QczWE\",\"uri\":\"atlas:json:-M4y0Svloj9AnQ4QczWE\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0x8koj9AnQ4QczWF\",\"uri\":\"atlas:json:-M4y0x8koj9AnQ4QczWF\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0qmDoj9AnQ4QczWE\",\"uri\":\"atlas:json:-M4y0qmDoj9AnQ4QczWE\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0x7Qoj9AnQ4QczWF\",\"uri\":\"atlas:json:-M4y0x7Qoj9AnQ4QczWF\",\"dataSourceType\":\"TARGET\",\"template\":null}],\"mappings\":{\"mapping\":[{\"jsonType\":\"io.atlasmap.v2.Mapping\",\"id\":\"mapping.947543\",\"inputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"company\",\"path\":\"/company\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0Svloj9AnQ4QczWE\",\"userCreated\":false}],\"outputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"company\",\"path\":\"/company\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0x7Qoj9AnQ4QczWF\",\"userCreated\":false}]},{\"jsonType\":\"io.atlasmap.v2.Mapping\",\"id\":\"mapping.88419\",\"inputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"first_name\",\"path\":\"/first_name\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0Svloj9AnQ4QczWE\",\"userCreated\":false}],\"outputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"first_name\",\"path\":\"/first_name\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0x7Qoj9AnQ4QczWF\",\"userCreated\":false}]}]},\"name\":\"UI.0\",\"lookupTables\":{\"lookupTable\":[]},\"constants\":{\"constant\":[]},\"properties\":{\"property\":[]}}}"
              },
              "id": "-M4y11AXoj9AnQ4QczWG",
              "metadata": {
                "configured": "true"
              },
              "name": "Data Mapper",
              "stepKind": "mapper"
            },
            {
              "action": {
                "actionType": "step",
                "descriptor": {
                  "inputDataShape": {
                    "kind": "json-schema",
                    "name": "Template JSON Schema",
                    "specification": "{\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"Template JSON Schema\",\"type\":\"object\",\"properties\":{\"first_name\":{\"description\":\"Identifier for the symbol first_name\",\"type\":\"string\"},\"company\":{\"description\":\"Identifier for the symbol company\",\"type\":\"string\"}}}"
                  },
                  "outputDataShape": {
                    "kind": "json-schema",
                    "name": "Template JSON Schema",
                    "specification": "{\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"Template JSON Schema\",\"type\":\"object\",\"properties\":{\"message\":{\"description\":\"Identifier for the symbol message\",\"type\":\"string\"}}}"
                  }
                },
                "id": "-M4y0x7Poj9AnQ4QczWF",
                "name": "Template"
              },
              "configuredProperties": {
                "language": "mustache",
                "template": "New hire for {{first_name}} from {{company}}"
              },
              "id": "-M4y0x7Qoj9AnQ4QczWF",
              "metadata": {
                "configured": "true"
              },
              "name": "Template",
              "stepKind": "template"
            },
            {
              "action": {
                "actionType": "step",
                "descriptor": {
                  "inputDataShape": {
                    "kind": "any",
                    "name": "All preceding outputs"
                  },
                  "outputDataShape": {
                    "description": "Parameters of SQL [insert into todo (task) values (:#task);]",
                    "kind": "json-schema",
                    "metadata": {
                      "variant": "element"
                    },
                    "name": "SQL Parameter",
                    "specification": "{\"type\":\"object\",\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"SQL_PARAM_IN\",\"properties\":{\"task\":{\"type\":\"string\",\"required\":true}}}",
                    "type": "SQL_PARAM_IN"
                  }
                }
              },
              "configuredProperties": {
                "atlasmapping": "{\"AtlasMapping\":{\"jsonType\":\"io.atlasmap.v2.AtlasMapping\",\"dataSource\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0Svloj9AnQ4QczWE\",\"uri\":\"atlas:json:-M4y0Svloj9AnQ4QczWE\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0x8koj9AnQ4QczWF\",\"uri\":\"atlas:json:-M4y0x8koj9AnQ4QczWF\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0qmDoj9AnQ4QczWE\",\"uri\":\"atlas:json:-M4y0qmDoj9AnQ4QczWE\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0x7Qoj9AnQ4QczWF\",\"uri\":\"atlas:json:-M4y0x7Qoj9AnQ4QczWF\",\"dataSourceType\":\"SOURCE\"},{\"jsonType\":\"io.atlasmap.json.v2.JsonDataSource\",\"id\":\"-M4y0fphoj9AnQ4QczWE\",\"uri\":\"atlas:json:-M4y0fphoj9AnQ4QczWE\",\"dataSourceType\":\"TARGET\",\"template\":null}],\"mappings\":{\"mapping\":[{\"jsonType\":\"io.atlasmap.v2.Mapping\",\"id\":\"mapping.760575\",\"inputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"message\",\"path\":\"/message\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0x7Qoj9AnQ4QczWF\",\"userCreated\":false}],\"outputField\":[{\"jsonType\":\"io.atlasmap.json.v2.JsonField\",\"name\":\"task\",\"path\":\"/task\",\"fieldType\":\"STRING\",\"docId\":\"-M4y0fphoj9AnQ4QczWE\",\"userCreated\":false}]}]},\"name\":\"UI.0\",\"lookupTables\":{\"lookupTable\":[]},\"constants\":{\"constant\":[]},\"properties\":{\"property\":[]}}}"
              },
              "id": "-M4y0zQDoj9AnQ4QczWG",
              "metadata": {
                "configured": "true"
              },
              "name": "Data Mapper",
              "stepKind": "mapper"
            },
            {
              "action": {
                "actionType": "connector",
                "description": "Invoke SQL to obtain, store, update, or delete data.",
                "descriptor": {
                  "componentScheme": "sql",
                  "connectorCustomizers": [
                    "io.syndesis.connector.sql.customizer.SqlConnectorCustomizer"
                  ],
                  "inputDataShape": {
                    "description": "Parameters of SQL [insert into todo (task) values (:#task);]",
                    "kind": "json-schema",
                    "metadata": {
                      "variant": "element"
                    },
                    "name": "SQL Parameter",
                    "specification": "{\"type\":\"object\",\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"SQL_PARAM_IN\",\"properties\":{\"task\":{\"type\":\"string\",\"required\":true}}}",
                    "type": "SQL_PARAM_IN"
                  },
                  "outputDataShape": {
                    "description": "Result of SQL [insert into todo (task) values (:#task);]",
                    "kind": "json-schema",
                    "metadata": {
                      "variant": "collection"
                    },
                    "name": "SQL Result",
                    "specification": "{\"type\":\"array\",\"$schema\":\"http://json-schema.org/schema#\",\"items\":{\"type\":\"object\",\"title\":\"SQL_PARAM_OUT\",\"properties\":{\"id\":{\"type\":\"integer\",\"required\":true}}}}",
                    "type": "SQL_PARAM_OUT"
                  },
                  "propertyDefinitionSteps": [
                    {
                      "name": "SQL statement",
                      "properties": {
                        "batch": {
                          "defaultValue": "false",
                          "deprecated": false,
                          "displayName": "Batch update",
                          "group": "common",
                          "javaType": "java.lang.Boolean",
                          "kind": "property",
                          "labelHint": "Use prepared statements for INSERT, UPDATE, DELETE in order to update multiple rows with batch update.",
                          "order": 2,
                          "required": false,
                          "secret": false,
                          "type": "boolean"
                        },
                        "query": {
                          "dataList": [
                            "insert into todo (task) values (:#task);"
                          ],
                          "defaultValue": "insert into todo (task) values (:#task);",
                          "deprecated": false,
                          "displayName": "SQL statement",
                          "group": "common",
                          "javaType": "java.lang.String",
                          "kind": "path",
                          "labelHint": "SQL statement to be executed. Can contain input parameters prefixed by ':#'.",
                          "order": 1,
                          "placeholder": "for example ':#MYPARAMNAME'",
                          "required": true,
                          "secret": false,
                          "type": "dataList"
                        },
                        "raiseErrorOnNotFound": {
                          "defaultValue": "false",
                          "deprecated": false,
                          "displayName": "Raise error when record not found",
                          "group": "common",
                          "javaType": "java.lang.Boolean",
                          "kind": "property",
                          "labelHint": "Error when no records are selected, updated or deleted",
                          "order": 3,
                          "required": false,
                          "secret": false,
                          "type": "boolean"
                        }
                      }
                    }
                  ],
                  "standardizedErrors": [
                    {
                      "displayName": "DataAccessError",
                      "name": "DATA_ACCESS_ERROR"
                    },
                    {
                      "displayName": "EntityNotFoundError",
                      "name": "ENTITY_NOT_FOUND_ERROR"
                    },
                    {
                      "displayName": "DuplicateKeyError",
                      "name": "DUPLICATE_KEY_ERROR"
                    },
                    {
                      "displayName": "ConnectorError",
                      "name": "CONNECTOR_ERROR"
                    }
                  ]
                },
                "id": "sql-connector",
                "name": "Invoke SQL",
                "pattern": "To",
                "tags": [
                  "dynamic"
                ]
              },
              "configuredProperties": {
                "batch": "false",
                "query": "insert into todo (task) values (:#task);",
                "raiseErrorOnNotFound": "false"
              },
              "connection": {
                "configuredProperties": {
                  "password": "Â»ENC:3b8eb1233c76249873c3562340abab511e5cdd590e0c5399a95fc2742336aa8112b84ecc9e5f56d91ff2f5a21d28c2f4",
                  "schema": "sampledb",
                  "url": "jdbc:postgresql://syndesis-db:5432/sampledb",
                  "user": "sampledb"
                },
                "connector": {
                  "actions": [
                    {
                      "actionType": "connector",
                      "description": "Invoke SQL to obtain, store, update, or delete data.",
                      "descriptor": {
                        "componentScheme": "sql",
                        "connectorCustomizers": [
                          "io.syndesis.connector.sql.customizer.SqlConnectorCustomizer"
                        ],
                        "inputDataShape": {
                          "kind": "json-schema"
                        },
                        "outputDataShape": {
                          "kind": "json-schema"
                        },
                        "propertyDefinitionSteps": [
                          {
                            "description": "Enter a SQL statement that starts with INSERT, SELECT, UPDATE or DELETE.",
                            "name": "SQL statement",
                            "properties": {
                              "batch": {
                                "defaultValue": false,
                                "deprecated": false,
                                "displayName": "Batch update",
                                "group": "common",
                                "javaType": "java.lang.Boolean",
                                "kind": "property",
                                "labelHint": "Use prepared statements for INSERT, UPDATE, DELETE in order to update multiple rows with batch update.",
                                "order": 2,
                                "required": false,
                                "secret": false,
                                "type": "boolean"
                              },
                              "query": {
                                "deprecated": false,
                                "displayName": "SQL statement",
                                "group": "common",
                                "javaType": "java.lang.String",
                                "kind": "path",
                                "labelHint": "SQL statement to be executed. Can contain input parameters prefixed by ':#'.",
                                "order": 1,
                                "placeholder": "for example ':#MYPARAMNAME'",
                                "required": true,
                                "secret": false,
                                "type": "dataList"
                              },
                              "raiseErrorOnNotFound": {
                                "defaultValue": false,
                                "deprecated": false,
                                "displayName": "Raise error when record not found",
                                "group": "common",
                                "javaType": "java.lang.Boolean",
                                "kind": "property",
                                "labelHint": "Error when no records are selected, updated or deleted",
                                "order": 3,
                                "required": false,
                                "secret": false,
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "standardizedErrors": [
                          {
                            "displayName": "DataAccessError",
                            "name": "DATA_ACCESS_ERROR"
                          },
                          {
                            "displayName": "EntityNotFoundError",
                            "name": "ENTITY_NOT_FOUND_ERROR"
                          },
                          {
                            "displayName": "DuplicateKeyError",
                            "name": "DUPLICATE_KEY_ERROR"
                          },
                          {
                            "displayName": "ConnectorError",
                            "name": "CONNECTOR_ERROR"
                          }
                        ]
                      },
                      "id": "sql-connector",
                      "name": "Invoke SQL",
                      "pattern": "To",
                      "tags": [
                        "dynamic"
                      ]
                    },
                    {
                      "actionType": "connector",
                      "description": "Periodically invoke SQL to obtain data.",
                      "descriptor": {
                        "componentScheme": "sql",
                        "connectorCustomizers": [
                          "io.syndesis.connector.sql.customizer.SqlStartConnectorCustomizer"
                        ],
                        "inputDataShape": {
                          "kind": "none"
                        },
                        "outputDataShape": {
                          "kind": "json-schema"
                        },
                        "propertyDefinitionSteps": [
                          {
                            "description": "Enter a SQL statement that returns results, such as SELECT.",
                            "name": "SQL statement",
                            "properties": {
                              "isRaiseErrorOnNotFound": {
                                "deprecated": false,
                                "displayName": "Raise NotFoundError",
                                "group": "consumer",
                                "javaType": "java.lang.Boolean",
                                "kind": "parameter",
                                "labelHint": "Raise NotFoundError if no records are inserted, updated, selected or deleted",
                                "order": 3,
                                "required": false,
                                "secret": false,
                                "type": "boolean"
                              },
                              "query": {
                                "deprecated": false,
                                "displayName": "SQL statement",
                                "group": "common",
                                "javaType": "java.lang.String",
                                "kind": "path",
                                "labelHint": "SQL statement to be executed.",
                                "order": 1,
                                "required": true,
                                "secret": false,
                                "type": "dataList"
                              },
                              "schedulerExpression": {
                                "defaultValue": 60000,
                                "deprecated": false,
                                "displayName": "Period",
                                "group": "consumer",
                                "javaType": "long",
                                "kind": "parameter",
                                "labelHint": "Delay between scheduling (executing).",
                                "order": 2,
                                "required": false,
                                "secret": false,
                                "type": "duration"
                              }
                            }
                          }
                        ]
                      },
                      "id": "sql-start-connector",
                      "name": "Periodic SQL invocation",
                      "pattern": "From",
                      "tags": [
                        "dynamic"
                      ]
                    },
                    {
                      "actionType": "connector",
                      "description": "Invoke a stored procedure.",
                      "descriptor": {
                        "componentScheme": "sql-stored",
                        "connectorCustomizers": [
                          "io.syndesis.connector.sql.customizer.SqlStoredConnectorCustomizer"
                        ],
                        "inputDataShape": {
                          "kind": "json-schema"
                        },
                        "outputDataShape": {
                          "kind": "json-schema"
                        },
                        "propertyDefinitionSteps": [
                          {
                            "description": "Select the stored procedure.",
                            "name": "Procedure name",
                            "properties": {
                              "procedureName": {
                                "componentProperty": true,
                                "deprecated": false,
                                "displayName": "Procedure name",
                                "group": "common",
                                "javaType": "java.lang.String",
                                "kind": "property",
                                "labelHint": "Name of the stored procedure.",
                                "required": false,
                                "secret": false,
                                "type": "select"
                              },
                              "template": {
                                "componentProperty": false,
                                "deprecated": false,
                                "displayName": "Template",
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "path",
                                "labelHint": "Stored procedure template to perform.",
                                "required": false,
                                "secret": false,
                                "type": "hidden"
                              }
                            }
                          }
                        ]
                      },
                      "id": "sql-stored-connector",
                      "name": "Invoke stored procedure",
                      "pattern": "To",
                      "tags": [
                        "dynamic"
                      ]
                    },
                    {
                      "actionType": "connector",
                      "description": "Periodically invoke a stored procedure.",
                      "descriptor": {
                        "componentScheme": "sql-stored",
                        "connectorCustomizers": [
                          "io.syndesis.connector.sql.customizer.SqlStartStoredConnectorCustomizer"
                        ],
                        "inputDataShape": {
                          "kind": "none"
                        },
                        "outputDataShape": {
                          "kind": "json-schema"
                        },
                        "propertyDefinitionSteps": [
                          {
                            "description": "Select the stored procedure.",
                            "name": "Procedure name",
                            "properties": {
                              "procedureName": {
                                "componentProperty": true,
                                "deprecated": false,
                                "displayName": "Procedure name",
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "path",
                                "labelHint": "Name of the stored procedure.",
                                "required": true,
                                "secret": false,
                                "type": "select"
                              },
                              "schedulerExpression": {
                                "defaultValue": 60000,
                                "deprecated": false,
                                "displayName": "Period",
                                "group": "consumer",
                                "javaType": "long",
                                "kind": "parameter",
                                "labelHint": "Delay between scheduling (executing).",
                                "required": false,
                                "secret": false,
                                "type": "duration"
                              },
                              "template": {
                                "componentProperty": false,
                                "deprecated": false,
                                "displayName": "Template",
                                "group": "producer",
                                "javaType": "java.lang.String",
                                "kind": "path",
                                "labelHint": "Stored Procedure template to perform.",
                                "required": true,
                                "secret": false,
                                "type": "hidden"
                              }
                            }
                          }
                        ]
                      },
                      "id": "sql-stored-start-connector",
                      "name": "Periodic stored procedure invocation",
                      "pattern": "From",
                      "tags": [
                        "dynamic"
                      ]
                    }
                  ],
                  "connectorCustomizers": [
                    "io.syndesis.connector.sql.customizer.DataSourceCustomizer"
                  ],
                  "dependencies": [
                    {
                      "id": "io.syndesis.connector:connector-sql:1.10-SNAPSHOT",
                      "type": "MAVEN"
                    },
                    {
                      "id": "jdbc-driver",
                      "type": "EXTENSION_TAG"
                    }
                  ],
                  "description": "Invoke SQL to obtain, store, update, or delete data.",
                  "icon": "assets:sql.svg",
                  "id": "sql",
                  "name": "Database",
                  "properties": {
                    "password": {
                      "componentProperty": true,
                      "deprecated": false,
                      "displayName": "Password",
                      "group": "security",
                      "javaType": "java.lang.String",
                      "kind": "property",
                      "label": "common,security",
                      "labelHint": "Password for the database connection.",
                      "order": 3,
                      "required": true,
                      "secret": true,
                      "type": "string"
                    },
                    "schema": {
                      "componentProperty": true,
                      "deprecated": false,
                      "displayName": "Schema",
                      "group": "common",
                      "javaType": "java.lang.String",
                      "kind": "property",
                      "label": "common",
                      "labelHint": "Database schema.",
                      "order": 4,
                      "required": false,
                      "secret": false,
                      "type": "string"
                    },
                    "url": {
                      "componentProperty": true,
                      "deprecated": false,
                      "displayName": "Connection URL",
                      "group": "common",
                      "javaType": "java.lang.String",
                      "kind": "property",
                      "labelHint": "JDBC URL of the database.",
                      "order": 1,
                      "required": true,
                      "secret": false,
                      "type": "string"
                    },
                    "user": {
                      "componentProperty": true,
                      "deprecated": false,
                      "displayName": "Username",
                      "group": "common",
                      "javaType": "java.lang.String",
                      "kind": "property",
                      "labelHint": "Username for the database connection.",
                      "order": 2,
                      "required": true,
                      "secret": false,
                      "type": "string"
                    }
                  },
                  "tags": [
                    "verifier"
                  ],
                  "version": 6
                },
                "connectorId": "sql",
                "description": "Connection to SampleDB",
                "icon": "assets:sql.svg",
                "id": "5",
                "isDerived": false,
                "name": "PostgresDB",
                "tags": [
                  "sampledb"
                ],
                "uses": 0
              },
              "id": "-M4y0fphoj9AnQ4QczWE",
              "metadata": {
                "configured": "true"
              },
              "stepKind": "endpoint"
            }
          ],
          "tags": [
            "5",
            "i-LhL2-ccjv5WqGyjCaVVz",
            "webhook"
          ],
          "type": "PRIMARY"
        }
      ],
      "id": "i-M4y1EddlCY5ii3d0hYCz",
      "name": "SendMail",
      "tags": [
        "email-send",
        "sql",
        "webhook"
      ],
      "updatedAt": 1593773382251,
      "version": 11
    }
  }
}
