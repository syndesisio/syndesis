[
  {
    "kind": "connector",
    "data": {
      "id": "twitter",
      "name": "Twitter",
      "description": "Direct and event-driven interaction with Twitter timelines, searches, and messages",
      "icon": "fa-twitter",
      "dependencies": [
        {
          "type": "MAVEN",
          "id": "io.syndesis:camel-component-proxy:@syndesis.version@"
        },
        {
          "type": "MAVEN",
          "id": "org.apache.camel:camel-twitter:@camel.version@"
        }
      ],
      "configuredProperties": {},
      "properties": {
        "accessToken": {
          "kind": "property",
          "displayName": "Access Token",
          "group": "security",
          "label": "security",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "The access token"
        },
        "accessTokenSecret": {
          "kind": "property",
          "displayName": "Access Token Secret",
          "group": "security",
          "label": "security",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "The access token secret"
        },
        "consumerKey": {
          "kind": "property",
          "displayName": "Consumer Key",
          "group": "security",
          "label": "security",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-client-id"
          ],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "The consumer key"
        },
        "consumerSecret": {
          "kind": "property",
          "displayName": "Consumer Secret",
          "group": "security",
          "label": "security",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-client-secret"
          ],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "The consumer secret"
        }
      },
      "actions": [
        {
          "name": "Mention",
          "description": "Search for tweets that mention you",
          "id": "io.syndesis:twitter-mention-connector:latest",
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "componentScheme": "twitter-timeline",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "java",
              "type": "twitter4j.Status"
            },
            "configuredProperties": {
              "timelineType": "MENTIONS",
              "delay": "30000"
            },
            "propertyDefinitionSteps": []
          }
        },
        {
          "name": "Search",
          "description": "Search tweets based one or more keywords",
          "id": "io.syndesis:twitter-search-connector:latest",
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "componentScheme": "twitter-search",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "java",
              "type": "twitter4j.Status"
            },
            "configuredProperties": {},
            "propertyDefinitionSteps": [
              {
                "name": "Search criteria",
                "description": "Specify criteria for search",
                "properties": {
                  "filterOld": {
                    "kind": "parameter",
                    "displayName": "Ignore tweets previously found",
                    "group": "filter",
                    "label": "consumer,filter",
                    "required": false,
                    "type": "boolean",
                    "javaType": "boolean",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "defaultValue": true,
                    "componentProperty": false,
                    "description": "Filter out old tweets that have previously been polled"
                  },
                  "keywords": {
                    "kind": "path",
                    "displayName": "Keywords",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "description": "Multiple search values can be separated with comma"
                  },
                  "delay": {
                    "kind": "parameter",
                    "displayName": "Delay",
                    "group": "scheduler",
                    "label": "consumer,scheduler",
                    "required": false,
                    "type": "integer",
                    "javaType": "long",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "defaultValue": 5000,
                    "componentProperty": false,
                    "description": "Milliseconds before the next poll"
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "kind": "connector",
    "data": {
      "id": "salesforce",
      "name": "Salesforce",
      "description": "Cloud-based Customer Relationship Management",
      "icon": "fa-puzzle-piece",
      "configuredProperties": {},
      "properties": {
        "loginUrl": {
          "kind": "property",
          "displayName": "Login Url",
          "group": "security",
          "label": "common,security",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "defaultValue": "https://login.salesforce.com",
          "description": "URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com"
        },
        "clientId": {
          "kind": "property",
          "displayName": "Client Id",
          "group": "security",
          "label": "common,security",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-client-id"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package."
        },
        "clientSecret": {
          "kind": "property",
          "displayName": "Client Secret",
          "group": "security",
          "label": "common,security",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-client-secret"
          ],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "OAuth Consumer Secret of the connected app configured in the Salesforce instance setup."
        },
        "refreshToken": {
          "kind": "property",
          "displayName": "Refresh Token",
          "group": "security",
          "label": "common,security",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost."
        },
        "userName": {
          "kind": "property",
          "displayName": "User Name",
          "group": "security",
          "label": "common,security",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows."
        },
        "password": {
          "kind": "property",
          "displayName": "Password",
          "group": "security",
          "label": "common,security",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one."
        }
      },
      "actions": [
        {
          "id": "io.syndesis:salesforce-create-sobject-connector:latest",
          "name": "New record",
          "description": "Create a new record like Account, Contact or Order on Salesforce.",
          "tags": [
            "dynamic"
          ],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-create-sobject-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-create-sobject",
            "inputDataShape": {
              "kind": "json-schema"
            },
            "outputDataShape": {
              "kind": "java",
              "type": "org.apache.camel.component.salesforce.api.dto.CreateSObjectResult"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name of the record to create",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:salesforce-delete-sobject-connector:latest",
          "name": "Delete record",
          "description": "Delete a record from Salesforce.",
          "tags": [
            "dynamic"
          ],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-delete-sobject-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-delete-sobject",
            "inputDataShape": {
              "kind": "java",
              "type": "io.syndesis.connector.salesforce.SalesforceIdentifier"
            },
            "outputDataShape": {
              "kind": "none"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name of the record to delete",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:salesforce-delete-sobject-with-id-connector:latest",
          "name": "Delete record by external identifier",
          "description": "Delete a record from Salesforce based on the value of an external identifier.",
          "tags": [
            "dynamic"
          ],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-delete-sobject-with-id-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-delete-sobject-with-id",
            "inputDataShape": {
              "kind": "java",
              "type": "io.syndesis.connector.salesforce.SalesforceIdentifier"
            },
            "outputDataShape": {
              "kind": "none"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name of the record to delete",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              },
              {
                "name": "External identifier field name",
                "description": "Specify the field name of the external identifier",
                "properties": {
                  "sObjectIdName": {
                    "kind": "parameter",
                    "displayName": "External identifier field",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "",
                    "description": "Field name of the external identifier"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:salesforce-get-sobject-connector:latest",
          "name": "Fetch record",
          "description": "Fetches a record from Salesforce by its identifier value.",
          "tags": [
            "dynamic"
          ],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-get-sobject-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-get-sobject",
            "inputDataShape": {
              "kind": "java",
              "type": "io.syndesis.connector.salesforce.SalesforceIdentifier"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name of the record to fetch",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:salesforce-get-sobject-with-id-connector:latest",
          "name": "Fetch record by external identifier",
          "description": "Fetches a record from Salesforce by the value of an external identifier.",
          "tags": [
            "dynamic"
          ],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-get-sobject-with-id-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-get-sobject-with-id",
            "inputDataShape": {
              "kind": "java",
              "type": "io.syndesis.connector.salesforce.SalesforceIdentifier"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name of the record to fetch",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              },
              {
                "name": "External identifier field name",
                "description": "Specify the field name of the external identifier",
                "properties": {
                  "sObjectIdName": {
                    "kind": "parameter",
                    "displayName": "External identifier field",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "",
                    "description": "Field name of the external identifier"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:salesforce-update-sobject-connector:latest",
          "name": "Update record",
          "description": "Update a record on Salesforce.",
          "tags": [
            "dynamic"
          ],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-update-sobject-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-update-sobject",
            "inputDataShape": {
              "kind": "json-schema"
            },
            "outputDataShape": {
              "kind": "none"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name of the record to update",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:salesforce-upsert-sobject-connector:latest",
          "name": "Create or update record",
          "description": "Create or update a record on Salesforce.",
          "tags": [
            "dynamic"
          ],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-upsert-sobject-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-upsert-sobject",
            "inputDataShape": {
              "kind": "json-schema"
            },
            "outputDataShape": {
              "kind": "java",
              "type": "org.apache.camel.component.salesforce.api.dto.CreateSObjectResult"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name of the record to create or update",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              },
              {
                "name": "Identifier field name",
                "description": "Specify the field name that holds the identifying value",
                "properties": {
                  "sObjectIdName": {
                    "kind": "parameter",
                    "displayName": "Identifier field",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "",
                    "description": "Field name of the identifier"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:salesforce-on-create-connector:latest",
          "name": "On create",
          "description": "Get notified when an Salesforce record is created.",
          "tags": [
            "dynamic"
          ],
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-on-create-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-on-create",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name for which to receive notification when records are created",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:salesforce-on-update-connector:latest",
          "name": "On update",
          "description": "Get notified when an Salesforce record is updated.",
          "tags": [
            "dynamic"
          ],
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-on-update-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-on-update",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name for which to receive notification when records are updated",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:salesforce-on-delete-connector:latest",
          "name": "On delete",
          "description": "Get notified when an Salesforce record is deleted.",
          "tags": [
            "dynamic"
          ],
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:salesforce-on-delete-connector:@syndesis.version@",
            "camelConnectorPrefix": "salesforce-on-delete",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "java",
              "type": "io.syndesis.connector.salesforce.SalesforceIdentifier"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Name of the object",
                "description": "Specify the Salesforce object name for which to receive notification when records are deleted",
                "properties": {
                  "sObjectName": {
                    "kind": "parameter",
                    "displayName": "Object name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "Contact",
                    "description": "Name of the Salesforce object"
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "kind": "connector",
    "data": {
      "id": "activemq",
      "name": "AMQ",
      "description": "AMQ Message Broker",
      "icon": "fa-puzzle-piece",
      "configuredProperties": {},
      "properties": {
        "brokerUrl": {
          "kind": "property",
          "displayName": "Broker URL",
          "group": "common",
          "label": "common",
          "required": true,
          "componentProperty": true,
          "type": "string",
          "javaType": "java.lang.String",
          "deprecated": false,
          "secret": false,
          "description": "Location to send data to or obtain data from."
        },
        "username": {
          "kind": "property",
          "displayName": "User Name",
          "group": "security",
          "label": "common,security",
          "required": false,
          "componentProperty": true,
          "type": "string",
          "javaType": "java.lang.String",
          "deprecated": false,
          "secret": false,
          "description": "Access the broker with this user’s authorization credentials."
        },
        "password": {
          "kind": "property",
          "displayName": "Password",
          "group": "security",
          "label": "common,security",
          "required": false,
          "componentProperty": true,
          "type": "string",
          "javaType": "java.lang.String",
          "deprecated": false,
          "secret": true,
          "description": "Password for the specified user account."
        },
        "clientID" : {
          "kind" : "property",
          "displayName" : "Client ID",
          "group" : "security",
          "label" : "common,security",
          "required" : false,
          "componentProperty": true,
          "type" : "string",
          "javaType" : "java.lang.String",
          "deprecated" : false,
          "secret" : false,
          "description" : "Required for connections to close and reopen without missing messages. Connection destination must be a topic."
        },
        "skipCertificateCheck" : {
          "kind" : "property",
          "displayName" : "Skip Certificate Check",
          "group" : "security",
          "label" : "common,security",
          "required" : false,
          "componentProperty": true,
          "type" : "string",
          "javaType" : "java.lang.String",
          "enum": [
            {
              "value": "false",
              "label": "Disable"
            },
            {
              "value": "true",
              "label": "Enable"
            }
          ],
          "defaultValue" : "false",
          "deprecated" : false,
          "secret" : false,
          "description" : "For convenience in only development environments. Do not set for secure production environments."
        },
        "brokerCertificate" : {
          "kind" : "property",
          "displayName" : "Broker Certificate",
          "group" : "security",
          "label" : "common,security",
          "required" : false,
          "componentProperty": true,
          "type" : "string",
          "javaType" : "java.lang.String",
          "deprecated" : false,
          "secret" : false,
          "description" : "AMQ Broker X.509 PEM Certificate",
          "relation": [
            {
              "action": "VISIBLE",
              "when": [
                {
                  "id": "skipCertificateCheck",
                  "value": true
                }
              ]
            }
          ]
        },
        "clientCertificate" : {
          "kind" : "property",
          "displayName" : "Client Certificate",
          "group" : "security",
          "label" : "common,security",
          "required" : false,
          "componentProperty": true,
          "type" : "string",
          "javaType" : "java.lang.String",
          "deprecated" : false,
          "secret" : false,
          "description" : "AMQ Client X.509 PEM Certificate",
          "relation": [
            {
              "action": "VISIBLE",
              "when": [
                {
                  "id": "skipCertificateCheck",
                  "value": true
                }
              ]
            }
          ]
        }
      },
      "actions": [
        {
          "id": "io.syndesis:activemq-publish-connector:latest",
          "name": "Publish messages",
          "description": "Send data to the destination you specify.",
          "tags": [],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:activemq-publish-connector:@syndesis-connectors.version@",
            "camelConnectorPrefix": "activemq-publish",
            "inputDataShape": {
              "type": "*"
            },
            "outputDataShape": {
              "kind": "none"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Select the JMS Destination",
                "description": "Specify AMQ Connection Factory properties, including Queue or Topic Name",
                "properties": {
                  "destinationName": {
                    "kind": "path",
                    "displayName": "Destination Name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "description": "Name of the queue or topic to send data to."
                  },
                  "destinationType": {
                    "kind": "path",
                    "displayName": "Destination Type",
                    "group": "common",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "enum": [
                      {
                        "value": "topic",
                        "label": "Topic"
                      },
                      {
                        "value": "queue",
                        "label": "Queue"
                      }
                    ],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "topic",
                    "description": "By default, the destination is a topic."
                  },
                  "persistent": {
                    "kind": "parameter",
                    "displayName": "Persistent",
                    "group": "producer",
                    "label": "producer",
                    "required": false,
                    "type": "boolean",
                    "javaType": "boolean",
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": true,
                    "description": "Message delivery is guaranteed when Persistent is selected."
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:activemq-subscribe-connector:latest",
          "name": "Subscribe for messages",
          "description": "Receive data from the destination you specify.",
          "tags": [],
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:activemq-subscribe-connector:@syndesis-connectors.version@",
            "camelConnectorPrefix": "activemq-subscribe",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "type": "*"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Select the JMS Destination",
                "description": "Specify AMQ Connection Factory properties, including Queue or Topic Name",
                "properties": {
                  "destinationName": {
                    "kind": "path",
                    "displayName": "Destination Name",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "description": "Name of the queue or topic to receive data from."
                  },
                  "destinationType": {
                    "kind": "path",
                    "displayName": "Destination Type",
                    "group": "common",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "enum": [
                      {
                        "value": "topic",
                        "label": "Topic"
                      },
                      {
                        "value": "queue",
                        "label": "Queue"
                      }
                    ],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "topic",
                    "description": "By default, the destination is a topic."
                  },
                  "durableSubscriptionId": {
                    "kind": "parameter",
                    "displayName": "Durable Subscription ID",
                    "group": "consumer",
                    "label": "consumer",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "description": "Set the ID that lets connections close and reopen with missing messages. Connection type must be a topic."
                  },
                  "messageSelector": {
                    "kind": "parameter",
                    "displayName": "Message Selector",
                    "group": "consumer (advanced)",
                    "label": "consumer,advanced",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "description": "Specify a filter expression to receive only data that meets certain criteria."
                  }
                }
              }
            ]
          }
        },
        {
          "id": "io.syndesis:activemq-request-connector:latest",
          "name": "Request response using messages",
          "description": "Send data to the destination you specify and receive a response.",
          "tags": [],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:activemq-request-connector:@syndesis-connectors.version@",
            "camelConnectorPrefix": "activemq-request",
            "inputDataShape": {
              "type": "*"
            },
            "outputDataShape": {
              "type": "*"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Select the JMS Destination",
                "description": "Specify AMQ Connection Factory properties, including Queue or Topic Name",
                "properties": {
                  "destinationName": {
                    "kind": "path",
                    "displayName": "Name of the queue or topic to send data to.",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "description": "DestinationName is a JMS queue or topic name. By default the destinationName is interpreted as a queue name."
                  },
                  "destinationType": {
                    "kind": "path",
                    "displayName": "Destination Type",
                    "group": "common",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "enum": [
                      {
                        "value": "topic",
                        "label": "Topic"
                      },
                      {
                        "value": "queue",
                        "label": "Queue"
                      }
                    ],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "topic",
                    "description": "By default, the destination is a topic."
                  },
                  "messageSelector": {
                    "kind": "parameter",
                    "displayName": "Message Selector",
                    "group": "consumer (advanced)",
                    "label": "consumer,advanced",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "description": "Specify a filter expression to receive only responses that meet certain criteria."
                  },
                  "namedReplyTo": {
                    "kind": "parameter",
                    "displayName": "Named Reply To",
                    "group": "producer",
                    "label": "producer",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "description": "The destination sends the response to this queue or topic."
                  },
                  "persistent": {
                    "kind": "parameter",
                    "displayName": "Persistent",
                    "group": "producer",
                    "label": "producer",
                    "required": false,
                    "type": "boolean",
                    "javaType": "boolean",
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": true,
                    "description": "Message delivery is guaranteed when Persistent is selected."
                  },
                  "responseTimeOut": {
                    "kind": "parameter",
                    "displayName": "Response Time Out",
                    "group": "producer (advanced)",
                    "label": "producer,advanced",
                    "required": false,
                    "type": "integer",
                    "javaType": "long",
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": 5000,
                    "description": "Amount of time a connection waits for a response message before throwing a runtime exception."
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "kind": "connector",
    "data": {
      "id": "sql",
      "name": "Database",
      "description": "Invoke SQL or Stored Procedures",
      "icon": "fa-database",
      "configuredProperties": {},
      "properties": {
        "url": {
          "kind": "property",
          "displayName": "Connection URL",
          "group": "common",
          "label": "",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "defaultValue": "jdbc:postgresql://syndesis-db:5432/sampledb",
          "description": "JDBC URL of the database"
        },
        "user": {
          "kind": "property",
          "displayName": "Username",
          "group": "common",
          "label": "",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "defaultValue": "sampledb",
          "description": "Username for the database connection"
        },
        "password": {
          "kind": "property",
          "displayName": "Password",
          "group": "security",
          "label": "common,security",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "Password for the database connection"
        },
        "schema": {
          "kind": "property",
          "displayName": "Schema",
          "group": "common",
          "label": "common",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "defaultValue": "sampledb",
          "description": "Database schema"
        }
      },
      "actions": [
        {
          "id": "sql-connector",
          "name": "Invoke SQL",
          "description": "Invoke SQL to get data in and/or out",
          "tags": [
            "dynamic"
          ],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:sql-connector:@syndesis.version@",
            "camelConnectorPrefix": "sql-connector",
            "inputDataShape": {
              "kind": "json-schema"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "name": "SQL Statement",
                "description": "Enter a SQL Statement starting with INSERT, SELECT, UPDATE or DELETE",
                "properties": {
                  "query": {
                    "kind": "path",
                    "displayName": "SQL Statement",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "deprecated": false,
                    "secret": false,
                    "description": "SQL Statement to be executed. Can contain input parameters prefixed by ':#' i.e. ':#MYPARAMNAME'"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "sql-start-connector",
          "name": "Periodic SQL Invocation",
          "description": "Invoke SQL to periodically get data out",
          "tags": [
            "dynamic"
          ],
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:sql-start-connector:@syndesis.version@",
            "camelConnectorPrefix": "sql-start-connector",
            "inputDataShape": {
              "kind": " none"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "name": "SQL Statement",
                "description": "Enter a SQL Statement starting with SELECT",
                "properties": {
                  "query": {
                    "kind": "path",
                    "displayName": "SQL Statement",
                    "group": "common",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "deprecated": false,
                    "secret": false,
                    "description": "SQL Select Statement to be executed"
                  },
                  "schedulerPeriod": {
                    "kind": "parameter",
                    "displayName": "Period",
                    "group": "consumer",
                    "required": false,
                    "type": "integer",
                    "javaType": "long",
                    "deprecated": false,
                    "secret": false,
                    "defaultValue": 1000,
                    "description": "Delay in milli seconds between scheduling (executing)"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "sql-stored-connector",
          "name": "Invoke Stored Procedure",
          "description": "Invoke a Stored Procedure to get Data in and/or out",
          "tags": [
            "dynamic"
          ],
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:sql-stored-connector:@syndesis.version@",
            "camelConnectorPrefix": "sql-stored-connector",
            "inputDataShape": {
              "kind": "json-schema"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Procedure Name",
                "description": "Select the Stored Procedure",
                "properties": {
                  "procedureName": {
                    "kind": "property",
                    "group": "common",
                    "displayName": "Procedure Name",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": true,
                    "componentProperty": true,
                    "description": "Name of the Store Procedure"
                  },
                  "template": {
                    "kind": "path",
                    "displayName": "Template",
                    "group": "producer",
                    "required": true,
                    "type": "hidden",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "",
                    "description": "StoredProcedure template to perform"
                  }
                }
              }
            ]
          }
        },
        {
          "id": "sql-stored-start-connector",
          "name": "Periodic Stored Procedure Invocation",
          "description": "Periodically Invoke a Stored Procedure to get Data out",
          "tags": [
            "dynamic"
          ],
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:sql-stored-start-connector:@syndesis.version@",
            "camelConnectorPrefix": "sql-stored-start-connector",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "json-schema"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Procedure Name",
                "description": "Select the Stored Procedure",
                "properties": {
                  "procedureName": {
                    "kind": "path",
                    "displayName": "Procedure Name",
                    "group": "producer",
                    "required": true,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": true,
                    "description": "Name of the Store Procedure"
                  },
                  "template": {
                    "kind": "path",
                    "displayName": "Template",
                    "group": "producer",
                    "required": true,
                    "type": "hidden",
                    "javaType": "java.lang.String",
                    "tags": [],
                    "deprecated": false,
                    "secret": false,
                    "componentProperty": false,
                    "defaultValue": "",
                    "description": "Stored Procedure template to perform"
                  },
                  "schedulerPeriod": {
                    "kind": "parameter",
                    "displayName": "Period",
                    "group": "consumer",
                    "required": false,
                    "type": "integer",
                    "javaType": "long",
                    "deprecated": false,
                    "secret": false,
                    "defaultValue": 1000,
                    "description": "Delay in milli seconds between scheduling (executing)"
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "kind": "connection",
    "data": {
      "id": "5",
      "name": "PostgresDB",
      "description": "Connection to SampleDB",
      "tags": [
        "sampledb"
      ],
      "icon": "fa-database",
      "connectorId": "sql",
      "configuredProperties": {
        "url": "jdbc:postgresql://syndesis-db:5432/sampledb",
        "user": "sampledb",
        "password": "@ENC:POSTGRESQL_SAMPLEDB_PASSWORD@",
        "schema": "sampledb"
      }
    }
  },
  {
    "kind": "connector-template",
    "data": {
      "id": "swagger-connector-template",
      "name": "Swagger API Connector",
      "description": "Swagger API Connector",
      "icon": "fa-link",
      "camelConnectorGAV": "io.syndesis:rest-swagger-connector:@syndesis.version@",
      "camelConnectorPrefix": "swagger-operation",
      "connectorGroup" : {
        "id": "swagger-connector-template"
      },
      "properties": {
        "specification": {
          "kind": "property",
          "displayName": "Specification",
          "group": "producer",
          "label": "producer",
          "required": true,
          "type": "file",
          "javaType": "java.lang.String",
          "tags": [
            "blob"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "Upload the Swagger specification for your Custom API Client Connector. Custom API's are RESTful APIs and can be hosted anywhere, as long as a well-documented swagger is available and conforms to OpenAPI standards."
        },
        "host": {
          "kind": "property",
          "displayName": "Host",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "Scheme hostname and port to direct the HTTP requests to in the form of https://hostname:port. Can be configured at the endpoint component or in the correspoding REST configuration in the Camel Context. If you give this component a name (e.g. petstore) that REST configuration is consulted first rest-swagger next and global configuration last. If set overrides any value found in the Swagger specification RestConfiguration. Can be overriden in endpoint configuration."
        },
        "basePath": {
          "kind": "property",
          "displayName": "Base path",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "API basePath for example /v2. Default is unset if set overrides the value present in Swagger specification."
        },
        "authenticationType": {
          "kind": "property",
          "displayName": "Authentication Type",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "authentication-type"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "Type of authentication used to connect to the API"
        },
        "authorizationEndpoint": {
          "kind": "property",
          "displayName": "OAuth Authorization Endpoint URL",
          "group": "producer",
          "label": "producer",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-authorization-url"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "URL for the start of the OAuth flow"
        },
        "tokenEndpoint": {
          "kind": "property",
          "displayName": "OAuth Token Endpoint URL",
          "group": "producer",
          "label": "producer",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-access-token-url"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "URL to fetch the OAuth Access token"
        },
        "oauthScopes": {
          "kind": "property",
          "displayName": "OAuth Scopes",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-scope"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "URL to fetch the OAuth Access token"
        }
      },
      "connectorProperties": {
        "host": {
          "kind": "property",
          "displayName": "Host",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "Scheme hostname and port to direct the HTTP requests to in the form of https://hostname:port. Can be configured at the endpoint component or in the correspoding REST configuration in the Camel Context. If you give this component a name (e.g. petstore) that REST configuration is consulted first rest-swagger next and global configuration last. If set overrides any value found in the Swagger specification RestConfiguration. Can be overriden in endpoint configuration."
        },
        "basePath": {
          "kind": "property",
          "displayName": "Base path",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "API basePath for example /v2. Default is unset if set overrides the value present in Swagger specification."
        },
        "authenticationType": {
          "kind": "property",
          "displayName": "Authentication Type",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "authentication-type"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "Type of authentication used to connect to the API"
        },
        "clientId": {
          "kind": "property",
          "displayName": "OAuth Client ID",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-client-id"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "OAuth Client ID, sometimes called Consumer Key"
        },
        "clientSecret": {
          "kind": "property",
          "displayName": "OAuth Client Secret",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-client-secret"
          ],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "OAuth Client Secret, sometimes called Consumer Secret"
        },
        "accessToken": {
          "kind": "property",
          "displayName": "OAuth Access token",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-access-token"
          ],
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "OAuth Access token"
        },
        "authorizationEndpoint": {
          "kind": "property",
          "displayName": "OAuth Authorization Endpoint URL",
          "group": "producer",
          "label": "producer",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-authorization-url"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "URL for the start of the OAuth flow"
        },
        "tokenEndpoint": {
          "kind": "property",
          "displayName": "OAuth Token Endpoint URL",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-access-token-url"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "URL to fetch the OAuth Access token"
        },
        "oauthScopes": {
          "kind": "property",
          "displayName": "OAuth Scopes",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "string",
          "javaType": "java.lang.String",
          "tags": [
            "oauth-scope"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "URL to fetch the OAuth Access token"
        },
        "specification": {
          "kind": "property",
          "displayName": "Specification",
          "group": "producer",
          "label": "producer",
          "required": false,
          "type": "hidden",
          "javaType": "java.lang.String",
          "tags": [
            "upload",
            "url"
          ],
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "Swagger specification of the service"
        },
        "username": {
          "kind": "property",
          "displayName": "Username",
          "group": "producer",
          "label": "producer",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "deprecated": false,
          "secret": false,
          "componentProperty": true,
          "description": "Username to authenticate with"
        },
        "password": {
          "kind": "property",
          "displayName": "Password",
          "group": "producer",
          "label": "producer",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "deprecated": false,
          "secret": true,
          "componentProperty": true,
          "description": "Password to authenticate with"
        }
      }
    }
  },
  {
    "kind": "connector",
    "data": {
      "id": "aws-s3",
      "name": "Amazon S3",
      "description": "Direct AWS S3",
      "icon": "fa-puzzle-piece",
      "configuredProperties": {},
      "properties": {
        "accessKey": {
          "kind": "parameter",
          "displayName": "Access Key",
          "group": "common",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "deprecated": false,
          "secret": false,
          "description": "Amazon AWS Access Key"
        },
        "secretKey": {
          "kind": "parameter",
          "displayName": "Secret Key",
          "group": "common",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "deprecated": false,
          "secret": true,
          "description": "Amazon AWS Secret Key"
        },
        "region": {
          "kind": "parameter",
          "displayName": "Region",
          "group": "producer",
          "label": "producer",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "deprecated": false,
          "secret": false,
          "description": "The region where the bucket is located. This option is used in the com.amazonaws.services.s3.model.CreateBucketRequest."
        },
        "bucketNameOrArn": {
          "kind": "path",
          "displayName": "Bucket Name Or Amazon Resource Name",
          "group": "common",
          "required": true,
          "type": "string",
          "javaType": "java.lang.String",
          "deprecated": false,
          "secret": false,
          "description": "Bucket name or ARN"
        }
      },
      "actions": [
        {
          "name": "Copy Object",
          "description": "Create a copy of an object in an Amazon S3 bucket",
          "id": "io.syndesis:aws-s3-copy-object-connector:latest",
          "pattern": "To",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:aws-s3-copy-object-connector:@syndesis-connectors.version@",
            "camelConnectorPrefix": "aws-s3-copy-object-connector",
            "inputDataShape": {
              "kind": "java:File"
            },
            "outputDataShape": {
              "kind": "none"
            },
            "propertyDefinitionSteps": [
              {
              }
            ]
          }
        },
        {
          "name": "Get Object",
          "description": "Retrieve an object from an Amazon S3 bucket",
          "id": "io.syndesis:aws-s3-get-object-connector:latest",
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:aws-s3-get-object-connector:@syndesis-connectors.version@",
            "camelConnectorPrefix": "aws-s3-get-object-connector",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "java:com.amazonaws.services.s3.model.S3Object"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Retrieve an object from an Amazon S3 bucket",
                "description": "Set the filename and if you have to delete the file once it has been downloaded from S3",
                "properties": {
                  "deleteAfterRead": {
                    "kind": "parameter",
                    "displayName": "Delete After Read",
                    "group": "consumer",
                    "label": "consumer",
                    "required": false,
                    "type": "boolean",
                    "javaType": "boolean",
                    "deprecated": false,
                    "secret": false,
                    "defaultValue": false,
                    "description": "Delete objects from S3 after they have been retrieved. The delete is only performed if the Exchange is committed. If a rollback occurs the object is not deleted. If this option is false then the same objects will be retrieve over and over again on the polls. Therefore you need to use the Idempotent Consumer EIP in the route to filter out duplicates. You can filter using the link S3ConstantsBUCKET_NAME and link S3ConstantsKEY headers or only the link S3ConstantsKEY header."
                  },
                  "fileName": {
                    "kind": "parameter",
                    "displayName": "File Name",
                    "group": "consumer",
                    "label": "consumer",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "deprecated": false,
                    "secret": false,
                    "description": "To get the object from the bucket with the given file name"
                  }
                }
              }
            ]
          }
        },
        {
          "name": "Poll an Amazon S3 Bucket",
          "description": "Poll an Amazon S3 Bucket",
          "id": "io.syndesis:aws-s3-polling-bucket-connector:latest",
          "pattern": "From",
          "actionType": "connector",
          "descriptor": {
            "camelConnectorGAV": "io.syndesis:aws-s3-polling-bucket-connector:@syndesis-connectors.version@",
            "camelConnectorPrefix": "aws-s3-polling-bucket-connector",
            "inputDataShape": {
              "kind": "none"
            },
            "outputDataShape": {
              "kind": "java:List"
            },
            "propertyDefinitionSteps": [
              {
                "name": "Poll an Amazon S3 Bucket",
                "description": "Set if you need to delete the file once it has been downloaded from S3, the polling interval, the file prefix to use and number of objects you want to retrieve on each poll",
                "properties": {
                  "deleteAfterRead": {
                    "kind": "parameter",
                    "displayName": "Delete After Read",
                    "group": "consumer",
                    "label": "consumer",
                    "required": false,
                    "type": "boolean",
                    "javaType": "boolean",
                    "deprecated": false,
                    "secret": false,
                    "defaultValue": false,
                    "description": "Delete objects from S3 after they have been retrieved. The delete is only performed if the Exchange is committed. If a rollback occurs the object is not deleted. If this option is false then the same objects will be retrieve over and over again on the polls. Therefore you need to use the Idempotent Consumer EIP in the route to filter out duplicates. You can filter using the link S3ConstantsBUCKET_NAME and link S3ConstantsKEY headers or only the link S3ConstantsKEY header."
                  },
                  "maxMessagesPerPoll": {
                    "kind": "parameter",
                    "displayName": "Max Messages Per Poll",
                    "group": "consumer",
                    "label": "consumer",
                    "required": false,
                    "type": "integer",
                    "javaType": "int",
                    "deprecated": false,
                    "secret": false,
                    "defaultValue": 10,
                    "description": "Gets the maximum number of messages as a limit to poll at each polling. Is default unlimited but use 0 or negative number to disable it as unlimited."
                  },
                  "prefix": {
                    "kind": "parameter",
                    "displayName": "Prefix",
                    "group": "consumer",
                    "label": "consumer",
                    "required": false,
                    "type": "string",
                    "javaType": "java.lang.String",
                    "deprecated": false,
                    "secret": false,
                    "description": "The prefix which is used in the com.amazonaws.services.s3.model.ListObjectsRequest to only consume objects we are interested in."
                  },
                  "delay": {
                    "kind": "parameter",
                    "displayName": "Delay",
                    "group": "scheduler",
                    "label": "consumer,scheduler",
                    "required": false,
                    "type": "integer",
                    "javaType": "long",
                    "optionalPrefix": "consumer.",
                    "deprecated": false,
                    "secret": false,
                    "defaultValue": 500,
                    "description": "Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."
                  }
                }
              }
            ]
          }
        }
      ]
    }
  }
]
